{"version":3,"file":"index.umd.js","sources":["../src/loadThread.js","../src/getLatesMessage.js","../src/pollRun.js","../src/required_action.js","../src/runAssistant.js","../src/closeAssistant.js","../src/setupAssistant.js","../src/createAssistant.js","../src/openAssistant.js"],"sourcesContent":["/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function loadThread\r\n * @description   reattach thread from previous session\r\n * @param {string} apiKey - openai api key\r\n * @param {string} threadid - thread id\r\n * @param {string} assistant - assistant object\r\n * @returns {promise} - return {thread, assistant}\r\n */\r\nasync function loadThread(openai, threadid, assistant, reuseThread) {\r\n // let thread_id = assistant.metadata.thread_id;\r\n\r\n  let thread = null;\r\n  // If we are reusing the thread, try to retrieve it\r\n  if (reuseThread === true && threadid != '0') {\r\n    try {\r\n      thread = await openai.beta.threads.retrieve(threadid);\r\n    } catch (error) {\r\n      console.log(error); \r\n      console.log(error.status);\r\n      console.log(`Error status ${error.status}. Unable to retrieve the thread ${thread_id}`);\r\n    }\r\n  }\r\n\r\n  // If still no thread, create a new one\r\n  if (thread == null) {\r\n    console.log('Creating new thread' );\r\n    thread = await openai.beta.threads.create({\r\n      metadata: { assistanceName: assistant.name },\r\n    });\r\n    // update assistant metadata\r\n    assistant = await openai.beta.assistants.update(assistant.id, {\r\n      metadata: { thread_id: thread.id, lastRunId: \"0\" },\r\n    });\r\n  }\r\n\r\n  return { thread, assistant };\r\n}\r\nexport default loadThread;\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * \r\n * @description Return the latest message from thread\r\n * @param {object}  openai - openai object\r\n * @param {object} thread - active thread\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {*} - message\r\n */\r\nasync function getLatestMessage(openai,thread, limit) {  \r\n  const messages = await openai.beta.threads.messages.list(thread.id, {limit:limit});\r\n  \r\n  let content = messages.data[0].content[0];\r\n  let message = content[content.type].value;\r\n  return message\r\n\r\n}\r\nexport default getLatestMessage;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Poll run status since there is no streaming support\r\n * @function pollRun\r\n * @params {object} openai - openai object\r\n * @params {object} thread - thread object\r\n * @params {object} run - run object    \r\n * @params {object} gptControl - gpt  session control object\r\n * @returns {object} - runStatus from openai.beta.threads.runs.retrieve\r\n * @notes - Will wait for completion(!(queued,in_progress, cancelling))\r\n */\r\nasync function pollRun(thread, run, gptControl) {\r\n  let { openai, assistant} = gptControl;\r\n  let done = null;\r\n  let runStatus = null;\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  // Since there is no streaming support, sleep and poll the status\r\n  do {\r\n    \r\n    runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);\r\n    \r\n    console.log(\"-------------------\", runStatus.status);\r\n    if (\r\n      !(\r\n        runStatus.status === \"queued\" ||\r\n        runStatus.status === \"in_progress\" ||\r\n        runStatus.status === \"cancelling\"\r\n      )\r\n    ) {\r\n      done = runStatus.status;\r\n    } else {\r\n      await sleep(2000);\r\n      // console.log(\"waited 2000 ms\");\r\n    }\r\n  } while (done === null);\r\n\r\n  let newAssistant = await openai.beta.assistants.update(assistant.id, {\r\n    metadata: { thread_id: thread.id, lastRunId: run.id} \r\n  });\r\n  gptControl.assistant = newAssistant;\r\n  return runStatus;\r\n\r\n}\r\nexport default pollRun;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Handle required actions for Assistant\r\n * @function required_action\r\n * @param {object} runStatus - run status object\r\n * @param {object} thread - thread object\r\n * @param {object} run - run object\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {*} - status from submitToolOutputs\r\n */\r\nimport pollRun from \"./pollRun.js\";\r\nasync function required_action(runStatus, thread, run,  gptControl, appEnv) {\r\n  let{openai,specs} = gptControl;\r\n  let {functionList} = specs;\r\n  \r\n  let requiredActions = runStatus.required_action.submit_tool_outputs.tool_calls;\r\n  \r\n  let toolsOutput = [];\r\n  for (let action of requiredActions) {\r\n    let functionName = action.function.name;\r\n    console.log('Requested function: ', functionName);\r\n    let params = JSON.parse(action.function.arguments);\r\n    let response = await functionList[functionName](params, appEnv, gptControl);\r\n\r\n    toolsOutput.push({\r\n      tool_call_id: action.id,\r\n      output: JSON.stringify(response),\r\n    });\r\n }\r\n// submit the outputs to the thread\r\n let newRun = await openai.beta.threads.runs.submitToolOutputs(\r\n  thread.id, run.id, { tool_outputs: toolsOutput });\r\n\r\n// wait for output to appear in the thread messages\r\n let outputStatus = await pollRun(thread, newRun, gptControl);\r\n\r\nreturn outputStatus;\r\n}\r\nexport default required_action;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport getLatestMessage from \"./getLatesMessage.js\";\r\nimport required_action from \"./required_action.js\";\r\nimport pollRun from \"./pollRun.js\";\r\n\r\n/**\r\n * @async\r\n * @description - Run the latest prompt from the user\r\n * @function runAssistant\r\n * @param {string} prompt - User prompt\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - application info - ex: Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @param {string} instructions - Additional instructions for the run\r\n * @returns {*} - response from GPT(can be text, string, html etc...)\r\n * @notes - This function will run the assistant with the prompt and return the response from the assistant.\r\n */\r\n\r\nasync function runAssistant(prompt, gptControl, appEnv, instructions) {\r\n  let { openai, assistant, thread, specs } = gptControl;\r\n  let {functionList} = specs;\r\n\r\n  //add the user request to thread\r\n  let run = null;\r\n  let newMessage = null;\r\n  try {\r\n    newMessage = await openai.beta.threads.messages.create(thread.id, {\r\n      role: \"user\",\r\n      content: prompt,\r\n    });\r\n  } catch (error) {\r\n    console.log(`status = ${error.status}. Unable to add the prompt to the thread`);\r\n    console.log('will try to cancel the last run');\r\n    console.log(error);\r\n    if (error.status === 400 && assistant.metadata.lastRunId !== '0') {\r\n      try {\r\n        run = await openai.beta.threads.runs.cancel(thread.id, assistant.metadata.lastRunId);\r\n        assistant = await openai.beta.assistants.update(assistant.id, {\r\n          metadata: { thread_id: thread.id, lastRunId: run.id }})\r\n        gptControl.assistant = assistant;\r\n        console.log(\"Cancelled the last run\");\r\n      } catch (error) {\r\n        console.log('Unable to cancel the last run');\r\n        console.log(error);\r\n      }\r\n    } else {\r\n      await openai.beta.threads.del(thread.id);\r\n      thread = await openai.beta.threads.create({\r\n        metadata: { assistanceName: assistant.name, lastRunId: '0'},\r\n      });\r\n      gptControl.thread = thread;\r\n      console.log(\"Deleted old thread and created a new one\");\r\n      \r\n    }\r\n  }\r\n  newMessage = await openai.beta.threads.messages.create(thread.id, {\r\n    role: \"user\",\r\n    content: prompt,\r\n  });\r\n  // console.log(assistant.id);\r\n  // console.log(JSON.stringify(thread, null, 4));\r\n  let runArgs = {\r\n    assistant_id: assistant.id,\r\n    instructions: (instructions != null) ? instructions : ''\r\n  };\r\n\r\n  run = await openai.beta.threads.runs.create(thread.id, runArgs);\r\n\r\n  // Poll and wait for the run to complete\r\n  let runStatus = await pollRun(thread, run, gptControl);\r\n  \r\n  if (runStatus.status === \"completed\") {\r\n    \r\n    const message = await getLatestMessage  (openai, thread, 1);\r\n    return message; \r\n  } else if (runStatus.status === 'requires_action') {\r\n    let r = await required_action(\r\n      runStatus,\r\n      thread,\r\n      run,\r\n      gptControl,\r\n      appEnv\r\n    );\r\n    let message = await getLatestMessage  (openai, thread,1);\r\n    return message;\r\n  } else {\r\n    return { runStatus: runStatus.status };\r\n  }\r\n}\r\nexport default runAssistant;\r\n\r\n//https://platform.openai.com/docs/guides/text-generation/chat-completions-api\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description - Close Viya connections.\r\n * @function closeAssistant\r\n * @param {object} gptControl - gpt session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {boolean} - true\r\n */\r\nasync function closeAssistant(_gptControl, _appEnv) {\r\n  return true;\r\n}\r\nexport default closeAssistant;","/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\n/**\r\n * @async\r\n * @function setupAssist\r\n * @description   Setup the GPT Assistant\r\n * @param {string} provider - azure or openai\r\n * @param {string} assistanceName - name of the assistant(default is SAS_Assistant)\r\n * @returns {promise} - return {openai, assistant, thread, functionList}\r\n */\r\nimport OpenAI from 'openai';  \r\nimport  {OpenAIClient, OpenAIKeyCredential} from '@azure/openai'\r\n\r\nimport createAssistant from './createAssistant.js';\r\nimport openAssistant from './openAssistant.js';\r\n\r\nasync function setupAssistant(config) {\r\n\r\n  // azureai open includes url and key\r\n  // the azureai is not supported yet.\r\n  // openai includes key\r\n  let {provider, assistantName, credentials} = config;\r\n // let apiKey = (provider === 'openai') ? process.env.OPENAI_KEY : process.env.OPENAI_AZ_KEY;\r\n  let apiKey = (provider === 'openai') ? credentials.openaiKey : credentials.azureaiKey;\r\n  let endpoint = credentials.azureaiEndpoint;\r\n  let openai = (provider === 'openai') ? new OpenAI({ apiKey: apiKey }) : \r\n        new OpenAIClient(endpoint, new OpenAIKeyCredential(apiKey));\r\n\r\n // Wishlist: Wish could open with query of name and let it succeed or fail\r\n  const myAssistants = await openai.beta.assistants.list({\r\n    order: \"desc\",\r\n    limit: \"100\",\r\n  });\r\n  let assistant = myAssistants.data.find((a) => { \r\n    if (a.name === assistantName) {\r\n      return a;\r\n    }\r\n  });\r\n\r\n  // Either create a new assistant or reuse the existing one(preferred)\r\n  let gptControl = (assistant == null) \r\n                     ? await createAssistant(openai, config)\r\n                     : await openAssistant(openai, assistant, config);\r\n  return gptControl; \r\n\r\n  }\r\n  export default setupAssistant;","/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\n\r\nimport loadThread from \"./loadThread.js\";\r\n\r\n/**\r\n * @async\r\n * @function setupAssist\r\n * @description   Setup the GPT Assistant\r\n * @param {string} apiKey - openai api key\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return gptControl{openai, assistant, thread, threadid, functions specs}\r\n */\r\nasync function createAssistant(openai, config) {\r\nlet {assistantName, instructions, model, specs, reuseThread} = config;\r\nlet createArgs = {\r\n  name: assistantName,\r\n  instructions: instructions,\r\n  model: model, \r\n  metadata:{ thread_id: '0', lastRunId: '0'},\r\n};\r\nif (specs.tools !== null){\r\n  createArgs.tools = specs.tools;\r\n}\r\n\r\nlet assistant = await openai.beta.assistants.create(createArgs);\r\nconsole.log('-----------------------------------');\r\nconsole.log('New Assistant: ', assistantName , assistant.id);\r\nlet r = await loadThread(openai, config.threadid, assistant, reuseThread);\r\nconsole.log('Thread ID: ', r.thread.id);\r\nconsole.log('-----------------------------------');\r\n// assistant might have been updated in loadThread\r\nlet gptControl = {\r\n  openai,\r\n  assistant: r.assistant, \r\n  thread: r.thread,\r\n  threadid: r.thread.id,\r\n specs};\r\nreturn gptControl;\r\n}\r\nexport default createAssistant;","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function openAssistant\r\n * @description   Reuse existing assistant\r\n * @param {string} apiKey - openai api key\r\n * @param {string} assistant - assistant object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return {openai, assistant, thread, threadid, function specs}\r\n */\r\nimport loadThread from './loadThread.js'; \r\nasync function openAssistant(openai, assistant, config) {\r\n\r\n  let {reuseThread} = config;\r\n  console.log(\"Using Existing Assistant: \", assistant.name, assistant.id);\r\n  let thread_id = assistant.metadata.thread_id;\r\n\r\n  if (config.threadid !== '0') {\r\n    thread_id = config.threadid;\r\n  }\r\n\r\n  console.log(\"Associated thread_id: \", thread_id);\r\n\r\n  // load previous thread. loadThread will create a new thread if reuseThread is false\r\n  let r = await loadThread(openai, thread_id, assistant, reuseThread);\r\n  // assistant might have been updated in loadThread\r\n  let gptControl = {\r\n    openai: openai,\r\n    assistant: r.assistant,\r\n    thread: r.thread,\r\n    threadid: r.thread.id,\r\n    specs: config.specs\r\n  };\r\n  return gptControl;\r\n}\r\nexport default openAssistant;"],"names":["loadThread","openai","threadid","assistant","reuseThread","_temp5","_temp3","thread","_temp2","console","log","Promise","resolve","beta","threads","create","metadata","assistanceName","name","then","_openai$beta$threads$2","assistants","update","id","thread_id","lastRunId","_openai$beta$assistan","_temp4","_temp","body","recover","result","retrieve","_openai$beta$threads$","e","_catch","error","status","reject","getLatestMessage","limit","messages","list","content","data","type","value","_settle","pact","state","s","_Pact","o","bind","v","observer","pollRun","run","gptControl","newAssistant","runStatus","done","test","awaitBody","_isSettledPact","shouldContinue","_resumeAfterBody","_resumeAfterTest","_do","runs","setTimeout","prototype","onFulfilled","onRejected","this","callback","_this","thenable","_iteratorSymbol","Symbol","iterator","_gptControl","_appEnv","prompt","appEnv","instructions","role","_openai$beta$threads$4","assistant_id","_openai$beta$threads$5","submitToolOutputs","tool_outputs","toolsOutput","newRun","functionList","specs","target","check","step","_cycle","next","return","_fixup","TypeError","values","i","length","push","array","_forTo","_forOf","required_action","submit_tool_outputs","tool_calls","action","functionName","params","JSON","parse","arguments","response","tool_call_id","output","stringify","r","del","_openai$beta$threads$3","cancel","config","provider","assistantName","credentials","apiKey","openaiKey","azureaiKey","endpoint","azureaiEndpoint","OpenAI","OpenAIClient","OpenAIKeyCredential","order","myAssistants","find","a","createArgs","model","tools","createAssistant","openAssistant"],"mappings":"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"}