{"version":3,"file":"index.umd.js","sources":["../src/getLatestMessage.js","../src/pollRun.js","../src/required_action.js","../src/closeAssistant.js","../src/getMessages.js","../src/runAssistant.js","../src/setupAssistant.js","../src/createAssistant.js","../src/loadThread.js","../src/uploadFile.js"],"sourcesContent":["/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description Return the latest message from thread\r\n * @param {object}  gptControl- client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {promise} - messages - array of latest assistant messages[ {id, role, type, content}]\r\n * @notes - This function will return latest assistant messages based on limit\r\n */\r\nasync function getLatestMessage(gptControl, limit) {  \r\n  let {client, thread} = gptControl;\r\n  const messages = await client.beta.threads.messages.list(thread.id, {limit:limit});\r\n \r\n  let output = [];\r\n  let data = messages.data;\r\n  for (let i = 0; i < messages.data.length; i++){\r\n    let content = data[i].content[0];\r\n    if (data[i].role === 'assistant') {\r\n      output.push({id: data[i].id, role: data[i].role, type: content.type, content: content[content.type].value});\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  if (output.length > 1) {\r\n    output = output.reverse();\r\n  }\r\n  return output;\r\n\r\n}\r\nexport default getLatestMessage;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Poll run status since there is no streaming support\r\n * @function pollRun\r\n * @params {object} client - client object\r\n * @params {object} thread - thread object\r\n * @params {object} run - run object    \r\n * @params {object} gptControl - gpt  session control object\r\n * @returns {object} - runStatus from client.beta.threads.runs.retrieve\r\n * @notes - Will wait for completion(!(queued,in_progress, cancelling))\r\n */\r\nasync function pollRun(thread, run, gptControl) {\r\n  let { client} = gptControl;\r\n  let done = null;\r\n  let runStatus = null;\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  // Since there is no streaming support, sleep and poll the status\r\n  do {\r\n    debugger;\r\n    runStatus = await client.beta.threads.runs.retrieve(thread.id, run.id);\r\n    \r\n    console.log(\"-------------------\", runStatus.status);\r\n    if ( !(runStatus.status === \"queued\" ||runStatus.status === \"in_progress\" ||\r\n          runStatus.status === \"cancelling\")) {\r\n      debugger;\r\n      done = runStatus.status;\r\n    } else {\r\n      await sleep(2000);\r\n      console.log(\"waited 2000 ms\");\r\n    }\r\n  } while (done === null);\r\n\r\n  return runStatus;\r\n\r\n}\r\nexport default pollRun;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Handle required actions for Assistant\r\n * @function required_action\r\n * @param {object} runStatus - run status object\r\n * @param {object} thread - thread object\r\n * @param {object} run - run object\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {promise} - status from submitToolOutputs\r\n */\r\nimport pollRun from \"./pollRun.js\";\r\nasync function required_action(runStatus, thread, run,  gptControl, appEnv) {\r\n  let{client,specs} = gptControl;\r\n  let {functionList} = specs;\r\n  \r\n  // get the required actions from the run status\r\n  let requiredActions = runStatus.required_action.submit_tool_outputs.tool_calls;\r\n  \r\n  let toolsOutput = [];\r\n  for (let action of requiredActions) {\r\n    let functionName = action.function.name;\r\n    console.log('Requested function: ', functionName);\r\n    let params = JSON.parse(action.function.arguments);\r\n    debugger;\r\n    try {\r\n       let response = await functionList[functionName](params, appEnv, gptControl);\r\n        toolsOutput.push({\r\n          tool_call_id: action.id,\r\n          output: JSON.stringify(response),\r\n        });\r\n      }\r\n    catch(err){\r\n      toolsOutput.push({\r\n        tool_call_id: action.id,\r\n        output: JSON.stringify(err),\r\n      })\r\n    }\r\n }\r\n// submit the outputs to the thread\r\n console.log('Adding output to messages');\r\n let newRun = await client.beta.threads.runs.submitToolOutputs(\r\n  thread.id, run.id, { tool_outputs: toolsOutput });\r\n\r\n// wait for output to appear in the thread messages\r\n let outputStatus = await pollRun(thread, newRun, gptControl);\r\n\r\nreturn outputStatus;\r\n}\r\nexport default required_action;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description - Close Viya connections.\r\n * @function closeAssistant\r\n * @param {object} gptControl - gpt session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {boolean} - true\r\n */\r\nasync function closeAssistant(_gptControl, _appEnv) {\r\n  console.log('in closeAssistant');\r\n  return true;\r\n}\r\nexport default closeAssistant;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * \r\n * @description Return sepcified number of messages from thread\r\n * @param {object}  gptControl- client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {*} - messages - array of messages[ {id, role, type, content}]\r\n * @notes - This function will return the specified number of messages from the thread\r\n * Typically the top 2 will be the assistant message and user's prompt\r\n */\r\nasync function getMessages(gptControl, limit) {  \r\n  let {client, thread} = gptControl;\r\n  const messages = await client.beta.threads.messages.list(thread.id, {limit:limit});\r\n  //console.log('body', JSON.stringify(messages.body.data, null, 4));\r\n  let output = messages.data.map((m) => {\r\n    let content = m.content[0];\r\n    return {id: m.id, role: m.role, type: content.type, content: content[content.type].value};\r\n  });\r\n  return output;\r\n\r\n}\r\nexport default getMessages;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport getLatestMessage from \"./getLatestMessage.js\";\r\nimport required_action from \"./required_action.js\";\r\nimport pollRun from \"./pollRun.js\";\r\n\r\n/**\r\n * @async\r\n * @description - Run the latest prompt from the user\r\n * @function runAssistant\r\n *\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {string} prompt - user's prompt\r\n * @param {string} instructions - Additional instructions for the run\r\n * @param {object} appEnv - application info - ex: Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n \r\n * @returns {promise} - response from GPT(can be text, string, html etc...)\r\n * @notes - This function will run the assistant with the prompt and return the response from the assistant.\r\n * @example \r\n *  let response = await runAssistant(gptControl, prompt, promptInstructions,appEnv); \r\n*/\r\n\r\nasync function runAssistant(gptControl,prompt, instructions, appEnv) {\r\n  let { client, thread } = gptControl;\r\n\r\n  //add the user request to thread\r\n  try {\r\n    let _newMessage = await client.beta.threads.messages.create(thread.id, {\r\n      role: \"user\",\r\n      content: prompt,\r\n    });\r\n  } catch (error) {\r\n    debugger;\r\n    console.log(error);\r\n    throw new Error('Request failed on adding user message to thread.');\r\n  }\r\n  // now run the thread\r\n  // assume caller will catch any thrown errors\r\n  let r = await runPrompt(gptControl, appEnv, instructions);\r\n  return r;\r\n}\r\nasync function runPrompt(gptControl, appEnv, instructions) {\r\n  let { client, assistant, thread } = gptControl;\r\n  let runArgs = {\r\n    assistant_id: assistant.id,\r\n    instructions: instructions != null ? instructions : \"\",\r\n  };\r\n  // Run the assistant with the prompt and poll for completion\r\n  let run = await client.beta.threads.runs.create(thread.id, runArgs);\r\n  let runStatus = await pollRun(thread, run, gptControl);\r\n\r\n  //check for completion status\r\n  let message;\r\n  if (runStatus.status === \"completed\") {\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else if (runStatus.status === \"requires_action\") {\r\n    // make sure that required_action closes the thread run\r\n    let r = await required_action(runStatus, thread, run, gptControl, appEnv);\r\n    console.log('getting latest message ')\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else {\r\n    message = [{ runStatus: runStatus.status }];\r\n  }\r\n  return message;\r\n}\r\nexport default runAssistant;\r\n\r\n//https://platform.openai.com/docs/guides/text-generation/chat-completions-api\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function setupAssistant\r\n * @description   Setup the GPT Assistant\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return gptControl object}\r\n */\r\nimport OpenAI from 'openai';\r\nimport loadThread from './loadThread.js';\r\nimport createAssistant from './createAssistant.js';\r\n\r\nasync function setupAssistant(config) {\r\n  let {credentials } = config;\r\n  let {key} = credentials;\r\n  debugger;\r\n  let client = new OpenAI({ apiKey: key, dangerouslyAllowBrowser: true });\r\n  debugger;\r\n  let gptControl = {\r\n    provider: 'openai',\r\n    client: client,\r\n    assistant: null,\r\n    thread: null,\r\n    threadid: null,\r\n    specs: config.domainTools,\r\n    appEnv: null,\r\n    config: config, // save the config for runtime changes\r\n  };\r\n  // create assistant and thread\r\n  debugger;\r\n  gptControl.assistant = await createAssistant(client, config);\r\n  debugger;\r\n  gptControl.thread = await loadThread(client, config);\r\n  debugger;\r\n  gptControl.threadid = gptControl.thread.id;// just for convenience\r\n  return gptControl;\r\n}\r\nexport default setupAssistant;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @function createAssistant\r\n * @description   Create a new assistant\r\n * @param {string} client - client object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return assistant object\r\n */\r\nasync function createAssistant(client, config) {\r\n  let { assistantName, assistantid, instructions, model, domainTools } = config;\r\n\r\n  // create args for assistant create\r\n  let createArgs = {\r\n    name: assistantName,\r\n    instructions: instructions,\r\n    model: model,\r\n  };\r\n  if (domainTools.tools != null) {\r\n    createArgs.tools = domainTools.tools;\r\n  }\r\n\r\n  let assistant = null;\r\n  debugger;\r\n  console.log(assistantid);\r\n  let newAssistant = (assistantid === \"0\" || assistantid == null);\r\n  if (newAssistant == false){ \r\n    assistant = await client.beta.assistants.retrieve(assistantid);\r\n    debugger;\r\n  } else if (assistantName != null) {\r\n    // local rules: avoid creating a new assistant if one exists\r\n    // use name to find the assistant\r\n    // wish there was a way to filter on names in the API call\r\n    debugger;\r\n    const myAssistants = await client.beta.assistants.list({\r\n      order: \"desc\",\r\n      limit: \"100\", //ugh!\r\n    });\r\n    assistant = myAssistants.data.find((a) => {\r\n      if (a.name === assistantName) {\r\n        return a;\r\n      }\r\n    });\r\n    // if first time using this name, create the assistant\r\n    if (assistant == null) {\r\n      assistant = await client.beta.assistants.create(createArgs);\r\n    }\r\n  }\r\n  \r\n  debugger;\r\n  return assistant;\r\n}\r\nexport default createAssistant;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function loadThread\r\n * @description   new thread or open existing thread\r\n * @params {object} client - client object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return thread object\r\n */\r\nasync function loadThread(client, config) {\r\n  let {threadid} = config; \r\n  let thread = null;\r\n  // If we are reusing the thread, try to retrieve it\r\n  try {\r\n    thread = (threadid === '0') \r\n      ? await client.beta.threads.create({ metadata: { assistantName: assistant.name }})\r\n      : await client.beta.threads.retrieve(threadid);\r\n  } catch (error) {\r\n    console.log(error); \r\n    console.log(error.status);\r\n    throw new Error(`Error status ${error.status}. Unable to retrieve the thread ${threadid}. see console for details.`);\r\n  }\r\n  debugger;\r\n  return thread;\r\n}\r\nexport default loadThread;\r\n","\n/*\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nasync function uploadFile(fileHandle,purpose, gptControl) {\n  let { client, assistant } = gptControl;\n\n  // get fileid\n  const fileId = await client.files.create({\n    file: fileHandle,\n    purpose: purpose})\n  console.log('.......................', fileId); \n  \n  debugger;\n  let currentFileIds = [].concat(assistant.file_ids);\n  currentFileIds.push(fileId.id);\n  console.log(currentFileIds);\n  debugger;\n  try {\n    let newAssistant = await client.beta.assistants.update(assistant.id, \n      {\n      file_ids: currentFileIds\n      });\n    gptControl.assistant = newAssistant;\n    debugger;\n    console.log('.......................', newAssistant);\n  } catch (e) {\n    console.log(e);\n  }\n  return currentFileIds;\n}\nexport default uploadFile;"],"names":["getLatestMessage","gptControl","limit","Promise","resolve","client","beta","threads","messages","list","thread","id","then","output","data","i","length","content","role","push","type","value","reverse","e","reject","_settle","pact","state","s","_Pact","o","bind","v","observer","pollRun","run","done","runStatus","_temp2","body","test","awaitBody","result","_isSettledPact","shouldContinue","_resumeAfterBody","_resumeAfterTest","_do","runs","retrieve","_client$beta$threads$","console","log","status","_temp","setTimeout","prototype","onFulfilled","onRejected","this","callback","_this","thenable","_iteratorSymbol","Symbol","iterator","_gptControl","_appEnv","map","m","prompt","instructions","appEnv","_result","create","assistant_id","assistant","message","_temp4","_getLatestMessage","_temp5","_temp3","submitToolOutputs","tool_outputs","toolsOutput","newRun","functionList","specs","target","check","step","_cycle","next","_fixup","TypeError","values","array","_forTo","_forOf","required_action","submit_tool_outputs","tool_calls","action","functionName","name","params","JSON","parse","arguments","recover","response","tool_call_id","stringify","_catch","err","r","_getLatestMessage2","runPrompt","error","Error","config","OpenAI","apiKey","credentials","key","dangerouslyAllowBrowser","provider","threadid","domainTools","assistantName","assistantid","createArgs","model","tools","newAssistant","assistants","_client$beta$assistan","order","myAssistants","find","a","_client$beta$assistan2","createAssistant","_createAssistant","metadata","loadThread","_loadThread","fileHandle","purpose","files","file","fileId","currentFileIds","concat","file_ids","update"],"mappings":"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"}