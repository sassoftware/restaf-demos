{"version":3,"file":"index.umd.js","sources":["../src/getLatestMessage.js","../src/pollRun.js","../src/required_action.js","../src/closeAssistant.js","../src/getMessages.js","../src/runAssistant.js","../src/setupAssistant.js","../src/createAssistant.js","../src/loadThread.js"],"sourcesContent":["/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description Return the latest message from thread\r\n * @param {object}  gptControl- client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {promise} - messages - array of latest assistant messages[ {id, role, type, content}]\r\n * @notes - This function will return latest assistant messages based on limit\r\n */\r\nasync function getLatestMessage(gptControl, limit) {  \r\n  let {client, thread} = gptControl;\r\n  const messages = await client.beta.threads.messages.list(thread.id, {limit:limit});\r\n  //console.log('body', JSON.stringify(messages.body.data, null, 4));\r\n  let output = [];\r\n  let data = messages.data;\r\n  for (let i = 0; i < messages.data.length; i++){\r\n    let content = data[i].content[0];\r\n    if (data[i].role === 'assistant') {\r\n      output.push({id: data[i].id, role: data[i].role, type: content.type, content: content[content.type].value});\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  if (output.length > 1) {\r\n    output = output.reverse();\r\n  }\r\n  return output;\r\n\r\n}\r\nexport default getLatestMessage;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Poll run status since there is no streaming support\r\n * @function pollRun\r\n * @params {object} client - client object\r\n * @params {object} thread - thread object\r\n * @params {object} run - run object    \r\n * @params {object} gptControl - gpt  session control object\r\n * @returns {object} - runStatus from client.beta.threads.runs.retrieve\r\n * @notes - Will wait for completion(!(queued,in_progress, cancelling))\r\n */\r\nasync function pollRun(thread, run, gptControl) {\r\n  let { client} = gptControl;\r\n  let done = null;\r\n  let runStatus = null;\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  // Since there is no streaming support, sleep and poll the status\r\n  do {\r\n    debugger;\r\n    runStatus = await client.beta.threads.runs.retrieve(thread.id, run.id);\r\n    \r\n    console.log(\"-------------------\", runStatus.status);\r\n    if (\r\n      !(\r\n        runStatus.status === \"queued\" ||\r\n        runStatus.status === \"in_progress\" ||\r\n        runStatus.status === \"cancelling\"\r\n      )\r\n    ) {\r\n      debugger;\r\n      done = runStatus.status;\r\n    } else {\r\n      await sleep(2000);\r\n      console.log(\"waited 2000 ms\");\r\n    }\r\n  } while (done === null);\r\n\r\n  /*\r\n  let newAssistant = await client.beta.assistants.update(assistant.id, {\r\n    metadata: { thread_id: thread.id, lastRunId: run.id} \r\n  });\r\n  */\r\n  debugger;\r\n //  gptControl.assistant = newAssistant;\r\n  return runStatus;\r\n\r\n}\r\nexport default pollRun;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Handle required actions for Assistant\r\n * @function required_action\r\n * @param {object} runStatus - run status object\r\n * @param {object} thread - thread object\r\n * @param {object} run - run object\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {promise} - status from submitToolOutputs\r\n */\r\nimport pollRun from \"./pollRun.js\";\r\nasync function required_action(runStatus, thread, run,  gptControl, appEnv) {\r\n  let{client,specs} = gptControl;\r\n  let {functionList} = specs;\r\n  \r\n  // get the required actions from the run status\r\n  let requiredActions = runStatus.required_action.submit_tool_outputs.tool_calls;\r\n  \r\n  let toolsOutput = [];\r\n  for (let action of requiredActions) {\r\n    let functionName = action.function.name;\r\n    console.log('Requested function: ', functionName);\r\n    let params = JSON.parse(action.function.arguments);\r\n    debugger;\r\n    let response = await functionList[functionName](params, appEnv, gptControl);\r\n    debugger;\r\n    toolsOutput.push({\r\n      tool_call_id: action.id,\r\n      output: JSON.stringify(response),\r\n    });\r\n }\r\n// submit the outputs to the thread\r\n let newRun = await client.beta.threads.runs.submitToolOutputs(\r\n  thread.id, run.id, { tool_outputs: toolsOutput });\r\n\r\n// wait for output to appear in the thread messages\r\n let outputStatus = await pollRun(thread, newRun, gptControl);\r\n\r\nreturn outputStatus;\r\n}\r\nexport default required_action;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description - Close Viya connections.\r\n * @function closeAssistant\r\n * @param {object} gptControl - gpt session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {boolean} - true\r\n */\r\nasync function closeAssistant(_gptControl, _appEnv) {\r\n  console.log('in closeAssistant');\r\n  return true;\r\n}\r\nexport default closeAssistant;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * \r\n * @description Return sepcified number of messages from thread\r\n * @param {object}  gptControl- client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {*} - messages - array of messages[ {id, role, type, content}]\r\n * @notes - This function will return the specified number of messages from the thread\r\n * Typically the top 2 will be the assistant message and user's prompt\r\n */\r\nasync function getMessages(gptControl, limit) {  \r\n  let {client, thread} = gptControl;\r\n  const messages = await client.beta.threads.messages.list(thread.id, {limit:limit});\r\n  //console.log('body', JSON.stringify(messages.body.data, null, 4));\r\n  let output = messages.data.map((m) => {\r\n    let content = m.content[0];\r\n    return {id: m.id, role: m.role, type: content.type, content: content[content.type].value};\r\n  });\r\n  return output;\r\n\r\n}\r\nexport default getMessages;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport getLatestMessage from \"./getLatestMessage.js\";\r\nimport required_action from \"./required_action.js\";\r\nimport pollRun from \"./pollRun.js\";\r\n\r\n/**\r\n * @async\r\n * @description - Run the latest prompt from the user\r\n * @function runAssistant\r\n *\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {string} prompt - user's prompt\r\n * @param {string} instructions - Additional instructions for the run\r\n * @param {object} appEnv - application info - ex: Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n \r\n * @returns {promise} - response from GPT(can be text, string, html etc...)\r\n * @notes - This function will run the assistant with the prompt and return the response from the assistant.\r\n * @example \r\n *  let response = await runAssistant(gptControl, prompt, promptInstructions,appEnv); \r\n*/\r\n\r\nasync function runAssistant(gptControl,prompt, instructions, appEnv) {\r\n  let { client, assistant, thread, specs } = gptControl;\r\n  //add the user request to thread\r\n  try {\r\n    let _newMessage = await client.beta.threads.messages.create(thread.id, {\r\n      role: \"user\",\r\n      content: prompt,\r\n    });\r\n    let r = await runPrompt(gptControl, appEnv, instructions);\r\n    return r;\r\n  } catch (error) {\r\n    //tbd: recovery?\r\n    debugger;\r\n    console.log(\r\n      `status = ${error.status}. Unable to add the prompt to the thread`\r\n    );\r\n    console.log(error);\r\n    throw new Error('Unable to add the prompt to the thread. See console for more details');\r\n  }\r\n}\r\nasync function runPrompt(gptControl, appEnv, instructions) {\r\n  let { client, assistant, thread } = gptControl;\r\n  let runArgs = {\r\n    assistant_id: assistant.id,\r\n    instructions: instructions != null ? instructions : \"\",\r\n  };\r\n  // Run the assistant with the prompt and poll for completion\r\n  let run = await client.beta.threads.runs.create(thread.id, runArgs);\r\n  debugger;\r\n  let runStatus = await pollRun(thread, run, gptControl);\r\n\r\n  //check for completion status\r\n  let message;\r\n  if (runStatus.status === \"completed\") {\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else if (runStatus.status === \"requires_action\") {\r\n    let r = await required_action(runStatus, thread, run, gptControl, appEnv);\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else {\r\n    message = [{ runStatus: runStatus.status }];\r\n  }\r\n  return message;\r\n}\r\nexport default runAssistant;\r\n\r\n//https://platform.openai.com/docs/guides/text-generation/chat-completions-api\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function setupAssistant\r\n * @description   Setup the GPT Assistant\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return gptControl object}\r\n */\r\nimport OpenAI from 'openai';\r\nimport { OpenAIClient, OpenAIKeyCredential } from '@azure/openai';\r\nimport loadThread from './loadThread.js';\r\nimport createAssistant from './createAssistant.js';\r\n\r\nasync function setupAssistant(config) {\r\n  let { provider, credentials } = config;\r\n  let {openaiKey, azureaiKey, azureaiEndpoint} = credentials;\r\n  // let apiKey = (provider === 'openai') ? process.env.OPENAI_KEY : process.env.OPENAI_AZ_KEY;\r\n\r\n  //\r\n  debugger;\r\n  let client = null;\r\n  if (provider === 'openai') {\r\n    if (openaiKey == null) {\r\n      throw new Error('Missing OpenAI API Key');\r\n    }\r\n    client = new OpenAI({ apiKey: openaiKey, dangerouslyAllowBrowser: true });\r\n\r\n  } else if (provider === 'azureai') {\r\n    if (azureaiKey == null) {\r\n      throw new Error('Missing Azure API Key');\r\n    }\r\n    if (azureaiEndpoint == null) {\r\n      throw new Error('Missing Azure Endpoint');\r\n    }\r\n    client = new OpenAIClient(endpoint, new OpenAIKeyCredential(azureaiKey));\r\n  } else {\r\n    throw new Error('Invalid provider. Must be openai or azureai.');\r\n  }\r\n\r\n  debugger;\r\n  let gptControl = {\r\n    client: client,\r\n    assistant: null,\r\n    thread: null,\r\n    threadid: null,\r\n    specs: config.domainTools,\r\n    appEnv: null,\r\n    config: config, // save the config for runtime changes\r\n  };\r\n  // create assistant and thread\r\n  debugger;\r\n  gptControl.assistant = await createAssistant(client, config);\r\n  debugger;\r\n  gptControl.thread = await loadThread(client, config);\r\n  debugger;\r\n  gptControl.threadid = gptControl.thread.id;// just for convenience\r\n  return gptControl;\r\n}\r\nexport default setupAssistant;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @function createAssistant\r\n * @description   Create a new assistant\r\n * @param {string} client - client object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return assistant object\r\n */\r\nasync function createAssistant(client, config) {\r\n  let { assistantName, assistantid, instructions, model, domainTools } = config;\r\n\r\n  // create args for assistant create\r\n  let createArgs = {\r\n    name: assistantName,\r\n    instructions: instructions,\r\n    model: model,\r\n  };\r\n  if (domainTools.tools != null) {\r\n    createArgs.tools = domainTools.tools;\r\n  }\r\n\r\n  let assistant = null;\r\n  debugger;\r\n  console.log(assistantid);\r\n  if (assistantid !== \"0\") {\r\n    debugger;\r\n    assistant = await client.beta.assistants.retrieve(assistantid);\r\n    debugger;\r\n  } else {\r\n    // local rules: avoid creating a new assistant if one exists\r\n    // use name to find the assistant\r\n    // wish there was a way to filter on names in the API call\r\n    debugger;\r\n    const myAssistants = await client.beta.assistants.list({\r\n      order: \"desc\",\r\n      limit: \"100\", //ugh!\r\n    });\r\n    assistant = myAssistants.data.find((a) => {\r\n      if (a.name === assistantName) {\r\n        return a;\r\n      }\r\n    });\r\n    // if first time using this name, create the assistant\r\n    if (assistant == null) {\r\n      assistant = await client.beta.assistants.create(createArgs);\r\n    }\r\n  }\r\n  \r\n  debugger;\r\n  return assistant;\r\n}\r\nexport default createAssistant;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function loadThread\r\n * @description   new thread or open existing thread\r\n * @params {object} client - client object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return thread object\r\n */\r\nasync function loadThread(client, config) {\r\n  let {threadid} = config; \r\n  let thread = null;\r\n  // If we are reusing the thread, try to retrieve it\r\n  try {\r\n    thread = (threadid === '0') \r\n      ? await client.beta.threads.create({ metadata: { assistantName: assistant.name }})\r\n      : await client.beta.threads.retrieve(threadid);\r\n  } catch (error) {\r\n    console.log(error); \r\n    console.log(error.status);\r\n    throw new Error(`Error status ${error.status}. Unable to retrieve the thread ${threadid}. see console for details.`);\r\n  }\r\n  debugger;\r\n  return thread;\r\n}\r\nexport default loadThread;\r\n"],"names":["getLatestMessage","gptControl","limit","Promise","resolve","client","beta","threads","messages","list","thread","id","then","output","data","i","length","content","role","push","type","value","reverse","e","reject","_settle","pact","state","s","_Pact","o","bind","v","observer","pollRun","run","_temp3","runStatus","done","_temp2","body","test","awaitBody","result","_isSettledPact","shouldContinue","_resumeAfterBody","_resumeAfterTest","_do","runs","retrieve","_client$beta$threads$","console","log","status","_temp","setTimeout","prototype","onFulfilled","onRejected","this","callback","_this","thenable","_iteratorSymbol","Symbol","iterator","_gptControl","_appEnv","map","m","prompt","instructions","appEnv","recover","create","_newMessage","assistant_id","assistant","message","_getLatestMessage","submitToolOutputs","tool_outputs","toolsOutput","newRun","functionList","specs","target","check","step","_cycle","next","return","_fixup","TypeError","values","array","_forTo","_forOf","required_action","submit_tool_outputs","tool_calls","action","functionName","name","params","JSON","parse","arguments","response","tool_call_id","stringify","r","_getLatestMessage2","runPrompt","_catch","error","Error","config","provider","credentials","openaiKey","azureaiKey","azureaiEndpoint","OpenAI","apiKey","dangerouslyAllowBrowser","OpenAIClient","endpoint","OpenAIKeyCredential","threadid","domainTools","assistantName","assistantid","createArgs","model","tools","assistants","_client$beta$assistan","order","myAssistants","find","a","_client$beta$assistan2","createAssistant","_createAssistant","_result","metadata","loadThread","_loadThread"],"mappings":"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"}