{"version":3,"file":"index.module.js","sources":["../src/loadThread.js","../src/setupAssistant.js","../src/createAssistant.js","../src/openAssistant.js","../src/getLatestMessage.js","../src/pollRun.js","../src/required_action.js","../src/runAssistant.js","../src/closeAssistant.js","../src/getMessages.js"],"sourcesContent":["/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function loadThread\r\n * @description   reattach thread from previous session\r\n * @param {string} apiKey - openai api key\r\n * @param {string} threadid - thread id\r\n * @param {string} assistant - assistant object\r\n * @returns {promise} - return {thread, assistant}\r\n */\r\nasync function loadThread(openai, threadid, assistant, reuseThread) {\r\n // let thread_id = assistant.metadata.thread_id;\r\n\r\n  let thread = null;\r\n  // If we are reusing the thread, try to retrieve it\r\n  if (reuseThread === true && threadid != '0') {\r\n    try {\r\n      thread = await openai.beta.threads.retrieve(threadid);\r\n    } catch (error) {\r\n      console.log(error); \r\n      console.log(error.status);\r\n      console.log(`Error status ${error.status}. Unable to retrieve the thread ${thread_id}`);\r\n    }\r\n  }\r\n\r\n  // If still no thread, create a new one\r\n  if (thread == null) {\r\n    console.log('Creating new thread' );\r\n    thread = await openai.beta.threads.create({\r\n      metadata: { assistanceName: assistant.name },\r\n    });\r\n    // update assistant metadata\r\n    assistant = await openai.beta.assistants.update(assistant.id, {\r\n      metadata: { thread_id: thread.id, lastRunId: \"0\" },\r\n    });\r\n  }\r\n\r\n  return { thread, assistant };\r\n}\r\nexport default loadThread;\r\n","/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\n/**\r\n * @async\r\n * @function setupAssist\r\n * @description   Setup the GPT Assistant\r\n * @param {string} provider - azure or openai\r\n * @param {string} assistanceName - name of the assistant(default is SAS_Assistant)\r\n * @returns {promise} - return {openai, assistant, thread, functionList}\r\n */\r\nimport OpenAI from 'openai';  \r\nimport  {OpenAIClient, OpenAIKeyCredential} from '@azure/openai'\r\n\r\nimport createAssistant from './createAssistant.js';\r\nimport openAssistant from './openAssistant.js';\r\n\r\nasync function setupAssistant(config) {\r\n\r\n  // azureai open includes url and key\r\n  // the azureai is not supported yet.\r\n  // openai includes key\r\n  let {provider, assistantName, credentials} = config;\r\n // let apiKey = (provider === 'openai') ? process.env.OPENAI_KEY : process.env.OPENAI_AZ_KEY;\r\n  let apiKey = (provider === 'openai') ? credentials.openaiKey : credentials.azureaiKey;\r\n  let endpoint = credentials.azureaiEndpoint;\r\n  console.log(apiKey);\r\n  let openai = (provider === 'openai') ? new OpenAI({ apiKey: apiKey,  dangerouslyAllowBrowser: true }) : \r\n        new OpenAIClient(endpoint, new OpenAIKeyCredential(apiKey));\r\n\r\n // Wishlist: Wish could open with query of name and let it succeed or fail\r\n  const myAssistants = await openai.beta.assistants.list({\r\n    order: \"desc\",\r\n    limit: \"100\",\r\n  });\r\n  let assistant = myAssistants.data.find((a) => { \r\n    if (a.name === assistantName) {\r\n      return a;\r\n    }\r\n  });\r\n\r\n  // Either create a new assistant or reuse the existing one(preferred)\r\n  let gptControl = (assistant == null) \r\n                     ? await createAssistant(openai, config)\r\n                     : await openAssistant(openai, assistant, config);\r\n  return gptControl; \r\n\r\n  }\r\n  export default setupAssistant;","/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\n\r\nimport loadThread from \"./loadThread.js\";\r\n\r\n/**\r\n * @async\r\n * @function setupAssist\r\n * @description   Setup the GPT Assistant\r\n * @param {string} apiKey - openai api key\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return gptControl{openai, assistant, thread, threadid, functions specs}\r\n */\r\nasync function createAssistant(openai, config) {\r\nlet {assistantName, instructions, model, specs, reuseThread} = config;\r\nlet createArgs = {\r\n  name: assistantName,\r\n  instructions: instructions,\r\n  model: model, \r\n  metadata:{ thread_id: '0', lastRunId: '0'},\r\n};\r\nif (specs.tools != null ){\r\n  createArgs.tools = specs.tools;\r\n}\r\n\r\nlet assistant = await openai.beta.assistants.create(createArgs);\r\nconsole.log('-----------------------------------');\r\nconsole.log('New Assistant: ', assistantName , assistant.id);\r\nlet r = await loadThread(openai, config.threadid, assistant, reuseThread);\r\nconsole.log('Thread ID: ', r.thread.id);\r\nconsole.log('-----------------------------------');\r\n// assistant might have been updated in loadThread\r\nlet gptControl = {\r\n  openai,\r\n  assistant: r.assistant, \r\n  thread: r.thread,\r\n  threadid: r.thread.id,\r\n specs};\r\nreturn gptControl;\r\n}\r\nexport default createAssistant;","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function openAssistant\r\n * @description   Reuse existing assistant\r\n * @param {string} apiKey - openai api key\r\n * @param {string} assistant - assistant object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return {openai, assistant, thread, threadid, function specs}\r\n */\r\nimport loadThread from './loadThread.js'; \r\nasync function openAssistant(openai, assistant, config) {\r\n\r\n  let {reuseThread} = config;\r\n  console.log(\"Using Existing Assistant: \", assistant.name, assistant.id);\r\n  let thread_id = assistant.metadata.thread_id;\r\n\r\n  if (config.threadid !== '0') {\r\n    thread_id = config.threadid;\r\n  }\r\n\r\n  console.log(\"Associated thread_id: \", thread_id);\r\n\r\n  // load previous thread. loadThread will create a new thread if reuseThread is false\r\n  let r = await loadThread(openai, thread_id, assistant, reuseThread);\r\n  // assistant might have been updated in loadThread\r\n  let gptControl = {\r\n    openai: openai,\r\n    assistant: r.assistant,\r\n    thread: r.thread,\r\n    threadid: r.thread.id,\r\n    specs: config.specs\r\n  };\r\n  return gptControl;\r\n}\r\nexport default openAssistant;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * \r\n * @description Return the latest message from thread\r\n * @param {object}  gptControl- openai control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {array} - messages - array of latest assistant messages[ {id, role, type, content}]\r\n * @notes - This function will return latest assistant messages based on limit\r\n */\r\nasync function getLatestMessage(gptControl, limit) {  \r\n  let {openai, thread} = gptControl;\r\n  const messages = await openai.beta.threads.messages.list(thread.id, {limit:limit});\r\n  //console.log('body', JSON.stringify(messages.body.data, null, 4));\r\n  let output = [];\r\n  let data = messages.data;\r\n  for (let i = 0; i < messages.data.length; i++){\r\n    let content = data[i].content[0];\r\n  \r\n    if (data[i].role === 'assistant') {\r\n      output.push({id: data[i].id, role: data[i].role, type: content.type, content: content[content.type].value});\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  if (output.length > 1) {\r\n    output = output.reverse();\r\n  }\r\n  return output;\r\n\r\n}\r\nexport default getLatestMessage;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Poll run status since there is no streaming support\r\n * @function pollRun\r\n * @params {object} openai - openai object\r\n * @params {object} thread - thread object\r\n * @params {object} run - run object    \r\n * @params {object} gptControl - gpt  session control object\r\n * @returns {object} - runStatus from openai.beta.threads.runs.retrieve\r\n * @notes - Will wait for completion(!(queued,in_progress, cancelling))\r\n */\r\nasync function pollRun(thread, run, gptControl) {\r\n  let { openai, assistant} = gptControl;\r\n  let done = null;\r\n  let runStatus = null;\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  // Since there is no streaming support, sleep and poll the status\r\n  do {\r\n    \r\n    runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);\r\n    \r\n    console.log(\"-------------------\", runStatus.status);\r\n    if (\r\n      !(\r\n        runStatus.status === \"queued\" ||\r\n        runStatus.status === \"in_progress\" ||\r\n        runStatus.status === \"cancelling\"\r\n      )\r\n    ) {\r\n      done = runStatus.status;\r\n    } else {\r\n      await sleep(2000);\r\n      // console.log(\"waited 2000 ms\");\r\n    }\r\n  } while (done === null);\r\n\r\n  let newAssistant = await openai.beta.assistants.update(assistant.id, {\r\n    metadata: { thread_id: thread.id, lastRunId: run.id} \r\n  });\r\n  gptControl.assistant = newAssistant;\r\n  return runStatus;\r\n\r\n}\r\nexport default pollRun;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Handle required actions for Assistant\r\n * @function required_action\r\n * @param {object} runStatus - run status object\r\n * @param {object} thread - thread object\r\n * @param {object} run - run object\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {*} - status from submitToolOutputs\r\n */\r\nimport pollRun from \"./pollRun.js\";\r\nasync function required_action(runStatus, thread, run,  gptControl, appEnv) {\r\n  let{openai,specs} = gptControl;\r\n  let {functionList} = specs;\r\n  \r\n  let requiredActions = runStatus.required_action.submit_tool_outputs.tool_calls;\r\n  \r\n  let toolsOutput = [];\r\n  for (let action of requiredActions) {\r\n    let functionName = action.function.name;\r\n    console.log('Requested function: ', functionName);\r\n    let params = JSON.parse(action.function.arguments);\r\n    let response = await functionList[functionName](params, appEnv, gptControl);\r\n\r\n    toolsOutput.push({\r\n      tool_call_id: action.id,\r\n      output: JSON.stringify(response),\r\n    });\r\n }\r\n// submit the outputs to the thread\r\n let newRun = await openai.beta.threads.runs.submitToolOutputs(\r\n  thread.id, run.id, { tool_outputs: toolsOutput });\r\n\r\n// wait for output to appear in the thread messages\r\n let outputStatus = await pollRun(thread, newRun, gptControl);\r\n\r\nreturn outputStatus;\r\n}\r\nexport default required_action;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport getLatestMessage from \"./getLatestMessage.js\";\r\nimport required_action from \"./required_action.js\";\r\nimport pollRun from \"./pollRun.js\";\r\n\r\n/**\r\n * @async\r\n * @description - Run the latest prompt from the user\r\n * @function runAssistant\r\n * @param {string} prompt - User prompt\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - application info - ex: Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @param {string} instructions - Additional instructions for the run\r\n * @returns {*} - response from GPT(can be text, string, html etc...)\r\n * @notes - This function will run the assistant with the prompt and return the response from the assistant.\r\n */\r\n\r\nasync function runAssistant(prompt, gptControl, appEnv, instructions) {\r\n  let { openai, assistant, thread, specs } = gptControl;\r\n//  let {functionList} = specs;\r\n\r\n  //add the user request to thread\r\n  let run = null;\r\n  let newMessage = null;\r\n  try {\r\n    newMessage = await openai.beta.threads.messages.create(thread.id, {\r\n      role: \"user\",\r\n      content: prompt,\r\n    });\r\n  } catch (error) {\r\n    //tbd: recovery?\r\n    console.log(`status = ${error.status}. Unable to add the prompt to the thread`);\r\n    console.log('will try to cancel the last run');\r\n    return {status: error.status, message: error};\r\n  }\r\n  \r\n  let runArgs = {\r\n    assistant_id: assistant.id,\r\n    instructions: (instructions != null) ? instructions : ''\r\n  };\r\n\r\n  run = await openai.beta.threads.runs.create(thread.id, runArgs);\r\n\r\n  // Poll and wait for the run to complete\r\n  let runStatus = await pollRun(thread, run, gptControl);\r\n  \r\n  if (runStatus.status === \"completed\") {\r\n    \r\n    const message = await getLatestMessage (gptControl, 1); \r\n    return message;\r\n  } else if (runStatus.status === 'requires_action') {\r\n    let r = await required_action(\r\n      runStatus,\r\n      thread,\r\n      run,\r\n      gptControl,\r\n      appEnv\r\n    );\r\n    let message = await getLatestMessage(gptControl, 5);\r\n    return message;\r\n  } else {\r\n    return { runStatus: runStatus.status };\r\n  }\r\n}\r\nexport default runAssistant;\r\n\r\n//https://platform.openai.com/docs/guides/text-generation/chat-completions-api\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description - Close Viya connections.\r\n * @function closeAssistant\r\n * @param {object} gptControl - gpt session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {boolean} - true\r\n */\r\nasync function closeAssistant(_gptControl, _appEnv) {\r\n  console.log('in closeAssistant');\r\n  return true;\r\n}\r\nexport default closeAssistant;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * \r\n * @description Return sepcified number of messages from thread\r\n * @param {object}  gptControl- openai control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {*} - messages - array of messages[ {id, role, type, content}]\r\n * @notes - This function will return the specified number of messages from the thread\r\n * Typically the top 2 will be the assistant message and user's prompt\r\n */\r\nasync function getMessages(gptControl, limit) {  \r\n  let {openai, thread} = gptControl;\r\n  const messages = await openai.beta.threads.messages.list(thread.id, {limit:limit});\r\n  //console.log('body', JSON.stringify(messages.body.data, null, 4));\r\n  let output = messages.data.map((m) => {\r\n    let content = m.content[0];\r\n    return {id: m.id, role: m.role, type: content.type, content: content[content.type].value};\r\n  });\r\n  return output;\r\n\r\n}\r\nexport default getMessages;"],"names":["loadThread","openai","threadid","assistant","reuseThread","_temp5","_temp3","thread","_temp2","console","log","Promise","resolve","beta","threads","create","metadata","assistanceName","name","then","_openai$beta$threads$2","assistants","update","id","thread_id","lastRunId","_openai$beta$assistan","_temp4","_temp","body","recover","result","retrieve","_openai$beta$threads$","e","_catch","error","status","reject","setupAssistant","config","provider","assistantName","credentials","apiKey","openaiKey","azureaiKey","endpoint","azureaiEndpoint","OpenAI","dangerouslyAllowBrowser","OpenAIClient","OpenAIKeyCredential","list","order","limit","myAssistants","data","find","a","specs","createArgs","instructions","model","tools","r","createAssistant","openAssistant","getLatestMessage","gptControl","messages","output","i","length","content","role","push","type","value","reverse","_settle","pact","state","s","_Pact","o","bind","v","observer","pollRun","run","newAssistant","runStatus","done","test","awaitBody","_isSettledPact","shouldContinue","_resumeAfterBody","_resumeAfterTest","_do","runs","setTimeout","prototype","onFulfilled","onRejected","this","callback","_this","thenable","_iteratorSymbol","Symbol","iterator","runAssistant","prompt","appEnv","_exit","_result","assistant_id","submitToolOutputs","tool_outputs","toolsOutput","newRun","functionList","target","check","step","_cycle","next","return","_fixup","TypeError","values","array","_forTo","_forOf","required_action","submit_tool_outputs","tool_calls","action","functionName","params","JSON","parse","arguments","response","tool_call_id","stringify","message","closeAssistant","_gptControl","_appEnv","getMessages","map","m"],"mappings":"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"}