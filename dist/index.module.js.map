{"version":3,"file":"index.module.js","sources":["../src/loadThread.js","../src/setupAssistant.js","../src/createAssistant.js","../src/openAssistant.js","../src/getLatesMessage.js","../src/pollRun.js","../src/required_action.js","../src/runAssistant.js","../src/closeAssistant.js","../src/getMessages.js"],"sourcesContent":["/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function loadThread\r\n * @description   reattach thread from previous session\r\n * @param {string} apiKey - openai api key\r\n * @param {string} threadid - thread id\r\n * @param {string} assistant - assistant object\r\n * @returns {promise} - return {thread, assistant}\r\n */\r\nasync function loadThread(openai, threadid, assistant, reuseThread) {\r\n // let thread_id = assistant.metadata.thread_id;\r\n\r\n  let thread = null;\r\n  // If we are reusing the thread, try to retrieve it\r\n  if (reuseThread === true && threadid != '0') {\r\n    try {\r\n      thread = await openai.beta.threads.retrieve(threadid);\r\n    } catch (error) {\r\n      console.log(error); \r\n      console.log(error.status);\r\n      console.log(`Error status ${error.status}. Unable to retrieve the thread ${thread_id}`);\r\n    }\r\n  }\r\n\r\n  // If still no thread, create a new one\r\n  if (thread == null) {\r\n    console.log('Creating new thread' );\r\n    thread = await openai.beta.threads.create({\r\n      metadata: { assistanceName: assistant.name },\r\n    });\r\n    // update assistant metadata\r\n    assistant = await openai.beta.assistants.update(assistant.id, {\r\n      metadata: { thread_id: thread.id, lastRunId: \"0\" },\r\n    });\r\n  }\r\n\r\n  return { thread, assistant };\r\n}\r\nexport default loadThread;\r\n","/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\n/**\r\n * @async\r\n * @function setupAssist\r\n * @description   Setup the GPT Assistant\r\n * @param {string} provider - azure or openai\r\n * @param {string} assistanceName - name of the assistant(default is SAS_Assistant)\r\n * @returns {promise} - return {openai, assistant, thread, functionList}\r\n */\r\nimport OpenAI from 'openai';  \r\nimport  {OpenAIClient, OpenAIKeyCredential} from '@azure/openai'\r\n\r\nimport createAssistant from './createAssistant.js';\r\nimport openAssistant from './openAssistant.js';\r\n\r\nasync function setupAssistant(config) {\r\n\r\n  // azureai open includes url and key\r\n  // the azureai is not supported yet.\r\n  // openai includes key\r\n  let {provider, assistantName, credentials} = config;\r\n // let apiKey = (provider === 'openai') ? process.env.OPENAI_KEY : process.env.OPENAI_AZ_KEY;\r\n  let apiKey = (provider === 'openai') ? credentials.openaiKey : credentials.azureaiKey;\r\n  let endpoint = credentials.azureaiEndpoint;\r\n  console.log(apiKey);\r\n  let openai = (provider === 'openai') ? new OpenAI({ apiKey: apiKey,  dangerouslyAllowBrowser: true }) : \r\n        new OpenAIClient(endpoint, new OpenAIKeyCredential(apiKey));\r\n\r\n // Wishlist: Wish could open with query of name and let it succeed or fail\r\n  const myAssistants = await openai.beta.assistants.list({\r\n    order: \"desc\",\r\n    limit: \"100\",\r\n  });\r\n  let assistant = myAssistants.data.find((a) => { \r\n    if (a.name === assistantName) {\r\n      return a;\r\n    }\r\n  });\r\n\r\n  // Either create a new assistant or reuse the existing one(preferred)\r\n  let gptControl = (assistant == null) \r\n                     ? await createAssistant(openai, config)\r\n                     : await openAssistant(openai, assistant, config);\r\n  return gptControl; \r\n\r\n  }\r\n  export default setupAssistant;","/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\n\r\nimport loadThread from \"./loadThread.js\";\r\n\r\n/**\r\n * @async\r\n * @function setupAssist\r\n * @description   Setup the GPT Assistant\r\n * @param {string} apiKey - openai api key\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return gptControl{openai, assistant, thread, threadid, functions specs}\r\n */\r\nasync function createAssistant(openai, config) {\r\nlet {assistantName, instructions, model, specs, reuseThread} = config;\r\nlet createArgs = {\r\n  name: assistantName,\r\n  instructions: instructions,\r\n  model: model, \r\n  metadata:{ thread_id: '0', lastRunId: '0'},\r\n};\r\nif (specs.tools != null ){\r\n  createArgs.tools = specs.tools;\r\n}\r\n\r\nlet assistant = await openai.beta.assistants.create(createArgs);\r\nconsole.log('-----------------------------------');\r\nconsole.log('New Assistant: ', assistantName , assistant.id);\r\nlet r = await loadThread(openai, config.threadid, assistant, reuseThread);\r\nconsole.log('Thread ID: ', r.thread.id);\r\nconsole.log('-----------------------------------');\r\n// assistant might have been updated in loadThread\r\nlet gptControl = {\r\n  openai,\r\n  assistant: r.assistant, \r\n  thread: r.thread,\r\n  threadid: r.thread.id,\r\n specs};\r\nreturn gptControl;\r\n}\r\nexport default createAssistant;","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function openAssistant\r\n * @description   Reuse existing assistant\r\n * @param {string} apiKey - openai api key\r\n * @param {string} assistant - assistant object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return {openai, assistant, thread, threadid, function specs}\r\n */\r\nimport loadThread from './loadThread.js'; \r\nasync function openAssistant(openai, assistant, config) {\r\n\r\n  let {reuseThread} = config;\r\n  console.log(\"Using Existing Assistant: \", assistant.name, assistant.id);\r\n  let thread_id = assistant.metadata.thread_id;\r\n\r\n  if (config.threadid !== '0') {\r\n    thread_id = config.threadid;\r\n  }\r\n\r\n  console.log(\"Associated thread_id: \", thread_id);\r\n\r\n  // load previous thread. loadThread will create a new thread if reuseThread is false\r\n  let r = await loadThread(openai, thread_id, assistant, reuseThread);\r\n  // assistant might have been updated in loadThread\r\n  let gptControl = {\r\n    openai: openai,\r\n    assistant: r.assistant,\r\n    thread: r.thread,\r\n    threadid: r.thread.id,\r\n    specs: config.specs\r\n  };\r\n  return gptControl;\r\n}\r\nexport default openAssistant;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * \r\n * @description Return the latest message from thread\r\n * @param {object}  openai - openai object\r\n * @param {object} thread - active thread\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {*} - message\r\n */\r\nasync function getLatestMessage(openai,thread, limit) {  \r\n  const messages = await openai.beta.threads.messages.list(thread.id, {limit:limit});\r\n  \r\n  let content = messages.data[0].content[0];\r\n  let message = content[content.type].value;\r\n  return message\r\n\r\n}\r\nexport default getLatestMessage;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Poll run status since there is no streaming support\r\n * @function pollRun\r\n * @params {object} openai - openai object\r\n * @params {object} thread - thread object\r\n * @params {object} run - run object    \r\n * @params {object} gptControl - gpt  session control object\r\n * @returns {object} - runStatus from openai.beta.threads.runs.retrieve\r\n * @notes - Will wait for completion(!(queued,in_progress, cancelling))\r\n */\r\nasync function pollRun(thread, run, gptControl) {\r\n  let { openai, assistant} = gptControl;\r\n  let done = null;\r\n  let runStatus = null;\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  // Since there is no streaming support, sleep and poll the status\r\n  do {\r\n    \r\n    runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);\r\n    \r\n    console.log(\"-------------------\", runStatus.status);\r\n    if (\r\n      !(\r\n        runStatus.status === \"queued\" ||\r\n        runStatus.status === \"in_progress\" ||\r\n        runStatus.status === \"cancelling\"\r\n      )\r\n    ) {\r\n      done = runStatus.status;\r\n    } else {\r\n      await sleep(2000);\r\n      // console.log(\"waited 2000 ms\");\r\n    }\r\n  } while (done === null);\r\n\r\n  let newAssistant = await openai.beta.assistants.update(assistant.id, {\r\n    metadata: { thread_id: thread.id, lastRunId: run.id} \r\n  });\r\n  gptControl.assistant = newAssistant;\r\n  return runStatus;\r\n\r\n}\r\nexport default pollRun;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Handle required actions for Assistant\r\n * @function required_action\r\n * @param {object} runStatus - run status object\r\n * @param {object} thread - thread object\r\n * @param {object} run - run object\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {*} - status from submitToolOutputs\r\n */\r\nimport pollRun from \"./pollRun.js\";\r\nasync function required_action(runStatus, thread, run,  gptControl, appEnv) {\r\n  let{openai,specs} = gptControl;\r\n  let {functionList} = specs;\r\n  \r\n  let requiredActions = runStatus.required_action.submit_tool_outputs.tool_calls;\r\n  \r\n  let toolsOutput = [];\r\n  for (let action of requiredActions) {\r\n    let functionName = action.function.name;\r\n    console.log('Requested function: ', functionName);\r\n    let params = JSON.parse(action.function.arguments);\r\n    let response = await functionList[functionName](params, appEnv, gptControl);\r\n\r\n    toolsOutput.push({\r\n      tool_call_id: action.id,\r\n      output: JSON.stringify(response),\r\n    });\r\n }\r\n// submit the outputs to the thread\r\n let newRun = await openai.beta.threads.runs.submitToolOutputs(\r\n  thread.id, run.id, { tool_outputs: toolsOutput });\r\n\r\n// wait for output to appear in the thread messages\r\n let outputStatus = await pollRun(thread, newRun, gptControl);\r\n\r\nreturn outputStatus;\r\n}\r\nexport default required_action;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport getLatestMessage from \"./getLatesMessage.js\";\r\nimport required_action from \"./required_action.js\";\r\nimport pollRun from \"./pollRun.js\";\r\n\r\n/**\r\n * @async\r\n * @description - Run the latest prompt from the user\r\n * @function runAssistant\r\n * @param {string} prompt - User prompt\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - application info - ex: Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @param {string} instructions - Additional instructions for the run\r\n * @returns {*} - response from GPT(can be text, string, html etc...)\r\n * @notes - This function will run the assistant with the prompt and return the response from the assistant.\r\n */\r\n\r\nasync function runAssistant(prompt, gptControl, appEnv, instructions) {\r\n  let { openai, assistant, thread, specs } = gptControl;\r\n  let {functionList} = specs;\r\n\r\n  //add the user request to thread\r\n  let run = null;\r\n  let newMessage = null;\r\n  try {\r\n    newMessage = await openai.beta.threads.messages.create(thread.id, {\r\n      role: \"user\",\r\n      content: prompt,\r\n    });\r\n  } catch (error) {\r\n    //tbd: recovery?\r\n    console.log(`status = ${error.status}. Unable to add the prompt to the thread`);\r\n    console.log('will try to cancel the last run');\r\n    return {status: error.status, message: error};\r\n  }\r\n  \r\n  // console.log(assistant.id);\r\n  // console.log(JSON.stringify(thread, null, 4));\r\n  let runArgs = {\r\n    assistant_id: assistant.id,\r\n    instructions: (instructions != null) ? instructions : ''\r\n  };\r\n\r\n  run = await openai.beta.threads.runs.create(thread.id, runArgs);\r\n\r\n  // Poll and wait for the run to complete\r\n  let runStatus = await pollRun(thread, run, gptControl);\r\n  \r\n  if (runStatus.status === \"completed\") {\r\n    \r\n    const message = await getLatestMessage  (openai, thread, 1);\r\n    return message; \r\n  } else if (runStatus.status === 'requires_action') {\r\n    let r = await required_action(\r\n      runStatus,\r\n      thread,\r\n      run,\r\n      gptControl,\r\n      appEnv\r\n    );\r\n    let message = await getLatestMessage  (openai, thread,1);\r\n    return message;\r\n  } else {\r\n    return { runStatus: runStatus.status };\r\n  }\r\n}\r\nexport default runAssistant;\r\n\r\n//https://platform.openai.com/docs/guides/text-generation/chat-completions-api\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description - Close Viya connections.\r\n * @function closeAssistant\r\n * @param {object} gptControl - gpt session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {boolean} - true\r\n */\r\nasync function closeAssistant(_gptControl, _appEnv) {\r\n  console.log('in closeAssistant');\r\n  return true;\r\n}\r\nexport default closeAssistant;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * \r\n * @description Return sepcified number of messagesfrom thread\r\n * @param {object}  gptControl- openai control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {*} - messages - array of messages\r\n */\r\nasync function getMessages(gptControl, limit) {  \r\n  let {openai, thread} = gptControl;\r\n  const messages = await openai.beta.threads.messages.list(thread.id, {limit:limit});\r\n  //console.log('body', JSON.stringify(messages.body.data, null, 4));\r\n  let output = messages.data.map((m) => {\r\n    let content = m.content[0];\r\n    return {id: m.id, role: m.role, type: content.type, content: content[content.type].value};\r\n  });\r\n  return output;\r\n\r\n}\r\nexport default getMessages;"],"names":["loadThread","openai","threadid","assistant","reuseThread","_temp5","_temp3","thread","_temp2","console","log","Promise","resolve","beta","threads","create","metadata","assistanceName","name","then","_openai$beta$threads$2","assistants","update","id","thread_id","lastRunId","_openai$beta$assistan","_temp4","_temp","body","recover","result","retrieve","_openai$beta$threads$","e","_catch","error","status","reject","setupAssistant","config","provider","assistantName","credentials","apiKey","openaiKey","azureaiKey","endpoint","azureaiEndpoint","OpenAI","dangerouslyAllowBrowser","OpenAIClient","OpenAIKeyCredential","list","order","limit","myAssistants","data","find","a","specs","createArgs","instructions","model","tools","r","createAssistant","openAssistant","getLatestMessage","messages","content","type","value","_settle","pact","state","s","_Pact","o","bind","v","observer","pollRun","run","gptControl","newAssistant","runStatus","done","test","awaitBody","_isSettledPact","shouldContinue","_resumeAfterBody","_resumeAfterTest","_do","runs","setTimeout","prototype","onFulfilled","onRejected","this","callback","_this","thenable","_iteratorSymbol","Symbol","iterator","runAssistant","prompt","appEnv","_exit","_result","assistant_id","submitToolOutputs","tool_outputs","toolsOutput","newRun","functionList","target","check","step","_cycle","next","return","_fixup","TypeError","values","i","length","push","array","_forTo","_forOf","required_action","submit_tool_outputs","tool_calls","action","functionName","params","JSON","parse","arguments","response","tool_call_id","output","stringify","role","_status$message","message","closeAssistant","_gptControl","_appEnv","getMessages","map","m"],"mappings":"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"}