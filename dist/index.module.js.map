{"version":3,"file":"index.module.js","sources":["../src/src/loadThread.js","../src/src/setupAssistant.js","../src/src/createAssistant.js","../src/src/openAssistant.js","../src/lib/setupViya.js","../src/src/getLatesMessage.js","../src/src/pollRun.js","../src/src/required_action.js","../src/src/runAssistant.js","../src/src/closeAssistant.js"],"sourcesContent":["/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function loadThread\r\n * @description   reattach thread from previous session\r\n * @param {string} apiKey - openai api key\r\n * @param {string} threadid - thread id\r\n * @param {string} assistant - assistant object\r\n * @returns {promise} - return {thread, assistant}\r\n */\r\nasync function loadThread(openai, threadid, assistant, reuseThread) {\r\n // let thread_id = assistant.metadata.thread_id;\r\n\r\n  let thread = null;\r\n  // If we are reusing the thread, try to retrieve it\r\n  if (reuseThread === true && threadid != '0') {\r\n    try {\r\n      thread = await openai.beta.threads.retrieve(threadid);\r\n    } catch (error) {\r\n      console.log(error); \r\n      console.log(error.status);\r\n      console.log(`Error status ${error.status}. Unable to retrieve the thread ${thread_id}`);\r\n    }\r\n  }\r\n\r\n  // If still no thread, create a new one\r\n  if (thread == null) {\r\n    console.log('Creating new thread' );\r\n    thread = await openai.beta.threads.create({\r\n      metadata: { assistanceName: assistant.name },\r\n    });\r\n    // update assistant metadata\r\n    assistant = await openai.beta.assistants.update(assistant.id, {\r\n      metadata: { thread_id: thread.id, lastRunId: \"0\" },\r\n    });\r\n  }\r\n\r\n  return { thread, assistant };\r\n}\r\nexport default loadThread;\r\n","/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\n/**\r\n * @async\r\n * @function setupAssist\r\n * @description   Setup the GPT Assistant\r\n * @param {string} provider - azure or openai\r\n * @param {string} assistanceName - name of the assistant(default is SAS_Assistant)\r\n * @returns {promise} - return {openai, assistant, thread, functionList}\r\n */\r\nimport OpenAI from 'openai';  \r\nimport  {OpenAIClient, OpenAIKeyCredential} from '@azure/openai'\r\n\r\nimport createAssistant from './createAssistant.js';\r\nimport openAssistant from './openAssistant.js';\r\nimport setupViya from '../lib/setupViya.js';\r\n\r\nasync function setupAssistant(config) {\r\n\r\n  // azureai open includes url and key\r\n  // openai includes key\r\n  let {provider, assistantName, credentials} = config;\r\n // let apiKey = (provider === 'openai') ? process.env.OPENAI_KEY : process.env.OPENAI_AZ_KEY;\r\n  let apiKey = (provider === 'openai') ? credentials.openaiKey : credentials.azureaiKey;\r\n  let endpoint = credentials.azureaiEndpoint;\r\n  let openai = (provider === 'openai') ? new OpenAI({ apiKey: apiKey }) : \r\n        new OpenAIClient(endpoint, new OpenAIKeyCredential(apiKey));\r\n\r\n // Wishlist: Wish could open with query of name and let it succeed or fail\r\n  const myAssistants = await openai.beta.assistants.list({\r\n    order: \"desc\",\r\n    limit: \"100\",\r\n  });\r\n  let assistant = myAssistants.data.find((a) => { \r\n    if (a.name === assistantName) {\r\n      return a;\r\n    }\r\n  });\r\n\r\n  // Either create a new assistant or reuse the existing one(preferred)\r\n  \r\n  let gptControl = (assistant == null) \r\n                     ? await createAssistant(openai, config)\r\n                     : await openAssistant(openai, assistant, config);\r\n                     \r\n  // setup viya session\r\n  let appEnv = await setupViya(config.source);\r\n  return {gptControl, appEnv};\r\n\r\n  }\r\n  export default setupAssistant;","/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\n\r\nimport loadThread from \"./loadThread.js\";\r\n\r\n/**\r\n * @async\r\n * @function setupAssist\r\n * @description   Setup the GPT Assistant\r\n * @param {string} apiKey - openai api key\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return {openai, assistant, thread, functionList}\r\n */\r\nasync function createAssistant(openai, config) {\r\nlet {assistantName, instructions, model, specs, reuseThread} = config;\r\n\r\nlet createArgs = {\r\n  name: assistantName,\r\n  instructions: instructions,\r\n  model: model, \r\n  tools: specs.tools,\r\n  metadata:{ thread_id: '0', lastRunId: '0'},\r\n};\r\n\r\nlet assistant = await openai.beta.assistants.create(createArgs);\r\nconsole.log('-----------------------------------');\r\nconsole.log('New Assistant: ', assistantName , assistant.id);\r\nlet r = await loadThread(openai, config.threadid, assistant, reuseThread);\r\nconsole.log('Thread ID: ', r.thread.id);\r\nconsole.log('-----------------------------------');\r\n// assistant might have been updated in loadThread\r\nlet gptControl = {\r\n  openai,\r\n  assistant: r.assistant, \r\n  thread: r.thread,\r\n  threadid: r.thread.id,\r\n specs};\r\nreturn gptControl;\r\n}\r\nexport default createAssistant;","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function openAssistant\r\n * @description   Reuse existing assistant\r\n * @param {string} apiKey - openai api key\r\n * @param {string} assistant - assistant object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return {openai, assistant, thread, functionList}\r\n */\r\nimport loadThread from './loadThread.js'; \r\nasync function openAssistant(openai, assistant, config) {\r\n\r\n  let {reuseThread} = config;\r\n  console.log(\"Using Existing Assistant: \", assistant.name, assistant.id);\r\n  let thread_id = assistant.metadata.thread_id;\r\n\r\n  if (config.threadid !== '0') {\r\n    thread_id = config.threadid;\r\n  }\r\n\r\n  console.log(\"Associated thread_id: \", thread_id);\r\n\r\n  // load previous thread. loadThread will create a new thread if reuseThread is false\r\n  let r = await loadThread(openai, thread_id, assistant, reuseThread);\r\n  // assistant might have been updated in loadThread\r\n  let gptControl = {\r\n    openai: openai,\r\n    assistant: r.assistant,\r\n    thread: r.thread,\r\n    threadid: r.thread.id,\r\n    specs: config.specs\r\n  };\r\n  return gptControl;\r\n}\r\nexport default openAssistant;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * Setup the Viya environment\r\n * @param {string} source - cas or compute\r\n * @returns {object} - appEnv\r\n * @async\r\n */\r\n \r\nimport restaf from '@sassoftware/restaf';\r\nimport restaflib from '@sassoftware/restaflib';\r\n\r\nasync function setupViya(source, logonPayload) {\r\n\r\n  let appEnv = {  \r\n    host: null,\r\n    logonPayload: null,\r\n    store: null,\r\n    session: null,\r\n    servers: null,\r\n    casServerName: null,\r\n    source: source,\r\n    sessionID: null\r\n  }\r\n  if (source === 'none'|| source == null){\r\n    return appEnv;\r\n  }\r\n  // logon payload\r\n  /*\r\n  let {token, host} = getToken();\r\n  let logonPayload = {\r\n    authType: 'server',\r\n    host: host,\r\n    token: token,\r\n    tokenType: 'bearer'\r\n  }\r\n  */\r\n\r\n  // logon to the server\r\n  let store = restaf.initStore({casProxy: true});\r\n  await store.logon(logonPayload);\r\n  appEnv = {\r\n    host: host,\r\n    logonPayload: logonPayload,\r\n    store: store,\r\n    source: source\r\n  }\r\n  // create session and server objects\r\n  if (source === 'cas') {\r\n    let {session, servers} = await restaflib.casSetup(store, null);\r\n    appEnv.session = session;\r\n    appEnv.servers = servers;\r\n    appEnv.casServerName = session.links(\"execute\", \"link\", \"server\"); \r\n \r\n  } else {\r\n    appEnv.session = await restaflib.computeSetup(store);\r\n    appEnv.server = null;\r\n  }\r\n\r\n  let ssid = await store.apiCall(appEnv.session.links(\"self\"));\r\n  appEnv.sessionID = ssid.items(\"id\");\r\n  return appEnv;\r\n}\r\nexport default setupViya;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nasync function getLatestMessage(openai,thread, limit) {  \r\n  const messages = await openai.beta.threads.messages.list(thread.id, {limit:limit});\r\n  \r\n  let content = messages.data[0].content[0];\r\n  let message = content[content.type].value;\r\n  return message\r\n\r\n}\r\nexport default getLatestMessage;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Poll run status since there is no streaming support\r\n * @function pollRun\r\n * @params {object} openai - openai object\r\n * @params {object} thread - thread object\r\n * @params {object} run - run object    \r\n * @params {object} gptControl - gpt  session control object\r\n * @returns {object} - runStatus from openai.beta.threads.runs.retrieve\r\n */\r\nasync function pollRun(thread, run, gptControl) {\r\n  let { openai, assistant} = gptControl;\r\n  let done = null;\r\n  let runStatus = null;\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  // Since there is no streaming support, sleep and poll the status\r\n  do {\r\n    \r\n    runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);\r\n    \r\n    console.log(\"-------------------\", runStatus.status);\r\n    if (\r\n      !(\r\n        runStatus.status === \"queued\" ||\r\n        runStatus.status === \"in_progress\" ||\r\n        runStatus.status === \"cancelling\"\r\n      )\r\n    ) {\r\n      done = runStatus.status;\r\n    } else {\r\n      await sleep(2000);\r\n      // console.log(\"waited 2000 ms\");\r\n    }\r\n  } while (done === null);\r\n\r\n  let newAssistant = await openai.beta.assistants.update(assistant.id, {\r\n    metadata: { thread_id: thread.id, lastRunId: run.id} \r\n  });\r\n  gptControl.assistant = newAssistant;\r\n  return runStatus;\r\n\r\n}\r\nexport default pollRun;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Handle required actions for Assistant\r\n * @function required_action\r\n * @param {string} prompt - User prompt\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {*} - response from GPT(can be text, string, html etc...)\r\n */\r\nimport pollRun from \"./pollRun.js\";\r\nasync function required_action(runStatus, thread, run,  gptControl, appEnv) {\r\n  let{openai,specs} = gptControl;\r\n  let {functionList} = specs;\r\n  \r\n  let requiredActions = runStatus.required_action.submit_tool_outputs.tool_calls;\r\n  \r\n  let toolsOutput = [];\r\n  for (let action of requiredActions) {\r\n    let functionName = action.function.name;\r\n    console.log('Requested function: ', functionName);\r\n    let params = JSON.parse(action.function.arguments);\r\n    let response = await functionList[functionName](params, appEnv, gptControl);\r\n\r\n    toolsOutput.push({\r\n      tool_call_id: action.id,\r\n      output: JSON.stringify(response),\r\n    });\r\n }\r\n// submit the outputs to the thread\r\n let newRun = await openai.beta.threads.runs.submitToolOutputs(\r\n  thread.id, run.id, { tool_outputs: toolsOutput });\r\n\r\n// wait for output to appear in the thread messages\r\n let outputStatus = await pollRun(thread, newRun, gptControl);\r\n\r\nreturn outputStatus;\r\n}\r\nexport default required_action;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport getLatestMessage from \"./getLatesMessage.js\";\r\nimport required_action from \"./required_action.js\";\r\nimport pollRun from \"./pollRun.js\";\r\n\r\n/**\r\n * @async\r\n * @description - Run the latest prompt from the user\r\n * @function runAssistant\r\n * @param {string} prompt - User prompt\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {*} - response from GPT(can be text, string, html etc...)\r\n */\r\n\r\nasync function runAssistant(prompt, gptControl, appEnv) {\r\n  let { openai, assistant, thread, specs } = gptControl;\r\n  let {functionList} = specs;\r\n\r\n  //add the user request to thread\r\n  let run = null;\r\n  let newMessage = null;\r\n  try {\r\n    newMessage = await openai.beta.threads.messages.create(thread.id, {\r\n      role: \"user\",\r\n      content: prompt,\r\n    });\r\n  } catch (error) {\r\n    console.log(`status = ${error.status}. Unable to add the prompt to the thread`);\r\n    console.log('will try to cancel the last run');\r\n    console.log(error);\r\n    if (error.status === 400 && assistant.metadata.lastRunId !== '0') {\r\n      try {\r\n        run = await openai.beta.threads.runs.cancel(thread.id, assistant.metadata.lastRunId);\r\n        assistant = await openai.beta.assistants.update(assistant.id, {\r\n          metadata: { thread_id: thread.id, lastRunId: run.id }})\r\n        gptControl.assistant = assistant;\r\n        console.log(\"Cancelled the last run\");\r\n      } catch (error) {\r\n        console.log('Unable to cancel the last run');\r\n        console.log(error);\r\n      }\r\n    } else {\r\n      await openai.beta.threads.del(thread.id);\r\n      thread = await openai.beta.threads.create({\r\n        metadata: { assistanceName: assistant.name, lastRunId: '0'},\r\n      });\r\n      gptControl.thread = thread;\r\n      console.log(\"Deleted old thread and created a new one\");\r\n      \r\n    }\r\n  }\r\n  newMessage = await openai.beta.threads.messages.create(thread.id, {\r\n    role: \"user\",\r\n    content: prompt,\r\n  });\r\n  // console.log(assistant.id);\r\n  // console.log(JSON.stringify(thread, null, 4));\r\n  run = await openai.beta.threads.runs.create(thread.id, {\r\n    assistant_id: assistant.id,\r\n    instructions: `Help user use SAS Viya to accomplish a task\r\n                      Allow users to query for information from a Viya Server.\r\n                      Allow users to query the retrieved information`,\r\n  });\r\n\r\n  // Poll and wait for the run to complete\r\n  let runStatus = await pollRun(thread, run, gptControl);\r\n  \r\n  if (runStatus.status === \"completed\") {\r\n    \r\n    const message = await getLatestMessage  (openai, thread, 1);\r\n    return message; \r\n  } else if (runStatus.status === 'requires_action') {\r\n    let r = await required_action(\r\n      runStatus,\r\n      thread,\r\n      run,\r\n      gptControl,\r\n      appEnv\r\n    );\r\n    let message = await getLatestMessage  (openai, thread,1);\r\n    return message;\r\n  } else {\r\n    return { runStatus: runStatus.status };\r\n  }\r\n}\r\nexport default runAssistant;\r\n\r\n//https://platform.openai.com/docs/guides/text-generation/chat-completions-api\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description - Close Viya connections.\r\n * @function closeAssistant\r\n * @param {object} gptControl - gpt session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {boolean} - true\r\n */\r\nasync function closeAssistant(_gptControl, _appEnv) {\r\n  return true;\r\n}\r\nexport default closeAssistant;"],"names":["loadThread","openai","threadid","assistant","reuseThread","_temp5","_temp3","thread","_temp2","console","log","Promise","resolve","beta","threads","create","metadata","assistanceName","name","then","_openai$beta$threads$2","assistants","update","id","thread_id","lastRunId","_openai$beta$assistan","_temp4","_temp","body","recover","result","retrieve","_openai$beta$threads$","e","_catch","error","status","reject","setupAssistant","config","provider","assistantName","credentials","apiKey","openaiKey","azureaiKey","endpoint","azureaiEndpoint","OpenAI","OpenAIClient","OpenAIKeyCredential","list","order","limit","myAssistants","data","find","a","specs","instructions","model","tools","r","createAssistant","openAssistant","gptControl","source","logonPayload","appEnv","host","store","session","servers","casServerName","sessionID","restaf","initStore","casProxy","logon","apiCall","links","ssid","items","restaflib","casSetup","_ref","computeSetup","_restaflib$computeSet","server","setupViya","getLatestMessage","messages","content","type","value","_settle","pact","state","s","_Pact","o","bind","v","observer","pollRun","run","newAssistant","runStatus","done","test","awaitBody","_isSettledPact","shouldContinue","_resumeAfterBody","_resumeAfterTest","_do","runs","setTimeout","prototype","onFulfilled","onRejected","this","callback","_this","thenable","_iteratorSymbol","Symbol","iterator","runAssistant","prompt","role","_openai$beta$threads$4","assistant_id","_openai$beta$threads$5","submitToolOutputs","tool_outputs","toolsOutput","newRun","functionList","target","check","step","_cycle","next","return","_fixup","TypeError","values","i","length","push","array","_forTo","_forOf","required_action","submit_tool_outputs","tool_calls","action","functionName","params","JSON","parse","arguments","response","tool_call_id","output","stringify","del","_openai$beta$threads$3","cancel","closeAssistant","_gptControl","_appEnv"],"mappings":"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"}