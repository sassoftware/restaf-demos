{"version":3,"file":"index.module.js","sources":["../src/loadThread.js","../src/setupAssistant.js","../src/createAssistant.js","../src/getLatestMessage.js","../src/pollRun.js","../src/required_action.js","../src/runAssistant.js","../src/closeAssistant.js","../src/getMessages.js"],"sourcesContent":["/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function loadThread\r\n * @description   new thread or open existing thread\r\n * @params {object} client - client object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return thread object\r\n */\r\nasync function loadThread(client, config) {\r\n  let {threadid} = config; \r\n  let thread = null;\r\n  // If we are reusing the thread, try to retrieve it\r\n  try {\r\n    thread = (threadid === '0') \r\n      ? await client.beta.threads.create({ metadata: { assistantName: assistant.name }})\r\n      : await client.beta.threads.retrieve(threadid);\r\n  } catch (error) {\r\n    console.log(error); \r\n    console.log(error.status);\r\n    throw new Error(`Error status ${error.status}. Unable to retrieve the thread ${threadid}. see console for details.`);\r\n  }\r\n  debugger;\r\n  return thread;\r\n}\r\nexport default loadThread;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function setupAssistant\r\n * @description   Setup the GPT Assistant\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return gptControl object}\r\n */\r\nimport OpenAI from 'openai';\r\nimport loadThread from './loadThread.js';\r\nimport createAssistant from './createAssistant.js';\r\n\r\nasync function setupAssistant(config) {\r\n  let {credentials } = config;\r\n  let {openaiKey} = credentials;\r\n  // let apiKey = (provider === 'openai') ? process.env.OPENAI_KEY : process.env.OPENAI_AZ_KEY;\r\n\r\n  //\r\n  debugger;\r\n  let client = new OpenAI({ apiKey: openaiKey, dangerouslyAllowBrowser: true });\r\n  debugger;\r\n  let gptControl = {\r\n    provider: 'openai',\r\n    client: client,\r\n    assistant: null,\r\n    thread: null,\r\n    threadid: null,\r\n    specs: config.domainTools,\r\n    appEnv: null,\r\n    config: config, // save the config for runtime changes\r\n  };\r\n  // create assistant and thread\r\n  debugger;\r\n  gptControl.assistant = await createAssistant(client, config);\r\n  debugger;\r\n  gptControl.thread = await loadThread(client, config);\r\n  debugger;\r\n  gptControl.threadid = gptControl.thread.id;// just for convenience\r\n  return gptControl;\r\n}\r\nexport default setupAssistant;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @function createAssistant\r\n * @description   Create a new assistant\r\n * @param {string} client - client object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return assistant object\r\n */\r\nasync function createAssistant(client, config) {\r\n  let { assistantName, assistantid, instructions, model, domainTools } = config;\r\n\r\n  // create args for assistant create\r\n  let createArgs = {\r\n    name: assistantName,\r\n    instructions: instructions,\r\n    model: model,\r\n  };\r\n  if (domainTools.tools != null) {\r\n    createArgs.tools = domainTools.tools;\r\n  }\r\n\r\n  let assistant = null;\r\n  debugger;\r\n  console.log(assistantid);\r\n  if (assistantid !== \"0\") {\r\n    debugger;\r\n    assistant = await client.beta.assistants.retrieve(assistantid);\r\n    debugger;\r\n  } else {\r\n    // local rules: avoid creating a new assistant if one exists\r\n    // use name to find the assistant\r\n    // wish there was a way to filter on names in the API call\r\n    debugger;\r\n    const myAssistants = await client.beta.assistants.list({\r\n      order: \"desc\",\r\n      limit: \"100\", //ugh!\r\n    });\r\n    assistant = myAssistants.data.find((a) => {\r\n      if (a.name === assistantName) {\r\n        return a;\r\n      }\r\n    });\r\n    // if first time using this name, create the assistant\r\n    if (assistant == null) {\r\n      assistant = await client.beta.assistants.create(createArgs);\r\n    }\r\n  }\r\n  \r\n  debugger;\r\n  return assistant;\r\n}\r\nexport default createAssistant;\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description Return the latest message from thread\r\n * @param {object}  gptControl- client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {promise} - messages - array of latest assistant messages[ {id, role, type, content}]\r\n * @notes - This function will return latest assistant messages based on limit\r\n */\r\nasync function getLatestMessage(gptControl, limit) {  \r\n  let {client, thread} = gptControl;\r\n  const messages = await client.beta.threads.messages.list(thread.id, {limit:limit});\r\n  //console.log('body', JSON.stringify(messages.body.data, null, 4));\r\n  let output = [];\r\n  let data = messages.data;\r\n  for (let i = 0; i < messages.data.length; i++){\r\n    let content = data[i].content[0];\r\n    if (data[i].role === 'assistant') {\r\n      output.push({id: data[i].id, role: data[i].role, type: content.type, content: content[content.type].value});\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  if (output.length > 1) {\r\n    output = output.reverse();\r\n  }\r\n  return output;\r\n\r\n}\r\nexport default getLatestMessage;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Poll run status since there is no streaming support\r\n * @function pollRun\r\n * @params {object} client - client object\r\n * @params {object} thread - thread object\r\n * @params {object} run - run object    \r\n * @params {object} gptControl - gpt  session control object\r\n * @returns {object} - runStatus from client.beta.threads.runs.retrieve\r\n * @notes - Will wait for completion(!(queued,in_progress, cancelling))\r\n */\r\nasync function pollRun(thread, run, gptControl) {\r\n  let { client} = gptControl;\r\n  let done = null;\r\n  let runStatus = null;\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  // Since there is no streaming support, sleep and poll the status\r\n  do {\r\n    debugger;\r\n    runStatus = await client.beta.threads.runs.retrieve(thread.id, run.id);\r\n    \r\n    console.log(\"-------------------\", runStatus.status);\r\n    if (\r\n      !(\r\n        runStatus.status === \"queued\" ||\r\n        runStatus.status === \"in_progress\" ||\r\n        runStatus.status === \"cancelling\"\r\n      )\r\n    ) {\r\n      debugger;\r\n      done = runStatus.status;\r\n    } else {\r\n      await sleep(2000);\r\n      console.log(\"waited 2000 ms\");\r\n    }\r\n  } while (done === null);\r\n\r\n  /*\r\n  let newAssistant = await client.beta.assistants.update(assistant.id, {\r\n    metadata: { thread_id: thread.id, lastRunId: run.id} \r\n  });\r\n  */\r\n  debugger;\r\n //  gptControl.assistant = newAssistant;\r\n  return runStatus;\r\n\r\n}\r\nexport default pollRun;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Handle required actions for Assistant\r\n * @function required_action\r\n * @param {object} runStatus - run status object\r\n * @param {object} thread - thread object\r\n * @param {object} run - run object\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {promise} - status from submitToolOutputs\r\n */\r\nimport pollRun from \"./pollRun.js\";\r\nasync function required_action(runStatus, thread, run,  gptControl, appEnv) {\r\n  let{client,specs} = gptControl;\r\n  let {functionList} = specs;\r\n  \r\n  // get the required actions from the run status\r\n  let requiredActions = runStatus.required_action.submit_tool_outputs.tool_calls;\r\n  \r\n  let toolsOutput = [];\r\n  for (let action of requiredActions) {\r\n    let functionName = action.function.name;\r\n    console.log('Requested function: ', functionName);\r\n    let params = JSON.parse(action.function.arguments);\r\n    debugger;\r\n    let response = await functionList[functionName](params, appEnv, gptControl);\r\n    debugger;\r\n    toolsOutput.push({\r\n      tool_call_id: action.id,\r\n      output: JSON.stringify(response),\r\n    });\r\n }\r\n// submit the outputs to the thread\r\n let newRun = await client.beta.threads.runs.submitToolOutputs(\r\n  thread.id, run.id, { tool_outputs: toolsOutput });\r\n\r\n// wait for output to appear in the thread messages\r\n let outputStatus = await pollRun(thread, newRun, gptControl);\r\n\r\nreturn outputStatus;\r\n}\r\nexport default required_action;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport getLatestMessage from \"./getLatestMessage.js\";\r\nimport required_action from \"./required_action.js\";\r\nimport pollRun from \"./pollRun.js\";\r\n\r\n/**\r\n * @async\r\n * @description - Run the latest prompt from the user\r\n * @function runAssistant\r\n *\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {string} prompt - user's prompt\r\n * @param {string} instructions - Additional instructions for the run\r\n * @param {object} appEnv - application info - ex: Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n \r\n * @returns {promise} - response from GPT(can be text, string, html etc...)\r\n * @notes - This function will run the assistant with the prompt and return the response from the assistant.\r\n * @example \r\n *  let response = await runAssistant(gptControl, prompt, promptInstructions,appEnv); \r\n*/\r\n\r\nasync function runAssistant(gptControl,prompt, instructions, appEnv) {\r\n  let { client, assistant, thread, specs } = gptControl;\r\n  //add the user request to thread\r\n  try {\r\n    let _newMessage = await client.beta.threads.messages.create(thread.id, {\r\n      role: \"user\",\r\n      content: prompt,\r\n    });\r\n    let r = await runPrompt(gptControl, appEnv, instructions);\r\n    return r;\r\n  } catch (error) {\r\n    //tbd: recovery?\r\n    debugger;\r\n    console.log(\r\n      `status = ${error.status}. Unable to add the prompt to the thread`\r\n    );\r\n    console.log(error);\r\n    throw new Error('Unable to add the prompt to the thread. See console for more details');\r\n  }\r\n}\r\nasync function runPrompt(gptControl, appEnv, instructions) {\r\n  let { client, assistant, thread } = gptControl;\r\n  let runArgs = {\r\n    assistant_id: assistant.id,\r\n    instructions: instructions != null ? instructions : \"\",\r\n  };\r\n  // Run the assistant with the prompt and poll for completion\r\n  let run = await client.beta.threads.runs.create(thread.id, runArgs);\r\n  debugger;\r\n  let runStatus = await pollRun(thread, run, gptControl);\r\n\r\n  //check for completion status\r\n  let message;\r\n  if (runStatus.status === \"completed\") {\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else if (runStatus.status === \"requires_action\") {\r\n    let r = await required_action(runStatus, thread, run, gptControl, appEnv);\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else {\r\n    message = [{ runStatus: runStatus.status }];\r\n  }\r\n  return message;\r\n}\r\nexport default runAssistant;\r\n\r\n//https://platform.openai.com/docs/guides/text-generation/chat-completions-api\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description - Close Viya connections.\r\n * @function closeAssistant\r\n * @param {object} gptControl - gpt session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {boolean} - true\r\n */\r\nasync function closeAssistant(_gptControl, _appEnv) {\r\n  console.log('in closeAssistant');\r\n  return true;\r\n}\r\nexport default closeAssistant;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * \r\n * @description Return sepcified number of messages from thread\r\n * @param {object}  gptControl- client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {*} - messages - array of messages[ {id, role, type, content}]\r\n * @notes - This function will return the specified number of messages from the thread\r\n * Typically the top 2 will be the assistant message and user's prompt\r\n */\r\nasync function getMessages(gptControl, limit) {  \r\n  let {client, thread} = gptControl;\r\n  const messages = await client.beta.threads.messages.list(thread.id, {limit:limit});\r\n  //console.log('body', JSON.stringify(messages.body.data, null, 4));\r\n  let output = messages.data.map((m) => {\r\n    let content = m.content[0];\r\n    return {id: m.id, role: m.role, type: content.type, content: content[content.type].value};\r\n  });\r\n  return output;\r\n\r\n}\r\nexport default getMessages;"],"names":["setupAssistant","config","client","OpenAI","apiKey","credentials","openaiKey","dangerouslyAllowBrowser","gptControl","provider","assistant","thread","threadid","specs","domainTools","appEnv","Promise","resolve","_temp3","assistantName","assistantid","createArgs","name","instructions","model","tools","console","log","_temp2","beta","assistants","retrieve","then","_client$beta$assistan","list","order","limit","myAssistants","data","find","a","_temp","create","_client$beta$assistan2","e","reject","createAssistant","_createAssistant","_result","body","recover","result","threads","metadata","_client$beta$threads$","_catch","error","status","Error","loadThread","_loadThread","id","getLatestMessage","messages","output","i","length","content","role","push","type","value","reverse","_settle","pact","state","s","_Pact","o","bind","v","observer","pollRun","run","runStatus","done","test","awaitBody","_isSettledPact","shouldContinue","_resumeAfterBody","_resumeAfterTest","_do","runs","setTimeout","prototype","onFulfilled","onRejected","this","callback","_this","thenable","_iteratorSymbol","Symbol","iterator","runAssistant","prompt","_newMessage","assistant_id","message","_getLatestMessage","submitToolOutputs","tool_outputs","toolsOutput","newRun","functionList","target","check","step","_cycle","next","return","_fixup","TypeError","values","array","_forTo","_forOf","required_action","submit_tool_outputs","tool_calls","action","functionName","params","JSON","parse","arguments","response","tool_call_id","stringify","r","_getLatestMessage2","runPrompt","closeAssistant","_gptControl","_appEnv","getMessages","map","m"],"mappings":"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"}