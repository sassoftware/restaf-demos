{"version":3,"file":"index.module.js","sources":["../src/loadThread.js","../src/setupAssistant.js","../src/createAssistant.js","../src/getLatestMessage.js","../src/pollRun.js","../src/required_action.js","../src/runAssistant.js","../src/closeAssistant.js","../src/getMessages.js","../src/uploadFile.js"],"sourcesContent":["/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function loadThread\r\n * @description   new thread or open existing thread\r\n * @params {object} client - client object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return thread object\r\n */\r\nasync function loadThread(client, config) {\r\n  let {threadid} = config; \r\n  let thread = null;\r\n  // If we are reusing the thread, try to retrieve it\r\n  try {\r\n    thread = (threadid === '0') \r\n      ? await client.beta.threads.create({ metadata: { assistantName: assistant.name }})\r\n      : await client.beta.threads.retrieve(threadid);\r\n  } catch (error) {\r\n    console.log(error); \r\n    console.log(error.status);\r\n    throw new Error(`Error status ${error.status}. Unable to retrieve the thread ${threadid}. see console for details.`);\r\n  }\r\n  debugger;\r\n  return thread;\r\n}\r\nexport default loadThread;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function setupAssistant\r\n * @description   Setup the GPT Assistant\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return gptControl object}\r\n */\r\nimport OpenAI from 'openai';\r\nimport loadThread from './loadThread.js';\r\nimport createAssistant from './createAssistant.js';\r\n\r\nasync function setupAssistant(config) {\r\n  let {credentials } = config;\r\n  let {key} = credentials;\r\n  debugger;\r\n  let client = new OpenAI({ apiKey: key, dangerouslyAllowBrowser: true });\r\n  debugger;\r\n  let gptControl = {\r\n    provider: 'openai',\r\n    client: client,\r\n    assistant: null,\r\n    thread: null,\r\n    threadid: null,\r\n    specs: config.domainTools,\r\n    appEnv: null,\r\n    config: config, // save the config for runtime changes\r\n  };\r\n  // create assistant and thread\r\n  debugger;\r\n  gptControl.assistant = await createAssistant(client, config);\r\n  debugger;\r\n  gptControl.thread = await loadThread(client, config);\r\n  debugger;\r\n  gptControl.threadid = gptControl.thread.id;// just for convenience\r\n  return gptControl;\r\n}\r\nexport default setupAssistant;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @function createAssistant\r\n * @description   Create a new assistant\r\n * @param {string} client - client object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return assistant object\r\n */\r\nasync function createAssistant(client, config) {\r\n  let { assistantName, assistantid, instructions, model, domainTools } = config;\r\n\r\n  // create args for assistant create\r\n  let createArgs = {\r\n    name: assistantName,\r\n    instructions: instructions,\r\n    model: model,\r\n  };\r\n  if (domainTools.tools != null) {\r\n    createArgs.tools = domainTools.tools;\r\n  }\r\n\r\n  let assistant = null;\r\n  debugger;\r\n  console.log(assistantid);\r\n  let newAssistant = (assistantid === \"0\" || assistantid == null);\r\n  if (newAssistant == false){ \r\n    assistant = await client.beta.assistants.retrieve(assistantid);\r\n    debugger;\r\n  } else if (assistantName != null) {\r\n    // local rules: avoid creating a new assistant if one exists\r\n    // use name to find the assistant\r\n    // wish there was a way to filter on names in the API call\r\n    debugger;\r\n    const myAssistants = await client.beta.assistants.list({\r\n      order: \"desc\",\r\n      limit: \"100\", //ugh!\r\n    });\r\n    assistant = myAssistants.data.find((a) => {\r\n      if (a.name === assistantName) {\r\n        return a;\r\n      }\r\n    });\r\n    // if first time using this name, create the assistant\r\n    if (assistant == null) {\r\n      assistant = await client.beta.assistants.create(createArgs);\r\n    }\r\n  }\r\n  \r\n  debugger;\r\n  return assistant;\r\n}\r\nexport default createAssistant;\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description Return the latest message from thread\r\n * @param {object}  gptControl- client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {promise} - messages - array of latest assistant messages[ {id, role, type, content}]\r\n * @notes - This function will return latest assistant messages based on limit\r\n */\r\nasync function getLatestMessage(gptControl, limit) {  \r\n  let {client, thread} = gptControl;\r\n  const messages = await client.beta.threads.messages.list(thread.id, {limit:limit});\r\n  //console.log('body', JSON.stringify(messages.body.data, null, 4));\r\n  let output = [];\r\n  let data = messages.data;\r\n  for (let i = 0; i < messages.data.length; i++){\r\n    let content = data[i].content[0];\r\n    if (data[i].role === 'assistant') {\r\n      output.push({id: data[i].id, role: data[i].role, type: content.type, content: content[content.type].value});\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  if (output.length > 1) {\r\n    output = output.reverse();\r\n  }\r\n  return output;\r\n\r\n}\r\nexport default getLatestMessage;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Poll run status since there is no streaming support\r\n * @function pollRun\r\n * @params {object} client - client object\r\n * @params {object} thread - thread object\r\n * @params {object} run - run object    \r\n * @params {object} gptControl - gpt  session control object\r\n * @returns {object} - runStatus from client.beta.threads.runs.retrieve\r\n * @notes - Will wait for completion(!(queued,in_progress, cancelling))\r\n */\r\nasync function pollRun(thread, run, gptControl) {\r\n  let { client} = gptControl;\r\n  let done = null;\r\n  let runStatus = null;\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  // Since there is no streaming support, sleep and poll the status\r\n  do {\r\n    debugger;\r\n    runStatus = await client.beta.threads.runs.retrieve(thread.id, run.id);\r\n    \r\n    console.log(\"-------------------\", runStatus.status);\r\n    if (\r\n      !(\r\n        runStatus.status === \"queued\" ||\r\n        runStatus.status === \"in_progress\" ||\r\n        runStatus.status === \"cancelling\"\r\n      )\r\n    ) {\r\n      debugger;\r\n      done = runStatus.status;\r\n    } else {\r\n      await sleep(2000);\r\n      console.log(\"waited 2000 ms\");\r\n    }\r\n  } while (done === null);\r\n\r\n  /*\r\n  let newAssistant = await client.beta.assistants.update(assistant.id, {\r\n    metadata: { thread_id: thread.id, lastRunId: run.id} \r\n  });\r\n  */\r\n  debugger;\r\n //  gptControl.assistant = newAssistant;\r\n  return runStatus;\r\n\r\n}\r\nexport default pollRun;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Handle required actions for Assistant\r\n * @function required_action\r\n * @param {object} runStatus - run status object\r\n * @param {object} thread - thread object\r\n * @param {object} run - run object\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {promise} - status from submitToolOutputs\r\n */\r\nimport pollRun from \"./pollRun.js\";\r\nasync function required_action(runStatus, thread, run,  gptControl, appEnv) {\r\n  let{client,specs} = gptControl;\r\n  let {functionList} = specs;\r\n  \r\n  // get the required actions from the run status\r\n  let requiredActions = runStatus.required_action.submit_tool_outputs.tool_calls;\r\n  \r\n  let toolsOutput = [];\r\n  for (let action of requiredActions) {\r\n    let functionName = action.function.name;\r\n    console.log('Requested function: ', functionName);\r\n    let params = JSON.parse(action.function.arguments);\r\n    debugger;\r\n    let response = await functionList[functionName](params, appEnv, gptControl);\r\n    debugger;\r\n    toolsOutput.push({\r\n      tool_call_id: action.id,\r\n      output: JSON.stringify(response),\r\n    });\r\n }\r\n// submit the outputs to the thread\r\n let newRun = await client.beta.threads.runs.submitToolOutputs(\r\n  thread.id, run.id, { tool_outputs: toolsOutput });\r\n\r\n// wait for output to appear in the thread messages\r\n let outputStatus = await pollRun(thread, newRun, gptControl);\r\n\r\nreturn outputStatus;\r\n}\r\nexport default required_action;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport getLatestMessage from \"./getLatestMessage.js\";\r\nimport required_action from \"./required_action.js\";\r\nimport pollRun from \"./pollRun.js\";\r\n\r\n/**\r\n * @async\r\n * @description - Run the latest prompt from the user\r\n * @function runAssistant\r\n *\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {string} prompt - user's prompt\r\n * @param {string} instructions - Additional instructions for the run\r\n * @param {object} appEnv - application info - ex: Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n \r\n * @returns {promise} - response from GPT(can be text, string, html etc...)\r\n * @notes - This function will run the assistant with the prompt and return the response from the assistant.\r\n * @example \r\n *  let response = await runAssistant(gptControl, prompt, promptInstructions,appEnv); \r\n*/\r\n\r\nasync function runAssistant(gptControl,prompt, instructions, appEnv) {\r\n  let { client, assistant, thread, specs } = gptControl;\r\n  //add the user request to thread\r\n  try {\r\n    let _newMessage = await client.beta.threads.messages.create(thread.id, {\r\n      role: \"user\",\r\n      content: prompt,\r\n    });\r\n    let r = await runPrompt(gptControl, appEnv, instructions);\r\n    return r;\r\n  } catch (error) {\r\n    //tbd: recovery?\r\n    debugger;\r\n    console.log(\r\n      `status = ${error.status}. Unable to add the prompt to the thread`\r\n    );\r\n    console.log(error);\r\n    throw new Error('Unable to add the prompt to the thread. See console for more details');\r\n  }\r\n}\r\nasync function runPrompt(gptControl, appEnv, instructions) {\r\n  let { client, assistant, thread } = gptControl;\r\n  let runArgs = {\r\n    assistant_id: assistant.id,\r\n    instructions: instructions != null ? instructions : \"\",\r\n  };\r\n  // Run the assistant with the prompt and poll for completion\r\n  let run = await client.beta.threads.runs.create(thread.id, runArgs);\r\n  debugger;\r\n  let runStatus = await pollRun(thread, run, gptControl);\r\n\r\n  //check for completion status\r\n  let message;\r\n  if (runStatus.status === \"completed\") {\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else if (runStatus.status === \"requires_action\") {\r\n    let r = await required_action(runStatus, thread, run, gptControl, appEnv);\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else {\r\n    message = [{ runStatus: runStatus.status }];\r\n  }\r\n  return message;\r\n}\r\nexport default runAssistant;\r\n\r\n//https://platform.openai.com/docs/guides/text-generation/chat-completions-api\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description - Close Viya connections.\r\n * @function closeAssistant\r\n * @param {object} gptControl - gpt session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {boolean} - true\r\n */\r\nasync function closeAssistant(_gptControl, _appEnv) {\r\n  console.log('in closeAssistant');\r\n  return true;\r\n}\r\nexport default closeAssistant;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * \r\n * @description Return sepcified number of messages from thread\r\n * @param {object}  gptControl- client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {*} - messages - array of messages[ {id, role, type, content}]\r\n * @notes - This function will return the specified number of messages from the thread\r\n * Typically the top 2 will be the assistant message and user's prompt\r\n */\r\nasync function getMessages(gptControl, limit) {  \r\n  let {client, thread} = gptControl;\r\n  const messages = await client.beta.threads.messages.list(thread.id, {limit:limit});\r\n  //console.log('body', JSON.stringify(messages.body.data, null, 4));\r\n  let output = messages.data.map((m) => {\r\n    let content = m.content[0];\r\n    return {id: m.id, role: m.role, type: content.type, content: content[content.type].value};\r\n  });\r\n  return output;\r\n\r\n}\r\nexport default getMessages;","\n/*\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nasync function uploadFile(fileHandle,purpose, gptControl) {\n  let { client, assistant } = gptControl;\n\n  // get fileid\n  const fileId = await client.files.create({\n    file: fileHandle,\n    purpose: purpose})\n  console.log('.......................', fileId); \n  \n  debugger;\n  let currentFileIds = [].concat(assistant.file_ids);\n  currentFileIds.push(fileId.id);\n  console.log(currentFileIds);\n  debugger;\n  try {\n    let newAssistant = await client.beta.assistants.update(assistant.id, \n      {\n      file_ids: currentFileIds\n      });\n    gptControl.assistant = newAssistant;\n    debugger;\n    console.log('.......................', newAssistant);\n  } catch (e) {\n    console.log(e);\n  }\n  return currentFileIds;\n}\nexport default uploadFile;"],"names":["setupAssistant","config","client","OpenAI","apiKey","credentials","key","dangerouslyAllowBrowser","gptControl","provider","assistant","thread","threadid","specs","domainTools","appEnv","Promise","resolve","_temp4","assistantName","assistantid","createArgs","name","instructions","model","tools","console","log","newAssistant","_temp3","beta","assistants","retrieve","then","_client$beta$assistan","_temp5","list","order","limit","myAssistants","data","find","a","_temp","create","_client$beta$assistan2","e","reject","createAssistant","_createAssistant","_temp2","_result","body","recover","result","threads","metadata","_client$beta$threads$","_catch","error","status","Error","loadThread","_loadThread","id","getLatestMessage","messages","output","i","length","content","role","push","type","value","reverse","_settle","pact","state","s","_Pact","o","bind","v","observer","pollRun","run","runStatus","done","test","awaitBody","_isSettledPact","shouldContinue","_resumeAfterBody","_resumeAfterTest","_do","runs","setTimeout","prototype","onFulfilled","onRejected","this","callback","_this","thenable","_iteratorSymbol","Symbol","iterator","runAssistant","prompt","_newMessage","assistant_id","message","_getLatestMessage","submitToolOutputs","tool_outputs","toolsOutput","newRun","functionList","target","check","step","_cycle","next","return","_fixup","TypeError","values","array","_forTo","_forOf","required_action","submit_tool_outputs","tool_calls","action","functionName","params","JSON","parse","arguments","response","tool_call_id","stringify","r","_getLatestMessage2","runPrompt","closeAssistant","_gptControl","_appEnv","getMessages","map","m","uploadFile","fileHandle","purpose","files","file","fileId","currentFileIds","concat","file_ids","update"],"mappings":"sBA4jBC,IC7iBcA,EAAA,SAAeC,OAC5B,IAGIC,EAAS,IAAIC,EAAO,CAAEC,OAHLH,EAAhBI,YACAC,IAEkCC,yBAAyB,IAE5DC,EAAa,CACfC,SAAU,SACVP,OAAQA,EACRQ,UAAW,KACXC,OAAQ,KACRC,SAAU,KACVC,MAAOZ,EAAOa,YACdC,OAAQ,KACRd,OAAQA,GAGD,OAAAe,QAAAC,QCnBmB,SAACf,EAAQD,GAAM,IAAEiB,IAAAA,EAAAA,WAyC7C,OAAOR,CAAU,EAxCXS,EAAiElB,EAAjEkB,cAAeC,EAAkDnB,EAAlDmB,YAAkCN,EAAgBb,EAAhBa,YAGnDO,EAAa,CACfC,KAAMH,EACNI,aALqEtB,EAArCsB,aAMhCC,MANqEvB,EAAvBuB,OAQvB,MAArBV,EAAYW,QACdJ,EAAWI,MAAQX,EAAYW,OAGjC,IAAIf,EAAY,KAEhBgB,QAAQC,IAAIP,GACZ,IAAIQ,EAAgC,MAAhBR,GAAsC,MAAfA,EAAqBS,EAC5DD,WAAAA,GAAgB,GAAhBA,EAAqBZ,OAAAA,QAAAC,QACLf,EAAO4B,KAAKC,WAAWC,SAASZ,IAAYa,KAAA,SAAAC,GAA9DxB,EAASwB,CACA,GAAA,IAAAC,EAAA,WAAA,GACiB,MAAjBhB,EAIA,OAAAH,QAAAC,QACkBf,EAAO4B,KAAKC,WAAWK,KAAK,CACrDC,MAAO,OACPC,MAAO,SACPL,KAAA,SAHIM,GAIN7B,EAAY6B,EAAaC,KAAKC,KAAK,SAACC,GAClC,GAAIA,EAAEpB,OAASH,EACb,OAAOuB,CAEX,GAAG,IAAAC,EAAA,WAAA,GAEc,MAAbjC,EAAiBM,OAAAA,QAAAC,QACDf,EAAO4B,KAAKC,WAAWa,OAAOvB,IAAWY,KAAA,SAAAY,GAA3DnC,EAASmC,CAAmD,EAAAF,CAH3D,GAG2DA,GAAAA,GAAAA,EAAAV,YAAAU,EAAAV,KAAA,WAAA,EAAA,EAAA,CAjBrD,GAiBqD,OAAAE,GAAAA,EAAAF,KAAAE,EAAAF,KAAAjB,WAAAA,QAAA,CAAAA,CAnB5DY,GAmB4DZ,OAAAA,QAAAC,QAAAY,GAAAA,EAAAI,KAAAJ,EAAAI,KAAAf,GAAAA,IAMlE,CAAC,MAAA4B,GAAA,OAAA9B,QAAA+B,OAAAD,EACD,CAAA,CDvB+BE,CAAgB9C,EAAQD,IAAOgC,cAAAgB,GACnD,OADTzC,EAAWE,UAASuC,EACXjC,QAAAC,QDtBc,SAACf,EAAQD,GAAQ,IAAA,IAAAiD,EAAA,SAAAC,GAcxC,OAAOxC,CAAO,EAbTC,EAAYX,EAAZW,SACDD,EAAS,KAAKgC,EAoiBb,SAAgBS,EAAMC,GAC5B,IACC,IAAIC,EApiBAtC,QAAAC,QACqB,MAAbL,EACAV,EAAO4B,KAAKyB,QAAQX,OAAO,CAAEY,SAAU,CAAErC,cAAeT,UAAUY,QAClEpB,EAAO4B,KAAKyB,QAAQvB,SAASpB,IAASqB,cAAAwB,GAFhD9C,EAAM8C,CAE2C,EAkiBpD,CAAE,MAAMX,GACP,OAAOO,EAAQP,EAChB,CACA,OAAIQ,GAAUA,EAAOrB,KACbqB,EAAOrB,UAAK,EAAQoB,GAErBC,CACR,CA9iBoBI,CAAA,EAMTC,SAAAA,GAGP,MAFAjC,QAAQC,IAAIgC,GACZjC,QAAQC,IAAIgC,EAAMC,QACZ,IAAIC,MAAsBF,gBAAAA,EAAMC,OAAM,mCAAmChD,EAAQ,6BACzF,UAACI,QAAAC,QAAA0B,GAAAA,EAAAV,KAAAU,EAAAV,KAAAiB,GAAAA,IAGH,CAAC,MAAAJ,GAAA9B,OAAAA,QAAA+B,OAAAD,EAAA,CAAA,CCQ2BgB,CAAW5D,EAAQD,IAAOgC,cAAA8B,GAGpD,OAHAvD,EAAWG,OAAMoD,EAEjBvD,EAAWI,SAAWJ,EAAWG,OAAOqD,GACjCxD,CAAW,IACpB,CAAC,MAAAsC,GAAA9B,OAAAA,QAAA+B,OAAAD,EACD,CAAA,EE5BemB,WAAiBzD,EAAY8B,GAAO,IACf,OAAAtB,QAAAC,QAAXT,EAAlBN,OACyB4B,KAAKyB,QAAQW,SAAS9B,KAD7B5B,EAAVG,OACmDqD,GAAI,CAAC1B,MAAMA,KAAOL,KAAA,SAA5EiC,GAIN,IAFA,IAAIC,EAAS,GACT3B,EAAO0B,EAAS1B,KACX4B,EAAI,EAAGA,EAAIF,EAAS1B,KAAK6B,OAAQD,IAAI,CAC5C,IAAIE,EAAU9B,EAAK4B,GAAGE,QAAQ,GAC9B,GAAqB,cAAjB9B,EAAK4B,GAAGG,KAGV,MAFAJ,EAAOK,KAAK,CAACR,GAAIxB,EAAK4B,GAAGJ,GAAIO,KAAM/B,EAAK4B,GAAGG,KAAME,KAAMH,EAAQG,KAAMH,QAASA,EAAQA,EAAQG,MAAMC,OAIxG,CAIA,OAHIP,EAAOE,OAAS,IAClBF,EAASA,EAAOQ,WAEXR,CAAO,EAEhB,CAAC,MAAArB,GAAA,OAAA9B,QAAA+B,OAAAD,EAAA,CAAA,ECQM,SAAA8B,EAAiBC,EAAMC,EAAOJ,GACpC,IAAKG,EAAKE,EAAG,CACZ,GAAIL,aAAKM,EAAmB,CAC3B,IAAIN,EAAMK,EAOT,YADAL,EAAMO,EAAIL,EAAQM,KAAK,KAAML,EAAMC,IALvB,EAARA,IACHA,EAAQJ,EAAMK,GAEfL,EAAQA,EAAMS,CAKhB,CACA,GAAIT,GAASA,EAAMzC,KAElB,YADAyC,EAAMzC,KAAK2C,EAAQM,KAAK,KAAML,EAAMC,GAAQF,EAAQM,KAAK,KAAML,EAAM,IAGtEA,EAAKE,EAAID,EACTD,EAAKM,EAAIT,EACT,IAAMU,EAAWP,EAAKI,EAClBG,GACHA,EAASP,EAEX,CACD,CAAC,IA9CcQ,EAAA,SAAQ1E,EAAQ2E,EAAK9E,GAAU,QAAEqB,EAAA,WAmC9C,OAAO0D,CAAU,EAlCXrF,EAAUM,EAAVN,OACFsF,EAAO,KACPD,EAAY,KAAKrC,EAkUhB,SAAaE,EAAMqC,GACzB,IAAIC,EACJ,EAAG,CACF,IAAIpC,EAASF,IACb,GAAIE,GAAUA,EAAOrB,KAAM,CAC1B,IAAI0D,EAAerC,GAEZ,CACNoC,GAAY,EACZ,KACD,CAJCpC,EAASA,EAAO6B,CAKlB,CACA,IAAIS,EAAiBH,IAIrB,GAHIE,EAAeC,KAClBA,EAAiBA,EAAeT,IAE5BS,EACJ,OAAOtC,CAET,QAAUsC,EAAe3D,MACzB,IAAM4C,EAAO,IAAAG,EACPjC,EAAS6B,EAAQM,KAAK,KAAML,EAAM,GAExC,OADCa,EAAYpC,EAAOrB,KAAK4D,GAAoBD,EAAe3D,KAAK6D,IAAmB7D,UAAK,EAAQc,GAC1F8B,EACP,SAASgB,EAAiBnB,GAEzB,IADApB,EAASoB,EAGJiB,EADJC,EAAiBH,OAEhBG,EAAiBA,EAAeT,GAE5BS,GALG,CAQR,GAAIA,EAAe3D,KAElB,YADA2D,EAAe3D,KAAK6D,GAAkB7D,UAAK,EAAQc,GAIpD,IADAO,EAASF,MACKE,EAAOrB,KAAM,CAC1B,IAAI0D,EAAerC,GAIlB,YADAA,EAAOrB,KAAK4D,GAAkB5D,UAAK,EAAQc,GAF3CO,EAASA,EAAO6B,CAKlB,CACD,CACAP,EAAQC,EAAM,EAAGvB,EAClB,CACA,SAASwC,EAAiBF,GACzB,GAAIA,EAAgB,CACnB,EAAG,CAEF,IADAtC,EAASF,MACKE,EAAOrB,KAAM,CAC1B,IAAI0D,EAAerC,GAIlB,YADAA,EAAOrB,KAAK4D,GAAkB5D,UAAK,EAAQc,GAF3CO,EAASA,EAAO6B,CAKlB,CAKA,GAHIQ,EADJC,EAAiBH,OAEhBG,EAAiBA,EAAeT,IAE5BS,EAEJ,YADAhB,EAAQC,EAAM,EAAGvB,EAGnB,QAAUsC,EAAe3D,MACzB2D,EAAe3D,KAAK6D,GAAkB7D,UAAK,EAAQc,EACpD,MACC6B,EAAQC,EAAM,EAAGvB,EAEnB,CACD,CA9YuByC,CAAA,WAMV,OAAA/E,QAAAC,QACSf,EAAO4B,KAAKyB,QAAQyC,KAAKhE,SAASrB,EAAOqD,GAAIsB,EAAItB,KAAG/B,cAAAwB,GAAtE8B,EAAS9B,EAET/B,QAAQC,IAAI,sBAAuB4D,EAAU3B,QAAQ,IAAAjB,EAAA,WAAA,GAG5B,WAArB4C,EAAU3B,QACW,gBAArB2B,EAAU3B,QACW,eAArB2B,EAAU3B,OAIY5C,OAAAA,QAAAC,QAhBnB,IAAID,QAAQ,SAACC,GAAO,OAAKgF,WAAWhF,EAkB7B,IAlByC,IAkBpCgB,KAAA,WACjBP,QAAQC,IAAI,iBAAkB,GAH9B6D,EAAOD,EAAU3B,MAGa,CAZqB,GAYrB,GAAAjB,GAAAA,EAAAV,KAAA,OAAAU,EAAAV,KAElC,WAAA,EAAA,EAAA,EAAS,WAAA,OAAS,OAATuD,CAAa,GAAA,OAAAxE,QAAAC,QAAAiC,GAAAA,EAAAjB,KAAAiB,EAAAjB,KAAAJ,GAAAA,IAWxB,CAAC,MAAAiB,GAAA,OAAA9B,QAAA+B,OAAAD,EAAA,CAAA,EArDM,MAAMkC,eAAsB,WAClC,SAAAA,IAAiB,CAiCjB,OAhCAA,EAAMkB,UAAUjE,KAAO,SAASkE,EAAaC,GAC5C,MAAM9C,EAAS,IAAA0B,EACTF,EAAQuB,KAAKtB,EACnB,GAAID,EAAO,CACV,MAAMwB,EAAmB,EAARxB,EAAYqB,EAAcC,EAC3C,GAAIE,EAAU,CACb,IACC1B,EAAQtB,EAAQ,EAAGgD,EAASD,KAAKlB,GAClC,CAAE,MAAOrC,GACR8B,EAAQtB,EAAQ,EAAGR,EACpB,CACA,OAAOQ,CACR,CACC,OAAO+C,IAET,CAeA,OAdAA,KAAKpB,EAAI,SAASsB,GACjB,IACC,MAAM7B,EAAQ6B,EAAMpB,EACN,EAAVoB,EAAMxB,EACTH,EAAQtB,EAAQ,EAAG6C,EAAcA,EAAYzB,GAASA,GAC5C0B,EACVxB,EAAQtB,EAAQ,EAAG8C,EAAW1B,IAE9BE,EAAQtB,EAAQ,EAAGoB,EAErB,CAAE,MAAO5B,GACR8B,EAAQtB,EAAQ,EAAGR,EACpB,CACD,EACOQ,CACR,EACA0B,CACD,CAnCmC,GAgE5B,SAAAW,EAAwBa,GAC9B,OAAOA,aAAQxB,GAAkC,EAAbwB,EAASzB,CAC9C,CClDmC,IAmJtB0B,EAAkD,oBAAXC,OAA0BA,OAAOC,WAAaD,OAAOC,SAAWD,OAAO,oBAAuB,aA7H3I,SAAS9B,EAAQC,EAAMC,EAAOJ,GACpC,IAAKG,EAAKE,EAAG,CACZ,GAAIL,aAAiBM,EAAO,CAC3B,IAAIN,EAAMK,EAOT,YADAL,EAAMO,EAAIL,EAAQM,KAAK,KAAML,EAAMC,IALvB,EAARA,IACHA,EAAQJ,EAAMK,GAEfL,EAAQA,EAAMS,CAKhB,CACA,GAAIT,GAASA,EAAMzC,KAElB,YADAyC,EAAMzC,KAAK2C,EAAQM,KAAK,KAAML,EAAMC,GAAQF,EAAQM,KAAK,KAAML,EAAM,IAGtEA,EAAKE,EAAID,EACTD,EAAKM,EAAIT,EACT,IAAMU,EAAWP,EAAKI,EAClBG,GACHA,EAASP,EAEX,CACD,CAAC,IA9DYG,eAAsB,WAClC,SAAAA,IAAiB,CAiCjB,OAhCAA,EAAMkB,UAAUjE,KAAO,SAASkE,EAAaC,GAC5C,IAAM9C,EAAS,IAAA0B,EACTF,EAAQuB,KAAKtB,EACnB,GAAID,EAAO,CACV,IAAMwB,EAAmB,EAARxB,EAAYqB,EAAcC,EAC3C,GAAIE,EAAU,CACb,IACC1B,EAAQtB,EAAQ,EAAGgD,EAASD,KAAKlB,GAClC,CAAE,MAAOrC,GACR8B,EAAQtB,EAAQ,EAAGR,EACpB,CACA,OAAOQ,CACR,CACC,OACD+C,IACD,CAeA,OAdAA,KAAKpB,EAAI,SAASsB,GACjB,IACC,IAAM7B,EAAQ6B,EAAMpB,EACN,EAAVoB,EAAMxB,EACTH,EAAQtB,EAAQ,EAAG6C,EAAcA,EAAYzB,GAASA,GAC5C0B,EACVxB,EAAQtB,EAAQ,EAAG8C,EAAW1B,IAE9BE,EAAQtB,EAAQ,EAAGoB,EAErB,CAAE,MAAO5B,GACR8B,EAAQtB,EAAQ,EAAGR,EACpB,CACD,EACOQ,CACR,EACA0B,CACD,CAnCmC,GAgE5B,SAASW,EAAea,GAC9B,OAAOA,aAAoBxB,GAAsB,EAAbwB,EAASzB,CAC9C,CAyEC,ICpHc6B,WAAapG,EAAWqG,EAAQtF,EAAcR,GAAM,IACjE,IAAMb,EAAqCM,EAArCN,OAAmBS,EAAkBH,EAAlBG,OAA6B,OAAAK,QAAAC,QAyhBjD,SAAgBmC,EAAMC,GAC5B,IACC,IAAIC,EAzhBAtC,QAAAC,QACsBf,EAAO4B,KAAKyB,QAAQW,SAAStB,OAAOjC,EAAOqD,GAAI,CACrEO,KAAM,OACND,QAASuC,KACT5E,KAHE6E,SAAAA,GAAW9F,OAAAA,QAAAC,QAgBJ,SAAUT,EAAYO,EAAQQ,GAAc,IACzD,IAAyBZ,EAAWH,EAAXG,OAIvB,OAAAK,QAAAC,QAJkCT,EAA9BN,OAMiB4B,KAAKyB,QAAQyC,KAAKpD,OAAOjC,EAAOqD,GALzC,CACZ+C,aAFkCvG,EAAtBE,UAEYsD,GACxBzC,aAA8B,MAAhBA,EAAuBA,EAAe,MAGaU,KAA/DqD,SAAAA,GACK,OAAAtE,QAAAC,QACaoE,EAAQ1E,EAAQ2E,EAAK9E,IAAWyB,KAAA,SAAlDsD,GAGJ,IAAIyB,EAAQ9D,EACRqC,WAAAA,GAAqB,cAArBA,EAAU3B,cAAsB5C,QAAAC,QAClBgD,EAAiBzD,EAAY,IAAEyB,KAAA,SAAAgF,GAA/CD,EAAOC,CAAyC,GAAApF,IAAAA,gBAClB,oBAArB0D,EAAU3B,OAA4B,OAAA5C,QAAAC,iBDzCpBsE,EAAW5E,EAAQ2E,EAAM9E,EAAYO,GAAQ,IAAA,IAAAmC,EAAA,WAAAlC,OAAAA,QAAAC,QAqBxDf,EAAO4B,KAAKyB,QAAQyC,KAAKkB,kBAC3CvG,EAAOqD,GAAIsB,EAAItB,GAAI,CAAEmD,aAAcC,KAAcnF,KAD9CoF,SAAAA,UAAMrG,QAAAC,QAIeoE,EAAQ1E,EAAQ0G,EAAQ7G,GAAW,EAAA,EAxBvDN,EAAgBM,EAAhBN,OACCoH,EADe9G,EAATK,MACNyG,aAKDF,EAAc,GAAGzE,EA+IhB,SAAgB4E,EAAQnE,EAAMoE,GACpC,GAAuC,mBAA5BD,EAAMd,GAAkC,CAClD,IAA0CgB,EAAM5C,EAAM9B,EAAlD4D,EAAWY,EAAMd,KAwBrB,GAvBA,SAASiB,EAAOpE,GACf,IACC,OAASmE,EAAOd,EAASgB,QAAQnC,MAEhC,IADAlC,EAASF,EAAKqE,EAAK/C,SACLpB,EAAOrB,KAAM,CAC1B,IAAI0D,EAAerC,GAIlB,YADAA,EAAOrB,KAAKyF,EAAQ3E,IAAWA,EAAS6B,EAAQM,KAAK,KAAML,EAAO,IAAAG,EAAa,KAF/E1B,EAASA,EAAO6B,CAKlB,CAEGN,EACHD,EAAQC,EAAM,EAAGvB,GAEjBuB,EAAOvB,CAET,CAAE,MAAOR,GACR8B,EAAQC,IAASA,EAAO,IAAAG,GAAc,EAAGlC,EAC1C,CACD,CACA4E,GACIf,EAASiB,OAAQ,CACpB,IAAIC,EAAS,SAASnD,GACrB,IACM+C,EAAKjC,MACTmB,EAASiB,QAEX,CAAE,MAAM9E,GAER,CAAA,OAAO4B,CACR,EACA,GAAIG,GAAQA,EAAK5C,KAChB,OAAO4C,EAAK5C,KAAK4F,EAAQ,SAAS/E,GACjC,MAAM+E,EAAO/E,EACd,GAED+E,GACD,CACA,OAAOhD,CACR,CAEA,KAAM,WAAY0C,GACjB,MAAM,IAAIO,UAAU,0BAIrB,IADA,IAAIC,EAAS,GACJ3D,EAAI,EAAGA,EAAImD,EAAOlD,OAAQD,IAClC2D,EAAOvD,KAAK+C,EAAOnD,IAEpB,OA5GM,SAAgB4D,EAAO5E,EAAMoE,GACnC,IAAY3C,EAAM9B,EAAdqB,GAAK,EAwBT,OAvBA,SAASsD,EAAOpE,GACf,IACC,OAASc,EAAI4D,EAAM3D,QAElB,IADAf,EAASF,EAAKgB,KACAd,EAAOrB,KAAM,CAC1B,IAAI0D,EAAerC,GAIlB,YADAA,EAAOrB,KAAKyF,EAAQ3E,IAAWA,EAAS6B,EAAQM,KAAK,KAAML,EAAO,IAAIG,EAAS,KAF/E1B,EAASA,EAAO6B,CAKlB,CAEGN,EACHD,EAAQC,EAAM,EAAGvB,GAEjBuB,EAAOvB,CAET,CAAE,MAAOR,GACR8B,EAAQC,IAASA,EAAO,IAAIG,GAAU,EAAGlC,EAC1C,CACD,CACA4E,GACO7C,CACR,CAkFQoD,CAAOF,EAAQ,SAAS3D,GAAK,OAAOhB,EAAK2E,EAAO3D,GAAK,EAC7D,CAtMuB8D,CAFC3C,EAAU4C,gBAAgBC,oBAAoBC,WAGlC,SAAzBC,GACP,IAAIC,EAAeD,WAAgBhH,KACnCI,QAAQC,IAAI,uBAAwB4G,GACpC,IAAIC,EAASC,KAAKC,MAAMJ,EAAM,SAAUK,WAC/B,OAAA3H,QAAAC,QACYqG,EAAaiB,GAAcC,EAAQzH,EAAQP,IAAWyB,KAAvE2G,SAAAA,GAEJxB,EAAY5C,KAAK,CACfqE,aAAcP,EAAOtE,GACrBG,OAAQsE,KAAKK,UAAUF,IACtB,EACN,GAAC,OAAA5H,QAAAC,QAAA0B,GAAAA,EAAAV,KAAAU,EAAAV,KAAAiB,GAAAA,IASF,CAAC,MAAAJ,GAAA,OAAA9B,QAAA+B,OAAAD,EAAA,CAAA,CCciBqF,CAAgB5C,EAAW5E,EAAQ2E,EAAK9E,EAAYO,IAAOkB,KAArE8G,SAAAA,UAAC/H,QAAAC,QACWgD,EAAiBzD,EAAY,IAAEyB,KAAA,SAAA+G,GAA/ChC,EAAOgC,CAAyC,EAEhDhC,GAAAA,EAAU,CAAC,CAAEzB,UAAWA,EAAU3B,QAAU/B,IAAAA,OAAAA,GAAAA,EAAAI,KAAAJ,EAAAI,KAAA,WAAA,QAAAJ,CAAA,CAN1C0D,GAM0C,OAAArC,GAAAA,EAAAjB,KAAAiB,EAAAjB,KAAA,WAE9C,OAAO+E,CAAQ,GAARA,CAAO,EAChB,EAAA,CAAC,MAAAlE,GAAA9B,OAAAA,QAAA+B,OAAAD,EAAA,CAAA,CAlCiBmG,CAAUzI,EAAYO,EAAQQ,GAAa,EAqhB5D,CAAE,MAAMuB,GACP,OAAOO,EAAQP,EAChB,CACA,OAAIQ,GAAUA,EAAOrB,KACbqB,EAAOrB,UAAK,EAAQoB,GAErBC,CACR,CAniBwDI,CAAA,EASrD,SAAQC,GAOP,MAJAjC,QAAQC,IACMgC,YAAAA,EAAMC,OAAM,4CAE1BlC,QAAQC,IAAIgC,GACN,IAAIE,MAAM,uEAClB,GACF,CAAC,MAAAf,GAAA9B,OAAAA,QAAA+B,OAAAD,EAAA,CAAA,EC/BcoG,EAAA,SAAeC,EAAaC,GAAS,IAElD,OADA1H,QAAQC,IAAI,qBACZX,QAAAC,SAAO,EACT,CAAC,MAAA6B,GAAA,OAAA9B,QAAA+B,OAAAD,EACD,CAAA,ECHeuG,EAAW,SAAC7I,EAAY8B,GAAO,IACV,OAAAtB,QAAAC,QAAXT,EAAlBN,OACyB4B,KAAKyB,QAAQW,SAAS9B,KAD7B5B,EAAVG,OACmDqD,GAAI,CAAC1B,MAAMA,KAAOL,KAA5EiC,SAAAA,GAMN,OAJaA,EAAS1B,KAAK8G,IAAI,SAACC,GAC9B,IAAIjF,EAAUiF,EAAEjF,QAAQ,GACxB,MAAO,CAACN,GAAIuF,EAAEvF,GAAIO,KAAMgF,EAAEhF,KAAME,KAAMH,EAAQG,KAAMH,QAASA,EAAQA,EAAQG,MAAMC,MACrF,EACc,EAEhB,CAAC,MAAA5B,GAAA9B,OAAAA,QAAA+B,OAAAD,EACD,CAAA,EClBe0G,EAAU,SAACC,EAAWC,EAASlJ,GAAU,IACtD,IAAMN,EAAsBM,EAAtBN,OAAQQ,EAAcF,EAAdE,UAAyB,OAAAM,QAAAC,QAGlBf,EAAOyJ,MAAM/G,OAAO,CACvCgH,KAAMH,EACNC,QAASA,KAASzH,cAFd4H,GAGNnI,QAAQC,IAAI,0BAA2BkI,GAGvC,IAAIC,EAAiB,GAAGC,OAAOrJ,EAAUsJ,UACzCF,EAAetF,KAAKqF,EAAO7F,IAC3BtC,QAAQC,IAAImI,GACH,IAAAnH,EA+hBJ,SAAgBS,EAAMC,GAC5B,IACC,IAAIC,EAhiBAtC,QAAAC,QACuBf,EAAO4B,KAAKC,WAAWkI,OAAOvJ,EAAUsD,GAC/D,CACAgG,SAAUF,KACR7H,KAHAL,SAAAA,GAIJpB,EAAWE,UAAYkB,EAEvBF,QAAQC,IAAI,0BAA2BC,EAAc,EA0hBxD,CAAE,MAAMkB,GACP,OAAOO,EAAQP,EAChB,CACA,OAAIQ,GAAUA,EAAOrB,KACbqB,EAAOrB,UAAK,EAAQoB,GAErBC,CACR,CAziBWI,CAAA,EASAZ,SAAAA,GACPpB,QAAQC,IAAImB,EACd,GAAC,OAAAH,GAAAA,EAAAV,KAAAU,EAAAV,KACD,WAAA,OAAO6H,CAAe,GAAfA,CAAc,EACvB,CAAC,MAAAhH,GAAA,OAAA9B,QAAA+B,OAAAD,EAAA,CAAA"}