import t from"openai";import{OpenAIClient as a,OpenAIKeyCredential as e}from"@azure/openai";async function s(t,a,e,s){let n=null;if(!0===s&&"0"!=a)try{n=await t.beta.threads.retrieve(a)}catch(t){console.log(t),console.log(t.status),console.log(`Error status ${t.status}. Unable to retrieve the thread ${thread_id}`)}return null==n&&(console.log("Creating new thread"),n=await t.beta.threads.create({metadata:{assistanceName:e.name}}),e=await t.beta.assistants.update(e.id,{metadata:{thread_id:n.id,lastRunId:"0"}})),{thread:n,assistant:e}}async function n(n){let{provider:i,assistantName:o,credentials:r}=n,l="openai"===i?r.openaiKey:r.azureaiKey,d=r.azureaiEndpoint,u="openai"===i?new t({apiKey:l}):new a(d,new e(l)),c=(await u.beta.assistants.list({order:"desc",limit:"100"})).data.find(t=>{if(t.name===o)return t}),h=null==c?await async function(t,a){let{assistantName:e,instructions:n,model:i,specs:o,reuseThread:r}=a,l={name:e,instructions:n,model:i,tools:o.tools,metadata:{thread_id:"0",lastRunId:"0"}},d=await t.beta.assistants.create(l);console.log("-----------------------------------"),console.log("New Assistant: ",e,d.id);let u=await s(t,a.threadid,d,r);return console.log("Thread ID: ",u.thread.id),console.log("-----------------------------------"),{openai:t,assistant:u.assistant,thread:u.thread,threadid:u.thread.id,specs:o}}(u,n):await async function(t,a,e){let{reuseThread:n}=e;console.log("Using Existing Assistant: ",a.name,a.id);let i=a.metadata.thread_id;"0"!==e.threadid&&(i=e.threadid),console.log("Associated thread_id: ",i);let o=await s(t,i,a,n);return{openai:t,assistant:o.assistant,thread:o.thread,threadid:o.thread.id,specs:e.specs}}(u,c,n);return h}async function i(t,a,e){let s=(await t.beta.threads.messages.list(a.id,{limit:e})).data[0].content[0];return s[s.type].value}async function o(t,a,e){let{openai:s,assistant:n}=e,i=null,o=null;function r(t){return new Promise(a=>setTimeout(a,t))}do{o=await s.beta.threads.runs.retrieve(t.id,a.id),console.log("-------------------",o.status),"queued"!==o.status&&"in_progress"!==o.status&&"cancelling"!==o.status?i=o.status:await r(2e3)}while(null===i);let l=await s.beta.assistants.update(n.id,{metadata:{thread_id:t.id,lastRunId:a.id}});return e.assistant=l,o}async function r(t,a,e,s){let{openai:n,assistant:r,thread:l}=a,d=null,u=null;try{u=await n.beta.threads.messages.create(l.id,{role:"user",content:t})}catch(t){if(console.log(`status = ${t.status}. Unable to add the prompt to the thread`),console.log("will try to cancel the last run"),console.log(t),400===t.status&&"0"!==r.metadata.lastRunId)try{d=await n.beta.threads.runs.cancel(l.id,r.metadata.lastRunId),r=await n.beta.assistants.update(r.id,{metadata:{thread_id:l.id,lastRunId:d.id}}),a.assistant=r,console.log("Cancelled the last run")}catch(t){console.log("Unable to cancel the last run"),console.log(t)}else await n.beta.threads.del(l.id),l=await n.beta.threads.create({metadata:{assistanceName:r.name,lastRunId:"0"}}),a.thread=l,console.log("Deleted old thread and created a new one")}u=await n.beta.threads.messages.create(l.id,{role:"user",content:t});let c={assistant_id:r.id,instructions:null!=s?s:""};d=await n.beta.threads.runs.create(l.id,c);let h=await o(l,d,a);return"completed"===h.status?await i(n,l,1):"requires_action"===h.status?(await async function(t,a,e,s,n){let{openai:i,specs:r}=s,{functionList:l}=r,d=t.required_action.submit_tool_outputs.tool_calls,u=[];for(let t of d){let a=t.function.name;console.log("Requested function: ",a);let e=JSON.parse(t.function.arguments),i=await l[a](e,n,s);u.push({tool_call_id:t.id,output:JSON.stringify(i)})}let c=await i.beta.threads.runs.submitToolOutputs(a.id,e.id,{tool_outputs:u});return await o(a,c,s)}(h,l,d,a,e),await i(n,l,1)):{runStatus:h.status}}async function l(t,a){return!0}export{l as closeAssistant,r as runAssistant,n as setupAssistant};
//# sourceMappingURL=index.modern.js.map
