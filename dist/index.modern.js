import t from"openai";import{AssistantsClient as e,AzureKeyCredential as s}from"@azure/openai-assistants";import a from"@sassoftware/restafedit";import n from"@sassoftware/restaflib";import r from"@sassoftware/restaf";function i(t,e){let s={},a="cas"===e?"caslib":"libref",n=t.split(".");return 2===n.length?(s[a]=n[0],s.name=n[1],s):null}function o(t){if(0===t.length)return"";let e=Object.keys(t[0]).join(",")+"\n",s="";return t.map(t=>{let e="",a="";Object.values(t).map(t=>{e=e+a+function(t){let e;return e="."==t||null==t?"":"string"==typeof t?(t=t.replace(/"/g,'""')).trim():t.toString(),e}(t),a=","}),s=s+e+"\n"}),e+s}const{caslRun:l,computeRun:u,computeResults:c}=n,{getLibraryList:d,getTableList:m}=a;async function f(t,e){let{resource:s,limit:a}=t,n=e.store;if(a=null==a?10:a,!1===["files","folders","reports"].includes(s.toLowerCase()))return`{Error: "resource ${s} is not supported at this time"}`;let r=(await n.addServices(s))[s],i={qs:{limit:a,start:0}},o=(await n.apiCall(r.links(s),i)).itemsList().toJS();return JSON.stringify(o)}async function h(t,e){let{limit:s,start:a}=t,n={qs:{limit:null==s?10:s,start:null==a?0:a}};console.log("payload",n);let r=await d(e,n);return console.log(r),JSON.stringify(r)}async function b(t,e){let{library:s,limit:a}=t,n={qs:{limit:null==a?10:a,start:0}},r=await m(s,e,n);return JSON.stringify(r)}async function y(t,e){let{table:s}=t,{source:a}=e;if(null===i(s,a))return"Table must be specified in the form casuser.cars or sashelp.cars";let n=await m(library,e,p);return JSON.stringify(n)}async function g(t,e){let s=await v(t,e);return JSON.stringify({table:s.table,data:s.data})}async function w(t,e){let{src:s}=t,{store:a,session:n}=e;if("cas"===e.source){let t=await l(a,n,s,{},!0);return JSON.stringify(t.results)}{let t=await u(a,n,s);return function(t){let e=[];return t.map(t=>{let s=t.line.replace(/(\r\n|\n|\r)/gm,"");e.push(0===s.length?"   ":s)}),e}(await c(a,t,"log"))}}async function S(t){let{keywords:e,format:s}=t;switch(console.log("keywords",e,s),s){case"html":{let t="<ul>";return e.split(",").forEach(e=>{t+=`<li>${e}</li>`}),t+="</ul>",t}case"array":return e.split(",");case"object":{let t={};return e.split(",").forEach((e,s)=>{t[`key${s}`]=e}),t}default:return t}}async function A(t,e){let s=await v(t,e);return JSON.stringify(s)}async function v(t,e){let{table:s,limit:n,format:r,where:l,csv:u}=t,{source:c,sessionID:d}=e;u=null!=u&&u,console.log(t);let p=i(s,c);if(null===p)return"Table must be specified in the form casuser.cars or sashelp.cars";let m={source:c,table:p,casServerName:e.casServerName,computeContext:e.computeContext,initialFetch:{qs:{start:0,limit:null==n?2:n,format:null!=r&&r,where:null==l?"":l}}},f=await a.setup(e.logonPayload,m,d),h={};try{await a.scrollTable("first",f),h={table:p,tableSummary:await a.getTableSummary(f),columns:f.state.columns,data:!1===u?f.state.data:o(f.state.data)}}catch(t){console.log(t),h={error:t}}return h}const T={name:"_getData",description:"Fetch data from a  table like casuser.cars.\n                To limit the number of rows, specify the limit parameter.\n                If format is true, then the data will be formatted.\n                Use standard where clause to filter the data.\n                To return data in csv format, specify csv = true. Default is false.",parameters:{properties:{table:{type:"string",description:"The table to setup. The form of the table is casuser.cars"},limit:{type:"integer",description:"Fetch only the specified number of rows"},format:{type:"boolean",description:"Format the string - true or false"},where:{type:"string",description:'A where clause like Make eq "Audi"'},csv:{type:"boolean",description:"Return data in csv format - true or false"}},type:"object",required:["table"]}},k={name:"_listSASObjects",description:"list SAS resources like reports, files, folders. Specify the limit parameter to limit the number of items returned",parameters:{properties:{resource:{type:"string",description:"The objecttable to setup. The form of the table is casuser.cars"},limit:{type:"integer",description:"Get this many items"}},type:"object",required:["resource","limit"]}},_={name:"_listSASDataLib",description:"list available SAS libs, calibs, librefs.\n     A example would be list libs. \n     If limit is not is specified, then the function \n     will return the first 10 libs.\n     Optionally allow user to specify the source as cas or compute.",parameters:{properties:{limit:{type:"integer",description:"Return only this many libs. If not specified, then return 10 libs."},source:{type:"string",description:"The source of the data. cas or compute",enum:["cas","compute"]}},type:"object"}},O={name:"_listSASTables",description:"for a given library, lib or caslibs get the list of available tables\n    (ex: list tables for Samples)\n    Optionally let user specify the source as cas or compute.",parameters:{properties:{library:{type:"string",description:"A SAS library like casuser, sashelp, samples"},limit:{type:"integer",description:"Return only this many tables. If not specified, then return 10 tables."},source:{type:"string",description:"The source of the data. cas or compute",enum:["cas","compute"]}},type:"object",required:["library"]}},N={name:"_listColumns",description:"Get schema or columns for specified table. Table is of the form sashelp.cars",parameters:{properties:{table:{type:"string",description:"A table like sashelp.cars"}},type:"object",required:["table"]}},R={name:"_describeTable",description:"Describe the table like sashelp.cars . return information on the table like columns, types, keys. Optionally format the data",parameters:{properties:{table:{type:"string",description:"A table like sashelp.cars"},format:{type:"boolean",description:"If true then format the data"}},type:"object",required:["table"]}},q={name:"_runSAS",description:"run the specified file. The file is a path to the sas program",parameters:{properties:{file:{type:"string",description:"this is the file to run"}},type:"object",required:["file"]}},j={name:"_keywords",description:"format a comma-separated keywords like a,b,c into html, array, object",parameters:{properties:{keywords:{type:"string",description:"A comma-separated list of keywords like a,b,c"},format:{type:"string",enum:["html","array","object"],description:"Format the string"}},type:"object",required:["keywords","format"]}};function I(t,e){const s=t=>(...e)=>{let[s]=e;return t.beta.assistants.retrieve(s)};let a=t;return"openai"===e&&(a={listAssistants:(t=>(...e)=>{let[s]=e;return t.beta.assistants.list(s)})(t),createAssistant:(t=>(...e)=>{let[s]=e;return t.beta.assistants.create(s)})(t),getAssistant:s(t),deleteAssistant:s(t),updateAssistant:(t=>(...e)=>{let[s,a]=e;return t.beta.assistants.update(s,a)})(t),createThread:(t=>(...e)=>{let[s]=e;return null==s&&(s={}),t.beta.threads.create(s)})(t),getThread:(t=>(...e)=>{let[s]=e;return t.beta.threads.retrieve(s)})(t),deleteThread:(t=>(...e)=>{let[s]=e;return t.beta.threads.del(s)})(t),createMessage:(t=>(...e)=>{let[s,a,n]=e;return t.beta.threads.messages.create(s,{role:a,content:n})})(t),listMessages:(t=>(...e)=>{let[s,a]=e;return console.log(s,a),t.beta.threads.messages.list(s,a)})(t),createRun:(t=>(...e)=>{let[s,a]=e;return t.beta.threads.runs.create(s,{assistant_id:a.assistantId,instructions:a.instructions})})(t),getRun:(t=>(...e)=>{let[s,a]=e;return t.beta.threads.runs.retrieve(s,a)})(t),listRuns:(t=>(...e)=>{let[s]=e;return t.beta.threads.runs.list(s)})(t),cancelRun:(t=>(...e)=>{let[s,a]=e;return t.beta.threads.runs.cancel(s,a)})(t),submitToolOutputsToRun:(t=>(...e)=>{let[s,a,n]=e;return t.beta.threads.runs.submitToolOutputs(s,a,n)})(t)}),a}async function D(a){let{credentials:i}=a,{key:o,endPoint:l}=i,u=null;u="openai"===a.provider?new t({apiKey:o,dangerouslyAllowBrowser:!0}):new e(l,new s(o,{}));let c=function(t){let e=[k,_,O,N,R,T,q,j],s=[{type:"code_interpreter"}];return"openai"===t&&s.push({type:"retrieval"}),e.forEach(t=>{let e={type:"function",function:Object.assign({},t)};s.push(e)}),{specs:e,tools:s,functionList:{_getData:g,_listSASObjects:f,_listSASTables:b,_listColumns:y,_listSASDataLib:h,_runSAS:w,_keywords:S,_describeTable:A},instructions:"\n You are a Assistant designed for SAS users. You can help SAS users with their SAS related questions and provide information\n  on topics like libraries, reports, tables. You can also fetch data from tables and run SAS programs. You can also help answer questions about the \n  data that has been returned from previous queries.\n\n  If the response from a tool is of the form [{a:1,b:2},{a:1,b:3}] format the table as a html table element like this\n  '<table>\n     <tr>\n       <th>a</th> \n      <th>b</th>\n     </tr>\n    <tr>\n    <td>1</td>\n    <td>2</td>\n    </tr>\n    <tr>\n   <td>2</td>\n   <td>3</td>\n   </tr>\n   </table>' \n  \n  if the response from a tool is of the form [1,2,3] then return the data as a html unodered list to the user.\n  You can also allow users to attach files to the assistant. \n\n  "}}(a.provider),d={};d=!0===a.domainTools.replace?a.domainTools:{tools:a.domainTools.tools.concat(c.tools),functionList:Object.assign(a.domainTools.functionList,c.functionList),instructions:a.instructions?a.instructions+c.instructions:c.instructions};let p={provider:a.provider,model:a.model,domainTools:d,instructions:d.userInstructions,assistantName:a.assistantName,assistant:null,assistantid:a.assistantid,thread:null,threadid:a.threadid,appEnv:null,client:u,run:null,assistantApi:I(u,a.provider)};return p.appEnv=await async function(t){let e={host:null,logonPayload:null,store:null,source:"none",currentSource:"none",session:null,servers:null,serverName:null,casServerName:null,sessionID:null,compute:{},cas:{},userData:null};if(null==t)return e;if("none"==t.source)return e.userData=t.userData,e.logonPayload=t.logonPayload,e.currentSource="none",e;let{source:s,logonPayload:a}=t,i=s.split(",")[0];e.currentSource=i,e.host=a.host;let o=r.initStore({casProxy:!0});if(await o.logon(a),e.host=a.host,e.logonPayload=a,e.store=o,s.indexOf("cas")>=0){let{session:t,servers:s}=await n.casSetup(o,null),a=t.links("execute","link","server");e.cas={session:t,servers:s,casServerName:a};let r=await o.apiCall(t.links("self"));e.cas.sessionID=r.items("id"),"cas"===i&&(e.source="cas",e.session=t,e.servers=s,e.serverName=a,e.casServerName=a,e.sessionID=e.cas.sessionID)}if(s.indexOf("compute")>0){e.compute={servers:null};let t=await n.computeSetup(o),s=await o.apiCall(e.session.links("self"));e.compute.sessionID=s.items("id"),"compute"===i&&(e.source="compute",e.session=t,e.servers=null,e.serverName=null,e.sessionID=e.compute.sessionID)}return console.log(e),e}(a.viyaConfig),p.assistant=await async function(t){let{assistantName:e,model:s,assistantid:a,instructions:n,domainTools:r,assistantApi:i}=t,o={name:e,instructions:n,model:s,tools:r.tools},l=null;return 0==("0"===a||null==a)?l=await i.getAssistant(a):null!=e&&(l=(await i.listAssistants({order:"desc",limit:"100"})).data.find(t=>{if(t.name===e)return t}),null==l&&(console.log("Creating new assistant"),l=await i.createAssistant(o))),t.assistantid=l.id,t.assistant=l,l}(p),p.thread=await async function(t){let{assistant:e,assistantApi:s}=t,a=null,n=t.threadid;try{if("-1"===n&&(n=e.metadata.lastThread),"0"===n||null==n){console.log("Creating new thread"),a=await s.createThread();let n=await s.updateAssistant(e.id,{metadata:{lastThread:a.id}});t.assistant=n}else a=await s.getThread(n)}catch(t){throw console.log(t),new Error(`Error status ${t.status}. Failed to create thread. See console for details.`)}return a}(p),p.threadid=p.thread.id,p}async function C(t,e){let{thread:s,assistantApi:a}=t;const n=await a.listMessages(s.id,{limit:e});let r=[],i=n.data;for(let t=0;t<n.data.length;t++){let e=i[t].content[0];if("assistant"!==i[t].role)break;r.push({id:i[t].id,role:i[t].role,type:e.type,content:e[e.type].value})}return r.length>1&&(r=r.reverse()),r}async function J(t,e){let{assistantApi:s,thread:a}=e,n=null,r=null;function i(t){return new Promise(e=>setTimeout(e,t))}do{r=await s.getRun(a.id,t.id),console.log("-------------------",r.status),"queued"!==r.status&&"in_progress"!==r.status&&"cancelling"!==r.status?n=r.status:(await i(2e3),console.log("waited 2000 ms"))}while(null===n);return r}function L(t,e,s){return"openai"===s?{tool_call_id:t,output:JSON.stringify(e)}:{toolCallId:t,output:JSON.stringify(e)}}async function E(t,e,s){let{thread:a,assistantApi:n}=t;try{await n.createMessage(a.id,"user",e)}catch(t){return console.log(t.status),console.log(t.error),JSON.stringify(t.error)}let r=await async function(t,e,s){let{assistantApi:a,assistant:n,thread:r}=t,i={assistantId:n.id,instructions:null!=s?s:""},o=await a.createRun(r.id,i);t.run=o;let l,u=await J(o,t);return"completed"===u.status?l=await C(t,5):"requires_action"===u.status?(await async function(t,e){let{assistantApi:s,appEnv:a,domainTools:n,provider:r,thread:i,run:o}=e,{functionList:l}=n,u="openai"===r?t.required_action.submit_tool_outputs.tool_calls:t.requiredAction.submitToolOutputs.toolCalls,c=[];for(let t of u){let s=t.function.name;console.log("Requested function: ",s);let n=JSON.parse(t.function.arguments);if(null==l[s])c.push(L(t.id,`Function ${s} not found. \n      Probable causes: \n        Using thread that had outdated tool references.\n        Currrent specs point has mistmatch with function name\n        `,r));else try{let i=await l[s](n,a,e);console.log("Response from function: ",i),c.push("openai"===r?{tool_call_id:t.id,output:JSON.stringify(i)}:{toolCallId:t.id,output:JSON.stringify(i)})}catch(e){c.push(L(t.id,e,r))}}console.log("Adding output to messages"),console.log("toolsOutput",c),console.log(r),console.log(c);let d="openai"===r?await s.submitToolOutputsToRun(i.id,o.id,{tool_outputs:c}):await s.submitToolOutputsToRun(i.id,o.id,c);return await J(d,e)}(u,t),console.log("getting latest message "),l=await C(t,5)):l=[{runStatus:u.status}],l}(t,0,s);return r}async function P(t,e){console.log("in closeAssistant");let{assistantApi:s}=t,a=e||t.assistant.id;if(null!=a)return await s.deleteAssistant(a)}async function x(t,e){let{thread:s,assistantApi:a}=t;return(await a.listMessages(s.id,{limit:e})).data.map(t=>{let e=t.content[0];return{id:t.id,role:t.role,type:e.type,content:e[e.type].value}})}async function $(t,e,s){let{client:a,assistant:n}=s;const r=await a.files.create({file:t,purpose:e});console.log(".......................",r);let i=[].concat(n.file_ids);i.push(r.id),console.log(i);try{let t=await a.beta.assistants.update(n.id,{file_ids:i});s.assistant=t,console.log(".......................",t)}catch(t){console.log(t)}return i}async function F(t,e,s){let{assistantApi:a,thread:n,run:r}=t;if(null!=e||null!=s)try{return console.log("Cancelling run",e,s),await a.cancelRun(e,s)}catch(t){return console.log("Error cancelling the run ",t,e,s),null}if(null===r||null===n)return console.log("No run or thread to cancel"),null;let i=null;try{let t=await a.getRun(n.id,r.id);if(console.log(t),null!==t.completed||"cancelling"===t.status)return console.log(`Run ${r.id} status: ${t.status} , completed: ${t.completed}`),null;i=await a.cancelRun(n.id,r.id)}catch(t){console.log("Error cancelling the run",t)}return i}export{F as cancelRun,P as deleteAssistant,C as getLatestMessage,x as getMessages,E as runAssistant,D as setupAssistant,$ as uploadFile};
//# sourceMappingURL=index.modern.js.map
