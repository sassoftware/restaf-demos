import t from"openai";import e from"@sassoftware/restafedit";import s from"@sassoftware/restaflib";import a from"@sassoftware/restaf";function i(t,e){let s={},a="cas"===e?"caslib":"libref",i=t.split(".");return 2===i.length?(s[a]=i[0],s.name=i[1],s):null}function r(t){if(0===t.length)return"";let e=Object.keys(t[0]).join(",")+"\n",s="";return t.map(t=>{let e="",a="";Object.values(t).map(t=>{e=e+a+function(t){let e;return e="."==t||null==t?"":"string"==typeof t?(t=t.replace(/"/g,'""')).trim():t.toString(),e}(t),a=","}),s=s+e+"\n"}),e+s}const{caslRun:n,computeRun:o,computeResults:l}=s,{getLibraryList:u}=e;async function c(t,e){let{resource:s,limit:a}=t,i=e.store;if(a=null==a?10:a,!1===["files","folders","reports"].includes(s.toLowerCase()))return`{Error: "resource ${s} is not supported at this time"}`;let r=(await i.addServices(s))[s],n={qs:{limit:a,start:0}},o=(await i.apiCall(r.links(s),n)).itemsList().toJS();return JSON.stringify(o)}async function d(t,e){let s=await u(e);return JSON.stringify(s)}async function p(t,e){let{library:s,limit:a}=t,i={qs:{limit:null==a?10:a,start:0}},r=await _getTableList(s,e,i);return JSON.stringify(r)}async function m(t,e){let{table:s}=t,{source:a}=e,r=i(s,a);if(null===r)return"Table must be specified in the form casuser.cars or sashelp.cars";let n=await _getTableColumns(a,r,e);return JSON.stringify(n)}async function f(t,e){let s=await idescribeTable(t,e);return JSON.stringify({table:s.table,data:s.data})}async function h(t,e){let{src:s}=t,{store:a,session:i}=e;if("cas"===e.source){let t=await n(a,i,s,{},!0);return JSON.stringify(t.results)}{let t=await o(a,i,s);return function(t){let e=[];return t.map(t=>{let s=t.line.replace(/(\r\n|\n|\r)/gm,"");e.push(0===s.length?"   ":s)}),e}(await l(a,t,"log"))}}async function b(t){let{keywords:e,format:s}=t;switch(s){case"html":{let t="<ul>";return e.split(",").forEach(e=>{t+=`<li>${e}</li>`}),t+="</ul>",t}case"array":return e.split(",");case"object":{let t={};return e.split(",").forEach((e,s)=>{t[`key${s}`]=e}),t}default:return t}}async function y(t,s){let a=await async function(t,s){let{table:a,limit:n,format:o,where:l,csv:u}=t,{source:c,sessionID:d}=s;u=null!=u&&u,console.log(t);let p=i(a,c);if(null===p)return"Table must be specified in the form casuser.cars or sashelp.cars";let m={source:c,table:p,casServerName:s.casServerName,computeContext:s.computeContext,initialFetch:{qs:{start:0,limit:null==n?2:n,format:null!=o&&o,where:null==l?"":l}}},f=await e.setup(s.logonPayload,m,d),h={};try{await e.scrollTable("first",f),h={table:p,tableSummary:await e.getTableSummary(f),columns:f.state.columns,data:!1===u?f.state.data:r(f.state.data)}}catch(t){console.log(t),h={error:t}}return h}(t,s);return JSON.stringify(a)}const g={name:"_getData",description:"Fetch data from a  table like casuser.cars.\n                To limit the number of rows, specify the limit parameter.\n                If format is true, then the data will be formatted.\n                Use standard where clause to filter the data.\n                To return data in csv format, specify csv = true. Default is false.",parameters:{properties:{table:{type:"string",description:"The table to setup. The form of the table is casuser.cars"},limit:{type:"integer",description:"Fetch only the specified number of rows"},format:{type:"boolean",description:"Format the string - true or false"},where:{type:"string",description:'A where clause like Make eq "Audi"'},csv:{type:"boolean",description:"Return data in csv format - true or false"}},type:"object",required:["table"]}},w={name:"_listSASObjects",description:"list SAS resources like reports, files, folders. Specify the limit parameter to limit the number of items returned",parameters:{properties:{resource:{type:"string",description:"The objecttable to setup. The form of the table is casuser.cars"},limit:{type:"integer",description:"Get this many items"}},type:"object",required:["resource","limit"]}},S={name:"_listSASDataLib",description:"list available SAS libs, calibs, librefs. A example would be list libs. If limit is not is specified, then the function will return the first 10 libs",parameters:{properties:{limit:{type:"integer",description:"Return only this many libs. If not specified, then return 10 libs."}},type:"object"}},v={name:"_listSASTables",description:"for a given library, lib , caslibs get the list available tables(ex: list tables for Samples)",parameters:{properties:{library:{type:"string",description:"A SAS library like casuser, sashelp, samples"},limit:{type:"integer",description:"Return only this many tables. If not specified, then return 10 tables."}},type:"object",required:["library","limit"]}},T={name:"_listColumns",description:"Get schema or columns for specified table. Table is of the form sashelp.cars",parameters:{properties:{table:{type:"string",description:"A table like sashelp.cars"}},type:"object",required:["table"]}},A={name:"_describeTable",description:"Describe the table like sashelp.cars . return information on the table like columns, types, keys. Optionally format the data",parameters:{properties:{table:{type:"string",description:"A table like sashelp.cars"},format:{type:"boolean",description:"If true then format the data"}},type:"object",required:["table"]}},_={name:"_runSAS",description:"run the specified file. The file is a path to the sas program",parameters:{properties:{file:{type:"string",description:"this is the file to run"}},type:"object",required:["file"]}},k={name:"_keywords",description:"format a comma-separated keywords like a,b,c into html, array, object",parameters:{properties:{keywords:{type:"string",description:"A comma-separated list of keywords like a,b,c"},format:{type:"string",enum:["html","array","object"],description:"Format the string"}},type:"object",required:["keywords","format"]}};function O(t,e){return"openai"===e?{listAssistants:t.beta.assistants.list.bind(null),getAssistant:t.beta.assistants.retrieve,createAssistant:t.beta.assistants.create,listMessages:t.beta.assistants.listMessages,createThread:t.beta.threads.createThread,getThread:t.beta.threads.retrieveThread,getRun:null,submitToolOutputsToRun:t.beta.assistants.submitToolOutputs}:"azureai"===e?{listAssistants:t.listAssistants,getAssistant:t.getAssistant,createAssistant:t.createAssistant,listMessages:t.listMessages,createThread:t.createThread,getThread:t.getThread,getRun:t.getRun,submitToolOutputsToRun:t.submitToolOutputsToRun}:void 0}async function N(e){let{credentials:i}=e,{key:r}=i,n=new t({apiKey:r,dangerouslyAllowBrowser:!0}),o=function(t){let e=[w,S,v,T,A,g,_,k],s=[{type:"retrieval"}];return s.push({type:"retrieval"}),e.forEach(t=>{let e={type:"function",function:Object.assign({},t)};s.push(e)}),{specs:e,tools:s,functionList:{_getData:f,_listSASObjects:c,_listSASTables:p,_listColumns:m,_listSASDataLib:d,_runSAS:h,_keywords:b,_describeTable:y},instructions:"\n You are a Assistant designed for SAS users. You can help SAS users with their SAS related questions and provide information\n  on topics like libraries, reports, tables. You can also fetch data from tables and run SAS programs. You can also help answer questions about the \n  data that has been returned from previous queries.\n\n  If the response from a tool is of the form [{a:1,b:2},{a:1,b:3}] format the table as a html table element like this\n  '<table>\n     <tr>\n       <th>a</th> \n      <th>b</th>\n     </tr>\n    <tr>\n    <td>1</td>\n    <td>2</td>\n    </tr>\n    <tr>\n   <td>2</td>\n   <td>3</td>\n   </tr>\n   </table>' \n  \n  if the response from a tool is of the form [1,2,3] then return the data as a html unodered list to the user.\n  You can also allow users to attach files to the assistant. \n\n  "}}(),l=e.domainTools.tools.concat(o.tools),u=Object.assign(e.domainTools.functionList,o.functionList),N={provider:e.provider,model:e.model,assistant:null,thread:null,client:n,assistantName:e.assistantName,assistantid:e.assistantid,threadid:"0",domainSpecs:{tools:l,functionList:u},instructions:e.instructions?e.instructions+o.instructions:o.instructions,appEnv:null,api:O(n,e.provider)};return N.appEnv=await async function(t){let e={host:null,logonPayload:null,store:null,source:"none",currentSource:i,session:null,servers:null,serverName:null,casServerName:null,sessionID:null,compute:{},cas:{},userData:null};if(null==t)return e;if("none"==t.source)return e.userData=t.userData,e;let{source:i,logonPayload:r}=t;e.host=r.host;let n=i.split(",")[0],o=a.initStore({casProxy:!0});if(await o.logon(r),e.host=r.host,e.logonPayload=r,e.store=o,i.indexOf("cas")>=0){let{session:t,servers:a}=await s.casSetup(o,null),i=t.links("execute","link","server");e.cas={session:t,servers:a,casServerName:i};let r=await o.apiCall(t.links("self"));e.cas.sessionID=r.items("id"),"cas"===n&&(e.source="cas",e.session=t,e.servers=a,e.serverName=i,e.casServerName=i,e.sessionID=e.cas.sessionID)}if(i.indexOf("compute")>0){e.compute={servers:null};let t=await s.computeSetup(o),a=await o.apiCall(e.session.links("self"));e.compute.sessionID=a.items("id"),"compute"===n&&(e.source="compute",e.session=t,e.servers=null,e.serverName=null,e.sessionID=e.compute.sessionID)}return console.log(e),e}(e.viyaConfig),N.assistant=await async function(t,e){let{assistantName:s,model:a,assistantid:i,instructions:r,domainSpecs:n,api:o}=e,l={name:s,instructions:r,model:a,tools:n.tools},u=null;return console.log(i),0==("0"===i||null==i)?u=await t.beta.assistants.retrieve(i):null!=s&&(u=(await o.listAssistants({order:"desc",limit:"100"})).data.find(t=>{if(t.name===s)return t}),null==u&&(u=await o.createAssistant(l))),e.assistantid=u.id,e.assistant=u,u}(n,N),N.thread=await async function(t,e){let s=null;try{s="0"===e||null==e?await t.beta.threads.create():await t.beta.threads.retrieve(e)}catch(t){throw console.log(t),console.log(t.status),new Error(`Error status ${t.status}. Unable to retrieve the thread ${e}. see console for details.`)}return s}(n,e.threadid),N.threadid=N.thread.id,N}async function j(t,e){let{client:s,thread:a}=t;const i=await s.beta.threads.messages.list(a.id,{limit:e});let r=[],n=i.data;for(let t=0;t<i.data.length;t++){let e=n[t].content[0];if("assistant"!==n[t].role)break;r.push({id:n[t].id,role:n[t].role,type:e.type,content:e[e.type].value})}return r.length>1&&(r=r.reverse()),r}async function q(t,e,s){let{client:a}=s,i=null,r=null;function n(t){return new Promise(e=>setTimeout(e,t))}do{r=await a.beta.threads.runs.retrieve(t.id,e.id),console.log("-------------------",r.status),"queued"!==r.status&&"in_progress"!==r.status&&"cancelling"!==r.status?i=r.status:(await n(2e3),console.log("waited 2000 ms"))}while(null===i);return r}async function D(t,e,s,a){let{client:i,thread:r}=t;try{await i.beta.threads.messages.create(r.id,{role:"user",content:e})}catch(t){throw console.log(t),new Error("Request failed on adding user message to thread.")}let n=await async function(t,e,s){let a,{client:i,assistant:r,thread:n}=t,o={assistant_id:r.id,instructions:null!=s?s:""},l=await i.beta.threads.runs.create(n.id,o),u=await q(n,l,t);return"completed"===u.status?a=await j(t,5):"requires_action"===u.status?(await async function(t,e,s,a,i){let{client:r,specs:n}=a,{functionList:o}=n,l=t.required_action.submit_tool_outputs.tool_calls,u=[];for(let t of l){let e=t.function.name;console.log("Requested function: ",e);let s=JSON.parse(t.function.arguments);try{let r=await o[e](s,i,a);u.push({tool_call_id:t.id,output:JSON.stringify(r)})}catch(e){u.push({tool_call_id:t.id,output:JSON.stringify(e)})}}console.log("Adding output to messages");let c=await r.beta.threads.runs.submitToolOutputs(e.id,s.id,{tool_outputs:u});return await q(e,c,a)}(u,n,l,t,e),console.log("getting latest message "),a=await j(t,5)):a=[{runStatus:u.status}],a}(t,a,s);return n}async function I(t,e){return console.log("in closeAssistant"),!0}async function R(t,e){let{client:s,thread:a}=t;return(await s.beta.threads.messages.list(a.id,{limit:e})).data.map(t=>{let e=t.content[0];return{id:t.id,role:t.role,type:e.type,content:e[e.type].value}})}async function L(t,e,s){let{client:a,assistant:i}=s;const r=await a.files.create({file:t,purpose:e});console.log(".......................",r);let n=[].concat(i.file_ids);n.push(r.id),console.log(n);try{let t=await a.beta.assistants.update(i.id,{file_ids:n});s.assistant=t,console.log(".......................",t)}catch(t){console.log(t)}return n}export{I as closeAssistant,j as getLatestMessage,R as getMessages,D as runAssistant,N as setupAssistant,L as uploadFile};
//# sourceMappingURL=index.modern.js.map
