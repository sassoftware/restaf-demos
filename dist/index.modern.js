import t from"openai";import{OpenAIClient as e,OpenAIKeyCredential as a}from"@azure/openai";async function n(n){let{provider:s,credentials:i}=n,{openaiKey:r,azureaiKey:o,azureaiEndpoint:l}=i,u=null;if("openai"===s){if(null==r)throw new Error("Missing OpenAI API Key");u=new t({apiKey:r,dangerouslyAllowBrowser:!0})}else{if("azureai"!==s)throw new Error("Invalid provider. Must be openai or azureai.");if(null==o)throw new Error("Missing Azure API Key");if(null==l)throw new Error("Missing Azure Endpoint");u=new e(endpoint,new a(o))}let d={client:u,assistant:null,thread:null,threadid:null,specs:n.domainTools,appEnv:null,config:n};return d.assistant=await async function(t,e){let{assistantName:a,assistantid:n,instructions:s,model:i,domainTools:r}=e,o={name:a,instructions:s,model:i};null!=r.tools&&(o.tools=r.tools);let l=null;return console.log(n),"0"!==n?l=await t.beta.assistants.retrieve(n):(l=(await t.beta.assistants.list({order:"desc",limit:"100"})).data.find(t=>{if(t.name===a)return t}),null==l&&(l=await t.beta.assistants.create(o))),l}(u,n),d.thread=await async function(t,e){let{threadid:a}=e,n=null;try{n="0"===a?await t.beta.threads.create({metadata:{assistantName:assistant.name}}):await t.beta.threads.retrieve(a)}catch(t){throw console.log(t),console.log(t.status),new Error(`Error status ${t.status}. Unable to retrieve the thread ${a}. see console for details.`)}return n}(u,n),d.threadid=d.thread.id,d}async function s(t,e){let{client:a,thread:n}=t;const s=await a.beta.threads.messages.list(n.id,{limit:e});let i=[],r=s.data;for(let t=0;t<s.data.length;t++){let e=r[t].content[0];if("assistant"!==r[t].role)break;i.push({id:r[t].id,role:r[t].role,type:e.type,content:e[e.type].value})}return i.length>1&&(i=i.reverse()),i}async function i(t,e,a){let{client:n}=a,s=null,i=null;function r(t){return new Promise(e=>setTimeout(e,t))}do{i=await n.beta.threads.runs.retrieve(t.id,e.id),console.log("-------------------",i.status),"queued"!==i.status&&"in_progress"!==i.status&&"cancelling"!==i.status?s=i.status:(await r(2e3),console.log("waited 2000 ms"))}while(null===s);return i}async function r(t,e,a,n){let{client:r,thread:o}=t;try{await r.beta.threads.messages.create(o.id,{role:"user",content:e});let l=await async function(t,e,a){let n,{client:r,assistant:o,thread:l}=t,u={assistant_id:o.id,instructions:null!=a?a:""},d=await r.beta.threads.runs.create(l.id,u),c=await i(l,d,t);return"completed"===c.status?n=await s(t,5):"requires_action"===c.status?(await async function(t,e,a,n,s){let{client:r,specs:o}=n,{functionList:l}=o,u=t.required_action.submit_tool_outputs.tool_calls,d=[];for(let t of u){let e=t.function.name;console.log("Requested function: ",e);let a=JSON.parse(t.function.arguments),i=await l[e](a,s,n);d.push({tool_call_id:t.id,output:JSON.stringify(i)})}let c=await r.beta.threads.runs.submitToolOutputs(e.id,a.id,{tool_outputs:d});return await i(e,c,n)}(c,l,d,t,e),n=await s(t,5)):n=[{runStatus:c.status}],n}(t,n,a);return l}catch(t){throw console.log(`status = ${t.status}. Unable to add the prompt to the thread`),console.log(t),new Error("Unable to add the prompt to the thread. See console for more details")}}async function o(t,e){return console.log("in closeAssistant"),!0}async function l(t,e){let{client:a,thread:n}=t;return(await a.beta.threads.messages.list(n.id,{limit:e})).data.map(t=>{let e=t.content[0];return{id:t.id,role:t.role,type:e.type,content:e[e.type].value}})}export{o as closeAssistant,s as getLatestMessage,l as getMessages,r as runAssistant,n as setupAssistant};
//# sourceMappingURL=index.modern.js.map
