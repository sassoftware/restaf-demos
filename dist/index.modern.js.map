{"version":3,"file":"index.modern.js","sources":["../src/setupAssistant.js","../src/createAssistant.js","../src/loadThread.js","../src/getLatestMessage.js","../src/pollRun.js","../src/runAssistant.js","../src/required_action.js","../src/closeAssistant.js","../src/getMessages.js","../src/uploadFile.js"],"sourcesContent":["/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function setupAssistant\r\n * @description   Setup the GPT Assistant\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return gptControl object}\r\n */\r\nimport OpenAI from 'openai';\r\nimport loadThread from './loadThread.js';\r\nimport createAssistant from './createAssistant.js';\r\n\r\nasync function setupAssistant(config) {\r\n  let {credentials } = config;\r\n  let {key} = credentials;\r\n  debugger;\r\n  let client = new OpenAI({ apiKey: key, dangerouslyAllowBrowser: true });\r\n  debugger;\r\n  let gptControl = {\r\n    provider: 'openai',\r\n    client: client,\r\n    assistant: null,\r\n    thread: null,\r\n    threadid: null,\r\n    specs: config.domainTools,\r\n    appEnv: null,\r\n    config: config, // save the config for runtime changes\r\n  };\r\n  // create assistant and thread\r\n  debugger;\r\n  gptControl.assistant = await createAssistant(client, config);\r\n  debugger;\r\n  gptControl.thread = await loadThread(client, config);\r\n  debugger;\r\n  gptControl.threadid = gptControl.thread.id;// just for convenience\r\n  return gptControl;\r\n}\r\nexport default setupAssistant;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @function createAssistant\r\n * @description   Create a new assistant\r\n * @param {string} client - client object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return assistant object\r\n */\r\nasync function createAssistant(client, config) {\r\n  let { assistantName, assistantid, instructions, model, domainTools } = config;\r\n\r\n  // create args for assistant create\r\n  let createArgs = {\r\n    name: assistantName,\r\n    instructions: instructions,\r\n    model: model,\r\n  };\r\n  if (domainTools.tools != null) {\r\n    createArgs.tools = domainTools.tools;\r\n  }\r\n\r\n  let assistant = null;\r\n  debugger;\r\n  console.log(assistantid);\r\n  let newAssistant = (assistantid === \"0\" || assistantid == null);\r\n  if (newAssistant == false){ \r\n    assistant = await client.beta.assistants.retrieve(assistantid);\r\n    debugger;\r\n  } else if (assistantName != null) {\r\n    // local rules: avoid creating a new assistant if one exists\r\n    // use name to find the assistant\r\n    // wish there was a way to filter on names in the API call\r\n    debugger;\r\n    const myAssistants = await client.beta.assistants.list({\r\n      order: \"desc\",\r\n      limit: \"100\", //ugh!\r\n    });\r\n    assistant = myAssistants.data.find((a) => {\r\n      if (a.name === assistantName) {\r\n        return a;\r\n      }\r\n    });\r\n    // if first time using this name, create the assistant\r\n    if (assistant == null) {\r\n      assistant = await client.beta.assistants.create(createArgs);\r\n    }\r\n  }\r\n  \r\n  debugger;\r\n  return assistant;\r\n}\r\nexport default createAssistant;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function loadThread\r\n * @description   new thread or open existing thread\r\n * @params {object} client - client object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return thread object\r\n */\r\nasync function loadThread(client, config) {\r\n  let {threadid} = config; \r\n  let thread = null;\r\n  // If we are reusing the thread, try to retrieve it\r\n  try {\r\n    thread = (threadid === '0') \r\n      ? await client.beta.threads.create({ metadata: { assistantName: assistant.name }})\r\n      : await client.beta.threads.retrieve(threadid);\r\n  } catch (error) {\r\n    console.log(error); \r\n    console.log(error.status);\r\n    throw new Error(`Error status ${error.status}. Unable to retrieve the thread ${threadid}. see console for details.`);\r\n  }\r\n  debugger;\r\n  return thread;\r\n}\r\nexport default loadThread;\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description Return the latest message from thread\r\n * @param {object}  gptControl- client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {promise} - messages - array of latest assistant messages[ {id, role, type, content}]\r\n * @notes - This function will return latest assistant messages based on limit\r\n */\r\nasync function getLatestMessage(gptControl, limit) {  \r\n  let {client, thread} = gptControl;\r\n  const messages = await client.beta.threads.messages.list(thread.id, {limit:limit});\r\n \r\n  let output = [];\r\n  let data = messages.data;\r\n  for (let i = 0; i < messages.data.length; i++){\r\n    let content = data[i].content[0];\r\n    if (data[i].role === 'assistant') {\r\n      output.push({id: data[i].id, role: data[i].role, type: content.type, content: content[content.type].value});\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  if (output.length > 1) {\r\n    output = output.reverse();\r\n  }\r\n  return output;\r\n\r\n}\r\nexport default getLatestMessage;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Poll run status since there is no streaming support\r\n * @function pollRun\r\n * @params {object} client - client object\r\n * @params {object} thread - thread object\r\n * @params {object} run - run object    \r\n * @params {object} gptControl - gpt  session control object\r\n * @returns {object} - runStatus from client.beta.threads.runs.retrieve\r\n * @notes - Will wait for completion(!(queued,in_progress, cancelling))\r\n */\r\nasync function pollRun(thread, run, gptControl) {\r\n  let { client} = gptControl;\r\n  let done = null;\r\n  let runStatus = null;\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  // Since there is no streaming support, sleep and poll the status\r\n  do {\r\n    debugger;\r\n    runStatus = await client.beta.threads.runs.retrieve(thread.id, run.id);\r\n    \r\n    console.log(\"-------------------\", runStatus.status);\r\n    if ( !(runStatus.status === \"queued\" ||runStatus.status === \"in_progress\" ||\r\n          runStatus.status === \"cancelling\")) {\r\n      debugger;\r\n      done = runStatus.status;\r\n    } else {\r\n      await sleep(2000);\r\n      console.log(\"waited 2000 ms\");\r\n    }\r\n  } while (done === null);\r\n\r\n  return runStatus;\r\n\r\n}\r\nexport default pollRun;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport getLatestMessage from \"./getLatestMessage.js\";\r\nimport required_action from \"./required_action.js\";\r\nimport pollRun from \"./pollRun.js\";\r\n\r\n/**\r\n * @async\r\n * @description - Run the latest prompt from the user\r\n * @function runAssistant\r\n *\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {string} prompt - user's prompt\r\n * @param {string} instructions - Additional instructions for the run\r\n * @param {object} appEnv - application info - ex: Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n \r\n * @returns {promise} - response from GPT(can be text, string, html etc...)\r\n * @notes - This function will run the assistant with the prompt and return the response from the assistant.\r\n * @example \r\n *  let response = await runAssistant(gptControl, prompt, promptInstructions,appEnv); \r\n*/\r\n\r\nasync function runAssistant(gptControl,prompt, instructions, appEnv) {\r\n  let { client, thread } = gptControl;\r\n\r\n  //add the user request to thread\r\n  try {\r\n    let _newMessage = await client.beta.threads.messages.create(thread.id, {\r\n      role: \"user\",\r\n      content: prompt,\r\n    });\r\n  } catch (error) {\r\n    debugger;\r\n    console.log(error);\r\n    throw new Error('Request failed on adding user message to thread.');\r\n  }\r\n  // now run the thread\r\n  // assume caller will catch any thrown errors\r\n  let r = await runPrompt(gptControl, appEnv, instructions);\r\n  return r;\r\n}\r\nasync function runPrompt(gptControl, appEnv, instructions) {\r\n  let { client, assistant, thread } = gptControl;\r\n  let runArgs = {\r\n    assistant_id: assistant.id,\r\n    instructions: instructions != null ? instructions : \"\",\r\n  };\r\n  // Run the assistant with the prompt and poll for completion\r\n  let run = await client.beta.threads.runs.create(thread.id, runArgs);\r\n  let runStatus = await pollRun(thread, run, gptControl);\r\n\r\n  //check for completion status\r\n  let message;\r\n  if (runStatus.status === \"completed\") {\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else if (runStatus.status === \"requires_action\") {\r\n    // make sure that required_action closes the thread run\r\n    let r = await required_action(runStatus, thread, run, gptControl, appEnv);\r\n    console.log('getting latest message ')\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else {\r\n    message = [{ runStatus: runStatus.status }];\r\n  }\r\n  return message;\r\n}\r\nexport default runAssistant;\r\n\r\n//https://platform.openai.com/docs/guides/text-generation/chat-completions-api\r\n","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Handle required actions for Assistant\r\n * @function required_action\r\n * @param {object} runStatus - run status object\r\n * @param {object} thread - thread object\r\n * @param {object} run - run object\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {promise} - status from submitToolOutputs\r\n */\r\nimport pollRun from \"./pollRun.js\";\r\nasync function required_action(runStatus, thread, run,  gptControl, appEnv) {\r\n  let{client,specs} = gptControl;\r\n  let {functionList} = specs;\r\n  \r\n  // get the required actions from the run status\r\n  let requiredActions = runStatus.required_action.submit_tool_outputs.tool_calls;\r\n  \r\n  let toolsOutput = [];\r\n  for (let action of requiredActions) {\r\n    let functionName = action.function.name;\r\n    console.log('Requested function: ', functionName);\r\n    let params = JSON.parse(action.function.arguments);\r\n    debugger;\r\n    try {\r\n       let response = await functionList[functionName](params, appEnv, gptControl);\r\n        toolsOutput.push({\r\n          tool_call_id: action.id,\r\n          output: JSON.stringify(response),\r\n        });\r\n      }\r\n    catch(err){\r\n      toolsOutput.push({\r\n        tool_call_id: action.id,\r\n        output: JSON.stringify(err),\r\n      })\r\n    }\r\n }\r\n// submit the outputs to the thread\r\n console.log('Adding output to messages');\r\n let newRun = await client.beta.threads.runs.submitToolOutputs(\r\n  thread.id, run.id, { tool_outputs: toolsOutput });\r\n\r\n// wait for output to appear in the thread messages\r\n let outputStatus = await pollRun(thread, newRun, gptControl);\r\n\r\nreturn outputStatus;\r\n}\r\nexport default required_action;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description - Close Viya connections.\r\n * @function closeAssistant\r\n * @param {object} gptControl - gpt session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {boolean} - true\r\n */\r\nasync function closeAssistant(_gptControl, _appEnv) {\r\n  console.log('in closeAssistant');\r\n  return true;\r\n}\r\nexport default closeAssistant;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * \r\n * @description Return sepcified number of messages from thread\r\n * @param {object}  gptControl- client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {*} - messages - array of messages[ {id, role, type, content}]\r\n * @notes - This function will return the specified number of messages from the thread\r\n * Typically the top 2 will be the assistant message and user's prompt\r\n */\r\nasync function getMessages(gptControl, limit) {  \r\n  let {client, thread} = gptControl;\r\n  const messages = await client.beta.threads.messages.list(thread.id, {limit:limit});\r\n  //console.log('body', JSON.stringify(messages.body.data, null, 4));\r\n  let output = messages.data.map((m) => {\r\n    let content = m.content[0];\r\n    return {id: m.id, role: m.role, type: content.type, content: content[content.type].value};\r\n  });\r\n  return output;\r\n\r\n}\r\nexport default getMessages;","\n/*\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nasync function uploadFile(fileHandle,purpose, gptControl) {\n  let { client, assistant } = gptControl;\n\n  // get fileid\n  const fileId = await client.files.create({\n    file: fileHandle,\n    purpose: purpose})\n  console.log('.......................', fileId); \n  \n  debugger;\n  let currentFileIds = [].concat(assistant.file_ids);\n  currentFileIds.push(fileId.id);\n  console.log(currentFileIds);\n  debugger;\n  try {\n    let newAssistant = await client.beta.assistants.update(assistant.id, \n      {\n      file_ids: currentFileIds\n      });\n    gptControl.assistant = newAssistant;\n    debugger;\n    console.log('.......................', newAssistant);\n  } catch (e) {\n    console.log(e);\n  }\n  return currentFileIds;\n}\nexport default uploadFile;"],"names":["async","setupAssistant","config","credentials","key","client","OpenAI","apiKey","dangerouslyAllowBrowser","gptControl","provider","assistant","thread","threadid","specs","domainTools","appEnv","assistantName","assistantid","instructions","model","createArgs","name","tools","console","log","beta","assistants","retrieve","list","order","limit","data","find","a","create","createAssistant","threads","metadata","error","status","Error","loadThread","id","getLatestMessage","messages","output","i","length","content","role","push","type","value","reverse","pollRun","run","done","runStatus","sleep","ms","Promise","resolve","setTimeout","runs","runAssistant","prompt","r","message","runArgs","assistant_id","functionList","requiredActions","required_action","submit_tool_outputs","tool_calls","toolsOutput","action","functionName","function","params","JSON","parse","arguments","response","tool_call_id","stringify","err","newRun","submitToolOutputs","tool_outputs","runPrompt","closeAssistant","_gptControl","_appEnv","getMessages","map","m","uploadFile","fileHandle","purpose","fileId","files","file","currentFileIds","concat","file_ids","newAssistant","update","e"],"mappings":"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"}