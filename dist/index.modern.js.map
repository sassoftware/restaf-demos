{"version":3,"file":"index.modern.js","sources":["../src/loadThread.js","../src/setupAssistant.js","../src/createAssistant.js","../src/openAssistant.js","../src/getLatesMessage.js","../src/pollRun.js","../src/runAssistant.js","../src/required_action.js","../src/closeAssistant.js"],"sourcesContent":["/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function loadThread\r\n * @description   reattach thread from previous session\r\n * @param {string} apiKey - openai api key\r\n * @param {string} threadid - thread id\r\n * @param {string} assistant - assistant object\r\n * @returns {promise} - return {thread, assistant}\r\n */\r\nasync function loadThread(openai, threadid, assistant, reuseThread) {\r\n // let thread_id = assistant.metadata.thread_id;\r\n\r\n  let thread = null;\r\n  // If we are reusing the thread, try to retrieve it\r\n  if (reuseThread === true && threadid != '0') {\r\n    try {\r\n      thread = await openai.beta.threads.retrieve(threadid);\r\n    } catch (error) {\r\n      console.log(error); \r\n      console.log(error.status);\r\n      console.log(`Error status ${error.status}. Unable to retrieve the thread ${thread_id}`);\r\n    }\r\n  }\r\n\r\n  // If still no thread, create a new one\r\n  if (thread == null) {\r\n    console.log('Creating new thread' );\r\n    thread = await openai.beta.threads.create({\r\n      metadata: { assistanceName: assistant.name },\r\n    });\r\n    // update assistant metadata\r\n    assistant = await openai.beta.assistants.update(assistant.id, {\r\n      metadata: { thread_id: thread.id, lastRunId: \"0\" },\r\n    });\r\n  }\r\n\r\n  return { thread, assistant };\r\n}\r\nexport default loadThread;\r\n","/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\n/**\r\n * @async\r\n * @function setupAssist\r\n * @description   Setup the GPT Assistant\r\n * @param {string} provider - azure or openai\r\n * @param {string} assistanceName - name of the assistant(default is SAS_Assistant)\r\n * @returns {promise} - return {openai, assistant, thread, functionList}\r\n */\r\nimport OpenAI from 'openai';  \r\nimport  {OpenAIClient, OpenAIKeyCredential} from '@azure/openai'\r\n\r\nimport createAssistant from './createAssistant.js';\r\nimport openAssistant from './openAssistant.js';\r\n\r\nasync function setupAssistant(config) {\r\n\r\n  // azureai open includes url and key\r\n  // the azureai is not supported yet.\r\n  // openai includes key\r\n  let {provider, assistantName, credentials} = config;\r\n // let apiKey = (provider === 'openai') ? process.env.OPENAI_KEY : process.env.OPENAI_AZ_KEY;\r\n  let apiKey = (provider === 'openai') ? credentials.openaiKey : credentials.azureaiKey;\r\n  let endpoint = credentials.azureaiEndpoint;\r\n  console.log(apiKey);\r\n  let openai = (provider === 'openai') ? new OpenAI({ apiKey: apiKey,  dangerouslyAllowBrowser: true }) : \r\n        new OpenAIClient(endpoint, new OpenAIKeyCredential(apiKey));\r\n\r\n // Wishlist: Wish could open with query of name and let it succeed or fail\r\n  const myAssistants = await openai.beta.assistants.list({\r\n    order: \"desc\",\r\n    limit: \"100\",\r\n  });\r\n  let assistant = myAssistants.data.find((a) => { \r\n    if (a.name === assistantName) {\r\n      return a;\r\n    }\r\n  });\r\n\r\n  // Either create a new assistant or reuse the existing one(preferred)\r\n  let gptControl = (assistant == null) \r\n                     ? await createAssistant(openai, config)\r\n                     : await openAssistant(openai, assistant, config);\r\n  return gptControl; \r\n\r\n  }\r\n  export default setupAssistant;","/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\n\r\nimport loadThread from \"./loadThread.js\";\r\n\r\n/**\r\n * @async\r\n * @function setupAssist\r\n * @description   Setup the GPT Assistant\r\n * @param {string} apiKey - openai api key\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return gptControl{openai, assistant, thread, threadid, functions specs}\r\n */\r\nasync function createAssistant(openai, config) {\r\nlet {assistantName, instructions, model, specs, reuseThread} = config;\r\nlet createArgs = {\r\n  name: assistantName,\r\n  instructions: instructions,\r\n  model: model, \r\n  metadata:{ thread_id: '0', lastRunId: '0'},\r\n};\r\nif (specs.tools !== null){\r\n  createArgs.tools = specs.tools;\r\n}\r\n\r\nlet assistant = await openai.beta.assistants.create(createArgs);\r\nconsole.log('-----------------------------------');\r\nconsole.log('New Assistant: ', assistantName , assistant.id);\r\nlet r = await loadThread(openai, config.threadid, assistant, reuseThread);\r\nconsole.log('Thread ID: ', r.thread.id);\r\nconsole.log('-----------------------------------');\r\n// assistant might have been updated in loadThread\r\nlet gptControl = {\r\n  openai,\r\n  assistant: r.assistant, \r\n  thread: r.thread,\r\n  threadid: r.thread.id,\r\n specs};\r\nreturn gptControl;\r\n}\r\nexport default createAssistant;","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function openAssistant\r\n * @description   Reuse existing assistant\r\n * @param {string} apiKey - openai api key\r\n * @param {string} assistant - assistant object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return {openai, assistant, thread, threadid, function specs}\r\n */\r\nimport loadThread from './loadThread.js'; \r\nasync function openAssistant(openai, assistant, config) {\r\n\r\n  let {reuseThread} = config;\r\n  console.log(\"Using Existing Assistant: \", assistant.name, assistant.id);\r\n  let thread_id = assistant.metadata.thread_id;\r\n\r\n  if (config.threadid !== '0') {\r\n    thread_id = config.threadid;\r\n  }\r\n\r\n  console.log(\"Associated thread_id: \", thread_id);\r\n\r\n  // load previous thread. loadThread will create a new thread if reuseThread is false\r\n  let r = await loadThread(openai, thread_id, assistant, reuseThread);\r\n  // assistant might have been updated in loadThread\r\n  let gptControl = {\r\n    openai: openai,\r\n    assistant: r.assistant,\r\n    thread: r.thread,\r\n    threadid: r.thread.id,\r\n    specs: config.specs\r\n  };\r\n  return gptControl;\r\n}\r\nexport default openAssistant;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * \r\n * @description Return the latest message from thread\r\n * @param {object}  openai - openai object\r\n * @param {object} thread - active thread\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {*} - message\r\n */\r\nasync function getLatestMessage(openai,thread, limit) {  \r\n  const messages = await openai.beta.threads.messages.list(thread.id, {limit:limit});\r\n  \r\n  let content = messages.data[0].content[0];\r\n  let message = content[content.type].value;\r\n  return message\r\n\r\n}\r\nexport default getLatestMessage;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Poll run status since there is no streaming support\r\n * @function pollRun\r\n * @params {object} openai - openai object\r\n * @params {object} thread - thread object\r\n * @params {object} run - run object    \r\n * @params {object} gptControl - gpt  session control object\r\n * @returns {object} - runStatus from openai.beta.threads.runs.retrieve\r\n * @notes - Will wait for completion(!(queued,in_progress, cancelling))\r\n */\r\nasync function pollRun(thread, run, gptControl) {\r\n  let { openai, assistant} = gptControl;\r\n  let done = null;\r\n  let runStatus = null;\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  // Since there is no streaming support, sleep and poll the status\r\n  do {\r\n    \r\n    runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);\r\n    \r\n    console.log(\"-------------------\", runStatus.status);\r\n    if (\r\n      !(\r\n        runStatus.status === \"queued\" ||\r\n        runStatus.status === \"in_progress\" ||\r\n        runStatus.status === \"cancelling\"\r\n      )\r\n    ) {\r\n      done = runStatus.status;\r\n    } else {\r\n      await sleep(2000);\r\n      // console.log(\"waited 2000 ms\");\r\n    }\r\n  } while (done === null);\r\n\r\n  let newAssistant = await openai.beta.assistants.update(assistant.id, {\r\n    metadata: { thread_id: thread.id, lastRunId: run.id} \r\n  });\r\n  gptControl.assistant = newAssistant;\r\n  return runStatus;\r\n\r\n}\r\nexport default pollRun;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport getLatestMessage from \"./getLatesMessage.js\";\r\nimport required_action from \"./required_action.js\";\r\nimport pollRun from \"./pollRun.js\";\r\n\r\n/**\r\n * @async\r\n * @description - Run the latest prompt from the user\r\n * @function runAssistant\r\n * @param {string} prompt - User prompt\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - application info - ex: Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @param {string} instructions - Additional instructions for the run\r\n * @returns {*} - response from GPT(can be text, string, html etc...)\r\n * @notes - This function will run the assistant with the prompt and return the response from the assistant.\r\n */\r\n\r\nasync function runAssistant(prompt, gptControl, appEnv, instructions) {\r\n  let { openai, assistant, thread, specs } = gptControl;\r\n  let {functionList} = specs;\r\n\r\n  //add the user request to thread\r\n  let run = null;\r\n  let newMessage = null;\r\n  try {\r\n    newMessage = await openai.beta.threads.messages.create(thread.id, {\r\n      role: \"user\",\r\n      content: prompt,\r\n    });\r\n  } catch (error) {\r\n    console.log(`status = ${error.status}. Unable to add the prompt to the thread`);\r\n    console.log('will try to cancel the last run');\r\n    console.log(error);\r\n    if (error.status === 400 && assistant.metadata.lastRunId !== '0') {\r\n      try {\r\n        run = await openai.beta.threads.runs.cancel(thread.id, assistant.metadata.lastRunId);\r\n        assistant = await openai.beta.assistants.update(assistant.id, {\r\n          metadata: { thread_id: thread.id, lastRunId: run.id }})\r\n        gptControl.assistant = assistant;\r\n        console.log(\"Cancelled the last run\");\r\n      } catch (error) {\r\n        console.log('Unable to cancel the last run');\r\n        console.log(error);\r\n      }\r\n    } else {\r\n      await openai.beta.threads.del(thread.id);\r\n      thread = await openai.beta.threads.create({\r\n        metadata: { assistanceName: assistant.name, lastRunId: '0'},\r\n      });\r\n      gptControl.thread = thread;\r\n      console.log(\"Deleted old thread and created a new one\");\r\n      \r\n    }\r\n  }\r\n  newMessage = await openai.beta.threads.messages.create(thread.id, {\r\n    role: \"user\",\r\n    content: prompt,\r\n  });\r\n  // console.log(assistant.id);\r\n  // console.log(JSON.stringify(thread, null, 4));\r\n  let runArgs = {\r\n    assistant_id: assistant.id,\r\n    instructions: (instructions != null) ? instructions : ''\r\n  };\r\n\r\n  run = await openai.beta.threads.runs.create(thread.id, runArgs);\r\n\r\n  // Poll and wait for the run to complete\r\n  let runStatus = await pollRun(thread, run, gptControl);\r\n  \r\n  if (runStatus.status === \"completed\") {\r\n    \r\n    const message = await getLatestMessage  (openai, thread, 1);\r\n    return message; \r\n  } else if (runStatus.status === 'requires_action') {\r\n    let r = await required_action(\r\n      runStatus,\r\n      thread,\r\n      run,\r\n      gptControl,\r\n      appEnv\r\n    );\r\n    let message = await getLatestMessage  (openai, thread,1);\r\n    return message;\r\n  } else {\r\n    return { runStatus: runStatus.status };\r\n  }\r\n}\r\nexport default runAssistant;\r\n\r\n//https://platform.openai.com/docs/guides/text-generation/chat-completions-api\r\n","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Handle required actions for Assistant\r\n * @function required_action\r\n * @param {object} runStatus - run status object\r\n * @param {object} thread - thread object\r\n * @param {object} run - run object\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {*} - status from submitToolOutputs\r\n */\r\nimport pollRun from \"./pollRun.js\";\r\nasync function required_action(runStatus, thread, run,  gptControl, appEnv) {\r\n  let{openai,specs} = gptControl;\r\n  let {functionList} = specs;\r\n  \r\n  let requiredActions = runStatus.required_action.submit_tool_outputs.tool_calls;\r\n  \r\n  let toolsOutput = [];\r\n  for (let action of requiredActions) {\r\n    let functionName = action.function.name;\r\n    console.log('Requested function: ', functionName);\r\n    let params = JSON.parse(action.function.arguments);\r\n    let response = await functionList[functionName](params, appEnv, gptControl);\r\n\r\n    toolsOutput.push({\r\n      tool_call_id: action.id,\r\n      output: JSON.stringify(response),\r\n    });\r\n }\r\n// submit the outputs to the thread\r\n let newRun = await openai.beta.threads.runs.submitToolOutputs(\r\n  thread.id, run.id, { tool_outputs: toolsOutput });\r\n\r\n// wait for output to appear in the thread messages\r\n let outputStatus = await pollRun(thread, newRun, gptControl);\r\n\r\nreturn outputStatus;\r\n}\r\nexport default required_action;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description - Close Viya connections.\r\n * @function closeAssistant\r\n * @param {object} gptControl - gpt session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {boolean} - true\r\n */\r\nasync function closeAssistant(_gptControl, _appEnv) {\r\n  console.log('in closeAssistant');\r\n  return true;\r\n}\r\nexport default closeAssistant;"],"names":["async","loadThread","openai","threadid","assistant","reuseThread","thread","beta","threads","retrieve","error","console","log","status","thread_id","create","metadata","assistanceName","name","assistants","update","id","lastRunId","setupAssistant","config","provider","assistantName","credentials","apiKey","openaiKey","azureaiKey","endpoint","azureaiEndpoint","OpenAI","dangerouslyAllowBrowser","OpenAIClient","OpenAIKeyCredential","list","order","limit","data","find","a","gptControl","instructions","model","specs","createArgs","tools","r","createAssistant","openAssistant","getLatestMessage","content","messages","type","value","pollRun","run","done","runStatus","sleep","ms","Promise","resolve","setTimeout","runs","newAssistant","runAssistant","prompt","appEnv","newMessage","role","cancel","del","runArgs","assistant_id","functionList","requiredActions","required_action","submit_tool_outputs","tool_calls","toolsOutput","action","functionName","function","params","JSON","parse","arguments","response","push","tool_call_id","output","stringify","newRun","submitToolOutputs","tool_outputs","closeAssistant","_gptControl","_appEnv"],"mappings":"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"}