{"version":3,"file":"index.modern.js","sources":["../src/src/loadThread.js","../src/src/setupAssistant.js","../src/src/createAssistant.js","../src/src/openAssistant.js","../src/lib/setupViya.js","../src/src/getLatesMessage.js","../src/src/pollRun.js","../src/src/runAssistant.js","../src/src/required_action.js","../src/src/closeAssistant.js"],"sourcesContent":["/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function loadThread\r\n * @description   reattach thread from previous session\r\n * @param {string} apiKey - openai api key\r\n * @param {string} threadid - thread id\r\n * @param {string} assistant - assistant object\r\n * @returns {promise} - return {thread, assistant}\r\n */\r\nasync function loadThread(openai, threadid, assistant, reuseThread) {\r\n // let thread_id = assistant.metadata.thread_id;\r\n\r\n  let thread = null;\r\n  // If we are reusing the thread, try to retrieve it\r\n  if (reuseThread === true && threadid != '0') {\r\n    try {\r\n      thread = await openai.beta.threads.retrieve(threadid);\r\n    } catch (error) {\r\n      console.log(error); \r\n      console.log(error.status);\r\n      console.log(`Error status ${error.status}. Unable to retrieve the thread ${thread_id}`);\r\n    }\r\n  }\r\n\r\n  // If still no thread, create a new one\r\n  if (thread == null) {\r\n    console.log('Creating new thread' );\r\n    thread = await openai.beta.threads.create({\r\n      metadata: { assistanceName: assistant.name },\r\n    });\r\n    // update assistant metadata\r\n    assistant = await openai.beta.assistants.update(assistant.id, {\r\n      metadata: { thread_id: thread.id, lastRunId: \"0\" },\r\n    });\r\n  }\r\n\r\n  return { thread, assistant };\r\n}\r\nexport default loadThread;\r\n","/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\n/**\r\n * @async\r\n * @function setupAssist\r\n * @description   Setup the GPT Assistant\r\n * @param {string} provider - azure or openai\r\n * @param {string} assistanceName - name of the assistant(default is SAS_Assistant)\r\n * @returns {promise} - return {openai, assistant, thread, functionList}\r\n */\r\nimport OpenAI from 'openai';  \r\nimport  {OpenAIClient, OpenAIKeyCredential} from '@azure/openai'\r\n\r\nimport createAssistant from './createAssistant.js';\r\nimport openAssistant from './openAssistant.js';\r\nimport setupViya from '../lib/setupViya.js';\r\n\r\nasync function setupAssistant(config) {\r\n\r\n  // azureai open includes url and key\r\n  // openai includes key\r\n  let {provider, assistantName, credentials} = config;\r\n // let apiKey = (provider === 'openai') ? process.env.OPENAI_KEY : process.env.OPENAI_AZ_KEY;\r\n  let apiKey = (provider === 'openai') ? credentials.openaiKey : credentials.azureaiKey;\r\n  let endpoint = credentials.azureaiEndpoint;\r\n  let openai = (provider === 'openai') ? new OpenAI({ apiKey: apiKey }) : \r\n        new OpenAIClient(endpoint, new OpenAIKeyCredential(apiKey));\r\n\r\n // Wishlist: Wish could open with query of name and let it succeed or fail\r\n  const myAssistants = await openai.beta.assistants.list({\r\n    order: \"desc\",\r\n    limit: \"100\",\r\n  });\r\n  let assistant = myAssistants.data.find((a) => { \r\n    if (a.name === assistantName) {\r\n      return a;\r\n    }\r\n  });\r\n\r\n  // Either create a new assistant or reuse the existing one(preferred)\r\n  \r\n  let gptControl = (assistant == null) \r\n                     ? await createAssistant(openai, config)\r\n                     : await openAssistant(openai, assistant, config);\r\n                     \r\n  // setup viya session\r\n  let appEnv = await setupViya(config.source);\r\n  return {gptControl, appEnv};\r\n\r\n  }\r\n  export default setupAssistant;","/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\n\r\nimport loadThread from \"./loadThread.js\";\r\n\r\n/**\r\n * @async\r\n * @function setupAssist\r\n * @description   Setup the GPT Assistant\r\n * @param {string} apiKey - openai api key\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return {openai, assistant, thread, functionList}\r\n */\r\nasync function createAssistant(openai, config) {\r\nlet {assistantName, instructions, model, specs, reuseThread} = config;\r\n\r\nlet createArgs = {\r\n  name: assistantName,\r\n  instructions: instructions,\r\n  model: model, \r\n  tools: specs.tools,\r\n  metadata:{ thread_id: '0', lastRunId: '0'},\r\n};\r\n\r\nlet assistant = await openai.beta.assistants.create(createArgs);\r\nconsole.log('-----------------------------------');\r\nconsole.log('New Assistant: ', assistantName , assistant.id);\r\nlet r = await loadThread(openai, config.threadid, assistant, reuseThread);\r\nconsole.log('Thread ID: ', r.thread.id);\r\nconsole.log('-----------------------------------');\r\n// assistant might have been updated in loadThread\r\nlet gptControl = {\r\n  openai,\r\n  assistant: r.assistant, \r\n  thread: r.thread,\r\n  threadid: r.thread.id,\r\n specs};\r\nreturn gptControl;\r\n}\r\nexport default createAssistant;","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function openAssistant\r\n * @description   Reuse existing assistant\r\n * @param {string} apiKey - openai api key\r\n * @param {string} assistant - assistant object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return {openai, assistant, thread, functionList}\r\n */\r\nimport loadThread from './loadThread.js'; \r\nasync function openAssistant(openai, assistant, config) {\r\n\r\n  let {reuseThread} = config;\r\n  console.log(\"Using Existing Assistant: \", assistant.name, assistant.id);\r\n  let thread_id = assistant.metadata.thread_id;\r\n\r\n  if (config.threadid !== '0') {\r\n    thread_id = config.threadid;\r\n  }\r\n\r\n  console.log(\"Associated thread_id: \", thread_id);\r\n\r\n  // load previous thread. loadThread will create a new thread if reuseThread is false\r\n  let r = await loadThread(openai, thread_id, assistant, reuseThread);\r\n  // assistant might have been updated in loadThread\r\n  let gptControl = {\r\n    openai: openai,\r\n    assistant: r.assistant,\r\n    thread: r.thread,\r\n    threadid: r.thread.id,\r\n    specs: config.specs\r\n  };\r\n  return gptControl;\r\n}\r\nexport default openAssistant;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * Setup the Viya environment\r\n * @param {string} source - cas or compute\r\n * @returns {object} - appEnv\r\n * @async\r\n */\r\n \r\nimport restaf from '@sassoftware/restaf';\r\nimport restaflib from '@sassoftware/restaflib';\r\n\r\nasync function setupViya(source, logonPayload) {\r\n\r\n  let appEnv = {  \r\n    host: null,\r\n    logonPayload: null,\r\n    store: null,\r\n    session: null,\r\n    servers: null,\r\n    casServerName: null,\r\n    source: source,\r\n    sessionID: null\r\n  }\r\n  if (source === 'none'|| source == null){\r\n    return appEnv;\r\n  }\r\n  // logon payload\r\n  /*\r\n  let {token, host} = getToken();\r\n  let logonPayload = {\r\n    authType: 'server',\r\n    host: host,\r\n    token: token,\r\n    tokenType: 'bearer'\r\n  }\r\n  */\r\n\r\n  // logon to the server\r\n  let store = restaf.initStore({casProxy: true});\r\n  await store.logon(logonPayload);\r\n  appEnv = {\r\n    host: host,\r\n    logonPayload: logonPayload,\r\n    store: store,\r\n    source: source\r\n  }\r\n  // create session and server objects\r\n  if (source === 'cas') {\r\n    let {session, servers} = await restaflib.casSetup(store, null);\r\n    appEnv.session = session;\r\n    appEnv.servers = servers;\r\n    appEnv.casServerName = session.links(\"execute\", \"link\", \"server\"); \r\n \r\n  } else {\r\n    appEnv.session = await restaflib.computeSetup(store);\r\n    appEnv.server = null;\r\n  }\r\n\r\n  let ssid = await store.apiCall(appEnv.session.links(\"self\"));\r\n  appEnv.sessionID = ssid.items(\"id\");\r\n  return appEnv;\r\n}\r\nexport default setupViya;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nasync function getLatestMessage(openai,thread, limit) {  \r\n  const messages = await openai.beta.threads.messages.list(thread.id, {limit:limit});\r\n  \r\n  let content = messages.data[0].content[0];\r\n  let message = content[content.type].value;\r\n  return message\r\n\r\n}\r\nexport default getLatestMessage;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Poll run status since there is no streaming support\r\n * @function pollRun\r\n * @params {object} openai - openai object\r\n * @params {object} thread - thread object\r\n * @params {object} run - run object    \r\n * @params {object} gptControl - gpt  session control object\r\n * @returns {object} - runStatus from openai.beta.threads.runs.retrieve\r\n */\r\nasync function pollRun(thread, run, gptControl) {\r\n  let { openai, assistant} = gptControl;\r\n  let done = null;\r\n  let runStatus = null;\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  // Since there is no streaming support, sleep and poll the status\r\n  do {\r\n    \r\n    runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);\r\n    \r\n    console.log(\"-------------------\", runStatus.status);\r\n    if (\r\n      !(\r\n        runStatus.status === \"queued\" ||\r\n        runStatus.status === \"in_progress\" ||\r\n        runStatus.status === \"cancelling\"\r\n      )\r\n    ) {\r\n      done = runStatus.status;\r\n    } else {\r\n      await sleep(2000);\r\n      // console.log(\"waited 2000 ms\");\r\n    }\r\n  } while (done === null);\r\n\r\n  let newAssistant = await openai.beta.assistants.update(assistant.id, {\r\n    metadata: { thread_id: thread.id, lastRunId: run.id} \r\n  });\r\n  gptControl.assistant = newAssistant;\r\n  return runStatus;\r\n\r\n}\r\nexport default pollRun;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport getLatestMessage from \"./getLatesMessage.js\";\r\nimport required_action from \"./required_action.js\";\r\nimport pollRun from \"./pollRun.js\";\r\n\r\n/**\r\n * @async\r\n * @description - Run the latest prompt from the user\r\n * @function runAssistant\r\n * @param {string} prompt - User prompt\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {*} - response from GPT(can be text, string, html etc...)\r\n */\r\n\r\nasync function runAssistant(prompt, gptControl, appEnv) {\r\n  let { openai, assistant, thread, specs } = gptControl;\r\n  let {functionList} = specs;\r\n\r\n  //add the user request to thread\r\n  let run = null;\r\n  let newMessage = null;\r\n  try {\r\n    newMessage = await openai.beta.threads.messages.create(thread.id, {\r\n      role: \"user\",\r\n      content: prompt,\r\n    });\r\n  } catch (error) {\r\n    console.log(`status = ${error.status}. Unable to add the prompt to the thread`);\r\n    console.log('will try to cancel the last run');\r\n    console.log(error);\r\n    if (error.status === 400 && assistant.metadata.lastRunId !== '0') {\r\n      try {\r\n        run = await openai.beta.threads.runs.cancel(thread.id, assistant.metadata.lastRunId);\r\n        assistant = await openai.beta.assistants.update(assistant.id, {\r\n          metadata: { thread_id: thread.id, lastRunId: run.id }})\r\n        gptControl.assistant = assistant;\r\n        console.log(\"Cancelled the last run\");\r\n      } catch (error) {\r\n        console.log('Unable to cancel the last run');\r\n        console.log(error);\r\n      }\r\n    } else {\r\n      await openai.beta.threads.del(thread.id);\r\n      thread = await openai.beta.threads.create({\r\n        metadata: { assistanceName: assistant.name, lastRunId: '0'},\r\n      });\r\n      gptControl.thread = thread;\r\n      console.log(\"Deleted old thread and created a new one\");\r\n      \r\n    }\r\n  }\r\n  newMessage = await openai.beta.threads.messages.create(thread.id, {\r\n    role: \"user\",\r\n    content: prompt,\r\n  });\r\n  // console.log(assistant.id);\r\n  // console.log(JSON.stringify(thread, null, 4));\r\n  run = await openai.beta.threads.runs.create(thread.id, {\r\n    assistant_id: assistant.id,\r\n    instructions: `Help user use SAS Viya to accomplish a task\r\n                      Allow users to query for information from a Viya Server.\r\n                      Allow users to query the retrieved information`,\r\n  });\r\n\r\n  // Poll and wait for the run to complete\r\n  let runStatus = await pollRun(thread, run, gptControl);\r\n  \r\n  if (runStatus.status === \"completed\") {\r\n    \r\n    const message = await getLatestMessage  (openai, thread, 1);\r\n    return message; \r\n  } else if (runStatus.status === 'requires_action') {\r\n    let r = await required_action(\r\n      runStatus,\r\n      thread,\r\n      run,\r\n      gptControl,\r\n      appEnv\r\n    );\r\n    let message = await getLatestMessage  (openai, thread,1);\r\n    return message;\r\n  } else {\r\n    return { runStatus: runStatus.status };\r\n  }\r\n}\r\nexport default runAssistant;\r\n\r\n//https://platform.openai.com/docs/guides/text-generation/chat-completions-api\r\n","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Handle required actions for Assistant\r\n * @function required_action\r\n * @param {string} prompt - User prompt\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {*} - response from GPT(can be text, string, html etc...)\r\n */\r\nimport pollRun from \"./pollRun.js\";\r\nasync function required_action(runStatus, thread, run,  gptControl, appEnv) {\r\n  let{openai,specs} = gptControl;\r\n  let {functionList} = specs;\r\n  \r\n  let requiredActions = runStatus.required_action.submit_tool_outputs.tool_calls;\r\n  \r\n  let toolsOutput = [];\r\n  for (let action of requiredActions) {\r\n    let functionName = action.function.name;\r\n    console.log('Requested function: ', functionName);\r\n    let params = JSON.parse(action.function.arguments);\r\n    let response = await functionList[functionName](params, appEnv, gptControl);\r\n\r\n    toolsOutput.push({\r\n      tool_call_id: action.id,\r\n      output: JSON.stringify(response),\r\n    });\r\n }\r\n// submit the outputs to the thread\r\n let newRun = await openai.beta.threads.runs.submitToolOutputs(\r\n  thread.id, run.id, { tool_outputs: toolsOutput });\r\n\r\n// wait for output to appear in the thread messages\r\n let outputStatus = await pollRun(thread, newRun, gptControl);\r\n\r\nreturn outputStatus;\r\n}\r\nexport default required_action;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description - Close Viya connections.\r\n * @function closeAssistant\r\n * @param {object} gptControl - gpt session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {boolean} - true\r\n */\r\nasync function closeAssistant(_gptControl, _appEnv) {\r\n  return true;\r\n}\r\nexport default closeAssistant;"],"names":["async","loadThread","openai","threadid","assistant","reuseThread","thread","beta","threads","retrieve","error","console","log","status","thread_id","create","metadata","assistanceName","name","assistants","update","id","lastRunId","setupAssistant","config","provider","assistantName","credentials","apiKey","openaiKey","azureaiKey","endpoint","azureaiEndpoint","OpenAI","OpenAIClient","OpenAIKeyCredential","list","order","limit","data","find","a","gptControl","instructions","model","specs","createArgs","tools","r","createAssistant","openAssistant","appEnv","source","logonPayload","host","store","session","servers","casServerName","sessionID","restaf","initStore","casProxy","logon","restaflib","casSetup","links","computeSetup","server","ssid","apiCall","items","setupViya","getLatestMessage","content","messages","type","value","pollRun","run","done","runStatus","sleep","ms","Promise","resolve","setTimeout","runs","newAssistant","runAssistant","prompt","newMessage","role","cancel","del","assistant_id","functionList","requiredActions","required_action","submit_tool_outputs","tool_calls","toolsOutput","action","functionName","function","params","JSON","parse","arguments","response","push","tool_call_id","output","stringify","newRun","submitToolOutputs","tool_outputs","closeAssistant","_gptControl","_appEnv"],"mappings":"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"}