{"version":3,"file":"index.modern.js","sources":["../src/builtins/lib/string2Table.js","../src/builtins/lib/rows2csv.js","../src/builtins/functions.js","../src/builtins/lib/logAsArray.js","../src/builtins/functionSpecs.js","../src/apiMapper.js","../src/setupAssistant.js","../src/builtins/instructions.js","../src/builtins/lib/setupViya.js","../src/createAssistant.js","../src/loadThread.js","../src/getLatestMessage.js","../src/pollRun.js","../src/runAssistant.js","../src/required_action.js","../src/closeAssistant.js","../src/getMessages.js","../src/uploadFile.js"],"sourcesContent":["/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\n/**\r\n * \r\n * @param {string} table as a.b\r\n * @param {string} source (cas or compute)\r\n * @returns {object} - {libref: a, name: b} or null\r\n */\r\nfunction string2Table(table, source) {\r\n  let iTable = {};\r\n  let lib = (source === 'cas') ? 'caslib' : 'libref';\r\n  let parts = table.split('.');  \r\n  if (parts.length === 2) {\r\n    iTable[lib] = parts[0];\r\n    iTable.name = parts[1];\r\n    return iTable;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\nexport default string2Table;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction rows2csv(arr) {\r\n  // Check if there's data\r\n  if (arr.length === 0) {\r\n    return '';\r\n  }\r\n\r\n  // Extract headers\r\n  let headers = Object.keys(arr[0]).join(',') + '\\n';\r\n  let rows ='';\r\n  arr.map(obj => {\r\n    let line ='';\r\n    let sep = '';\r\n    Object.values(obj).map(value => {\r\n      line = line + sep + value2String(value);\r\n      sep = ',';\r\n    });\r\n    rows = rows + line + '\\n';\r\n  })\r\n  return headers + rows;\r\n}\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == '.' || value == null) {\r\n    valueString = '';\r\n  } else if (typeof value === 'string') {\r\n    value = value.replace(/\"/g, '\"\"');\r\n    valueString = value.trim()\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\nexport default rows2csv;\r\n\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Function for the assistant\r\n * @function functionSpecs\r\n * @returns {object} - object containing function specs \r\n * @returns {object} - a functions object({f1: function1, f2: function2, ...})\r\n * \r\n */\r\n\r\nimport restafedit from \"@sassoftware/restafedit\";\r\nimport restaflib from \"@sassoftware/restaflib\"\r\n\r\nimport logAsArray from \"./lib/logAsArray.js\";\r\nimport string2Table from \"./lib/string2Table.js\";\r\nimport rows2csv from \"./lib/rows2csv.js\";\r\n//const fss = fs.promises;\r\nconst { caslRun, computeRun, computeResults } = restaflib;\r\nconst { getLibraryList, getTableList, getTableColumns } = restafedit;\r\n\r\nfunction functions() {\r\n  let flist = {\r\n    _getData,\r\n    _listSASObjects,\r\n    _listSASTables,\r\n    _listColumns,\r\n    _listSASDataLib,\r\n    _runSAS,\r\n    _keywords,\r\n    _describeTable,\r\n   // _contextData\r\n  };\r\n  return flist;\r\n}\r\n\r\nasync function _listSASObjects(params, appEnv) {\r\n  let { resource, limit } = params;\r\n  let store = appEnv.store;\r\n  debugger;\r\n  limit = limit == null ? 10 : limit;\r\n  if (\r\n    [\"files\", \"folders\", \"reports\"].includes(resource.toLowerCase()) === false\r\n  ) {\r\n    return `{Error: \"resource ${resource} is not supported at this time\"}`;\r\n  }\r\n  let r = await store.addServices(resource);\r\n  let s = r[resource];\r\n  let payload = {\r\n    qs: {\r\n      limit: limit,\r\n      start: 0,\r\n    },\r\n  };\r\n  let results = await store.apiCall(s.links(resource), payload);\r\n  let items = results.itemsList().toJS();\r\n  debugger;\r\n  return JSON.stringify(items);\r\n}\r\nasync function _listSASDataLib(params, appEnv) {\r\n  let r = await getLibraryList(appEnv);\r\n  return JSON.stringify(r);\r\n}\r\nasync function _listSASTables(params, appEnv) {\r\n  let { library, limit } = params;\r\n  let p = {\r\n    qs: {\r\n      limit: limit == null ? 10 : limit,\r\n      start: 0,\r\n    },\r\n  };\r\n  let r = await _getTableList(library, appEnv, p);\r\n  return JSON.stringify(r);\r\n}\r\nasync function _listColumns(params, appEnv) {\r\n  let { table } = params;\r\n  let { source } = appEnv;\r\n  debugger;\r\n  let iTable = string2Table(table, source);\r\n  if (iTable === null) {\r\n    return \"Table must be specified in the form casuser.cars or sashelp.cars\";\r\n  }\r\n\r\n  let r = await _getTableColumns(source, iTable, appEnv);\r\n  debugger;\r\n  return JSON.stringify(r);\r\n}\r\nasync function _getData(params, appEnv) {\r\n  let r = await idescribeTable(params, appEnv);\r\n  return JSON.stringify({table: r.table, data: r.data});\r\n}\r\nasync function _runSAS(params, appEnv) {\r\n  let { src } = params;\r\n  let { store, session } = appEnv;\r\n  \r\n  if (appEnv.source === \"cas\") {\r\n    let r = await caslRun(store, session, src, {}, true);\r\n    return JSON.stringify(r.results);\r\n  } else {\r\n    let computeSummary = await computeRun(store, session, src);\r\n    let log = await computeResults(store, computeSummary, \"log\");\r\n    return logAsArray(log);\r\n  }\r\n}\r\n/*\r\nasync function _contextData(params, _appEnv, gptControl) {\r\n  let { file, action } = params;\r\n  let { openai, assistant } = gptControl;\r\n\r\n  if (action === 'upload') {\r\n    const fileid = await openai.files.create({\r\n      file: fs.createReadStream(file, 'utf8'),\r\n      purpose: \"assistants\",\r\n   });\r\n   console.log('.......................', fileid);\r\n    const assistantFileid = await openai.beta.assistants.files.create(\r\n      assistant.id, {file_id: fileid.id});\r\n    console.log(assistantFileid);\r\n    return `File ${file} added to assistant`;\r\n  }\r\n  try {\r\n    let src = await fss.readFile(file, \"utf8\");\r\n    return src;\r\n  } catch (err) {\r\n    console.log(err);\r\n    return \"Error reading file \" + file;\r\n  }\r\n}\r\n*/\r\nasync function _keywords(params) {\r\n  let { keywords, format } = params;\r\n\r\n  switch (format) {\r\n    case \"html\": {\r\n      let t = \"<ul>\";\r\n      keywords.split(\",\").forEach((k) => {\r\n        t += `<li>${k}</li>`;\r\n      });\r\n      t += \"</ul>\";\r\n      return t;\r\n    }\r\n    case \"array\":\r\n      return keywords.split(\",\");\r\n    case \"object\": {\r\n      let r = {};\r\n      keywords.split(\",\").forEach((k, i) => {\r\n        r[`key${i}`] = k;\r\n      });\r\n      return r;\r\n    }\r\n    default:\r\n      return params;\r\n  }\r\n}\r\nasync function _describeTable(params, appEnv) {\r\n let r = await _idescribeTable(params, appEnv);\r\n return JSON.stringify(r);\r\n\r\n}\r\nasync function _idescribeTable(params, appEnv) {\r\n  //TBD: need to move most of this code to restafedit\r\n  let { table, limit, format, where, csv } = params;\r\n  let { source, sessionID } = appEnv;\r\n  csv = csv == null ? false : csv;\r\n  console.log(params);\r\n  let iTable = string2Table(table, source);\r\n  if (iTable === null) {\r\n    return \"Table must be specified in the form casuser.cars or sashelp.cars\";\r\n  }\r\n  // setup call to restafedit.setup\r\n  let appControl = {\r\n    source: source,\r\n    table: iTable,\r\n    casServerName: appEnv.casServerName,\r\n    computeContext: appEnv.computeContext,\r\n    initialFetch: {\r\n      qs: {\r\n        start: 0,\r\n        limit: limit == null ? 2 : limit,\r\n        format: format == null ? false : format,\r\n        where: where == null ? \"\" : where,\r\n      },\r\n    },\r\n  };\r\n\r\n  let tappEnv = await restafedit.setup(\r\n    appEnv.logonPayload,\r\n    appControl,\r\n    sessionID\r\n  );\r\n  debugger;\r\n  let describe={};\r\n  try {\r\n    await restafedit.scrollTable(\"first\", tappEnv);\r\n    let tableSummary = await restafedit.getTableSummary(tappEnv);\r\n    debugger;\r\n    describe = {\r\n      table: iTable,\r\n      tableSummary: tableSummary,\r\n      columns: tappEnv.state.columns,\r\n      data: (csv === false ) ? tappEnv.state.data : rows2csv(tappEnv.state.data)\r\n    };\r\n  } catch (err) {\r\n    console.log(err);\r\n    describe = {error: err};\r\n  }\r\n  return describe;\r\n}\r\n\r\nexport default functions;\r\n","/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\nfunction logAsArray(log) {\r\n  let logText = [];\r\n  // eslint-disable-next-line array-callback-return\r\n  log.map((data) => {\r\n    let line = data.line.replace( /(\\r\\n|\\n|\\r)/gm, \"\" );\r\n    if ( line.length === 0 ) {\r\n       logText.push('   ');\r\n    } else {\r\n     logText.push(line);\r\n    }\r\n  });\r\n  return logText;\r\n \r\n}\r\nexport default logAsArray;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Function specs for the assistant\r\n * @function functionSpecs\r\n * @returns {object} - object containing specs, tools, functionList\r\n * \r\n */\r\nimport functions from './functions.js';\r\nimport instructions from './instructions.js';\r\nfunction functionSpecs(provider) {\r\n  let specs = [\r\n    _listSASObjectsFunctionSpec,\r\n    _listSASDataLibFunctionSpec,\r\n    _listSASTablesFunctionSpec,\r\n    _listColumnsFunctionSpec,\r\n    _describeTableSpec,\r\n    _getDataFunctionSpec,\r\n    _runSASFunctionSpec,\r\n    _keywordsFunctionSpec,\r\n   // _contextDataFunctionSpec,\r\n  ];\r\n\r\n\r\n  // Create tools array  for use with Assistant API\r\n  let tools = [\r\n    {type: 'retrieval'},\r\n  ];\r\n  if (provider != 'openai') {\r\n    tools.push({type: 'retrieval'});\r\n  }\r\n  \r\n  specs.forEach((f) => {\r\n    let r = {\r\n      type: \"function\",\r\n      function: Object.assign({}, f),\r\n    };\r\n    tools.push(r);\r\n  });\r\n\r\n  let functionList = functions(specs);\r\n  let ins = instructions();\r\n  return { specs: specs, tools: tools, functionList: functionList, instructions: instructions() };\r\n}\r\n\r\nconst _getDataFunctionSpec = {\r\n  name: '_getData',\r\n  description: `Fetch data from a  table like casuser.cars.\r\n                To limit the number of rows, specify the limit parameter.\r\n                If format is true, then the data will be formatted.\r\n                Use standard where clause to filter the data.\r\n                To return data in csv format, specify csv = true. Default is false.`,\r\n  parameters: {\r\n    properties: {\r\n      table: {\r\n        type: 'string',\r\n        description:\r\n          'The table to setup. The form of the table is casuser.cars',\r\n      },\r\n      limit: {\r\n        type: 'integer',\r\n        description: 'Fetch only the specified number of rows'\r\n      },\r\n      'format': {\r\n        type: 'boolean',\r\n        description: 'Format the string - true or false'\r\n      },  \r\n      where: {\r\n        type: 'string',\r\n        description: 'A where clause like Make eq \"Audi\"'\r\n      },\r\n      csv: {\r\n        type: 'boolean',\r\n        description: 'Return data in csv format - true or false'\r\n      }\r\n    },\r\n    type: 'object',\r\n    required: ['table'],\r\n  },\r\n};\r\nconst _listSASObjectsFunctionSpec = {\r\n  name: '_listSASObjects',\r\n  description:\r\n    'list SAS resources like reports, files, folders. Specify the limit parameter to limit the number of items returned',\r\n  parameters: {\r\n    properties: {\r\n      resource: {\r\n        type: 'string',\r\n        description:\r\n          'The objecttable to setup. The form of the table is casuser.cars',\r\n      },\r\n      limit: {\r\n        type: 'integer',\r\n        description: 'Get this many items',\r\n      },\r\n    },\r\n    type: 'object',\r\n    required: ['resource', 'limit'],\r\n  },\r\n};\r\nconst _listSASDataLibFunctionSpec = {\r\n  name: '_listSASDataLib',\r\n  description:\r\n    'list available SAS libs, calibs, librefs. A example would be list libs. If limit is not is specified, then the function will return the first 10 libs',\r\n  parameters: {\r\n    properties: {\r\n      limit: {\r\n        type: 'integer',\r\n        description: 'Return only this many libs. If not specified, then return 10 libs.',\r\n      },\r\n    },\r\n  type: 'object',\r\n  }\r\n};\r\nconst _listSASTablesFunctionSpec = {\r\n  name: '_listSASTables',\r\n  description:\r\n    'for a given library, lib , caslibs get the list available tables(ex: list tables for Samples)',\r\n  parameters: {\r\n    properties: {\r\n      library: {\r\n        type: 'string',\r\n        description: 'A SAS library like casuser, sashelp, samples',\r\n      },\r\n      limit: {\r\n        type: 'integer',\r\n        description:\r\n          'Return only this many tables. If not specified, then return 10 tables.',\r\n      },\r\n    },\r\n    type: 'object',\r\n    required: ['library', 'limit'], \r\n  },\r\n};\r\nconst _listColumnsFunctionSpec = {\r\n  name: '_listColumns',\r\n  description: 'Get schema or columns for specified table. Table is of the form sashelp.cars',\r\n  parameters: {\r\n    properties: {\r\n      table: {\r\n        type: 'string',\r\n        description: 'A table like sashelp.cars',\r\n      },\r\n    },\r\n    type: 'object',\r\n    required: ['table'],\r\n  },\r\n};\r\nconst _describeTableSpec = {\r\n  name: '_describeTable',\r\n  description: 'Describe the table like sashelp.cars . return information on the table like columns, types, keys. Optionally format the data',\r\n  parameters: {\r\n    properties: {\r\n      table: {\r\n        type: 'string',\r\n        description: 'A table like sashelp.cars',\r\n      },\r\n      format: {\r\n        type: 'boolean',\r\n        description: 'If true then format the data'\r\n      },\r\n    },\r\n    type: 'object',\r\n    required: ['table'],\r\n  },\r\n};\r\nconst _runSASFunctionSpec = {\r\n  name: '_runSAS',\r\n  description:\r\n    'run the specified file. The file is a path to the sas program',\r\n  parameters: {\r\n    properties: {\r\n      file: {\r\n        type: 'string',\r\n        description: 'this is the file to run',\r\n      },\r\n    },\r\n    type: 'object',\r\n    required: ['file'],\r\n  },\r\n};\r\n/*\r\nconst _contextDataFunctionSpec = {\r\n  name: '_contextData',\r\n  description:\r\n    `This is quick way to add some asset to current contect\r\n     User issues a prompt like context <some string>\r\n     the string is usually some string.\r\n     `,\r\n  parameters: {\r\n    properties: {\r\n      asset: {\r\n        type: 'string',\r\n        description: 'the asset to add to the context',\r\n      },\r\n    },\r\n    type: 'object',\r\n    required: ['file'],\r\n  },\r\n};\r\n*/\r\nconst _keywordsFunctionSpec = {\r\n  name: '_keywords',\r\n  description: 'format a comma-separated keywords like a,b,c into html, array, object',\r\n  parameters: {\r\n   \r\n    properties: {\r\n      keywords: {\r\n        type: 'string',\r\n        description: 'A comma-separated list of keywords like a,b,c',\r\n      },\r\n      format: {\r\n        type: 'string',\r\n        enum: ['html', 'array', 'object'],\r\n        description: 'Format the string'\r\n      },\r\n    },\r\n    type: 'object',\r\n    required: ['keywords', 'format']\r\n  },\r\n}\r\n\r\nexport default functionSpecs;\r\n","function apiMapper(client, provider) {\n  if (provider === 'openai') {\n      return {\n      listAssistants: client.beta.assistants.list.bind(null),\n      getAssistant: client.beta.assistants.retrieve,\n      createAssistant: client.beta.assistants.create,\n      listMessages: client.beta.assistants.listMessages,\n      createThread: client.beta.threads.createThread,\n      getThread: client.beta.threads.retrieveThread,\n      getRun: null,\n      submitToolOutputsToRun: client.beta.assistants.submitToolOutputs\n  }\n} else if (provider === 'azureai') {\n  return {\n    listAssistants: client.listAssistants,\n    getAssistant: client.getAssistant,\n    createAssistant: client.createAssistant,\n    listMessages: client.listMessages,\n    createThread: client.createThread,\n    getThread: client.getThread,\n    getRun: client.getRun,\n    submitToolOutputsToRun: client.submitToolOutputsToRun\n  }\n}\n}\nexport default apiMapper;\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function setupAssistant\r\n * @description   Setup the GPT Assistant\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return gptControl object}\r\n */\r\nimport OpenAI from 'openai';\r\nimport loadThread from './loadThread.js';\r\nimport createAssistant from './createAssistant.js';\r\nimport functionSpecs from './builtins/functionSpecs.js';\r\nimport setupViya from './builtins/lib/setupViya.js';\r\nimport apiMapper from './apiMapper.js';\r\n\r\n\r\nasync function setupAssistant(config) {\r\n  let {credentials } = config;\r\n  let {key} = credentials;\r\n\r\n  // create the client\r\n  debugger;\r\n  let client = new OpenAI({ apiKey: key, dangerouslyAllowBrowser: true });\r\n  debugger;\r\n\r\n  //\r\n  // now add user specs and functions.\r\n  // In pass 1 the user list is prepended to the default list\r\n\r\n  let builtinTools = functionSpecs();\r\n  let userTools = config.domainTools.tools.concat(builtinTools.tools);\r\n  let userFunctions = Object.assign(config.domainTools.functionList, builtinTools.functionList);\r\n  let userInstructions = (config.instructions)  ? config.instructions + builtinTools.instructions : builtinTools.instructions;\r\n  let specs = {tools: userTools, functionList: userFunctions};\r\n  let gptControl = {\r\n    provider: config.provider,\r\n    model: config.model,\r\n    assistant: null,\r\n    thread: null,\r\n    client: client,\r\n\r\n    assistantName: config.assistantName,\r\n    assistantid: config.assistantid,\r\n    threadid: '0',\r\n\r\n    domainSpecs: specs,\r\n    instructions: userInstructions,\r\n    appEnv: null,\r\n    api: apiMapper(client, config.provider)\r\n    //config: config save the config for runtime changes\r\n  };\r\n\r\n  gptControl.appEnv = await setupViya(config.viyaConfig);\r\n  \r\n  // create assistant and thread\r\n  debugger;\r\n  gptControl.assistant = await createAssistant(client, gptControl);\r\n  debugger;\r\n  gptControl.thread = await loadThread(client, config.threadid);\r\n  debugger;\r\n  gptControl.threadid = gptControl.thread.id;// just for convenience\r\n  return gptControl;\r\n}\r\nexport default setupAssistant;\r\n","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Instructions for the assistant\r\n * @returns {string} - instructions for the assistant\r\n */\r\nfunction instructions() {\r\n return `\r\n You are a Assistant designed for SAS users. You can help SAS users with their SAS related questions and provide information\r\n  on topics like libraries, reports, tables. You can also fetch data from tables and run SAS programs. You can also help answer questions about the \r\n  data that has been returned from previous queries.\r\n\r\n  If the response from a tool is of the form [{a:1,b:2},{a:1,b:3}] format the table as a html table element like this\r\n  '<table>\r\n     <tr>\r\n       <th>a</th> \r\n      <th>b</th>\r\n     </tr>\r\n    <tr>\r\n    <td>1</td>\r\n    <td>2</td>\r\n    </tr>\r\n    <tr>\r\n   <td>2</td>\r\n   <td>3</td>\r\n   </tr>\r\n   </table>' \r\n  \r\n  if the response from a tool is of the form [1,2,3] then return the data as a html unodered list to the user.\r\n  You can also allow users to attach files to the assistant. \r\n\r\n  `;\r\n}\r\nexport default instructions;\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * Setup the Viya environment\r\n * @param {string} source - cas or compute\r\n * @returns {object} - appEnv\r\n * @async\r\n */\r\n \r\nimport restaf from '@sassoftware/restaf';\r\nimport restaflib from '@sassoftware/restaflib';;\r\n\r\nasync function setupViya(viyaConfig) {\r\n\r\n let appEnv=  {\r\n  host: null,\r\n  logonPayload: null,\r\n  store: null,\r\n  source: 'none',\r\n  currentSource: source,\r\n  session: null,\r\n  servers: null,\r\n  serverName: null,\r\n  casServerName: null, \r\n  sessionID: null,\r\n  compute: {},\r\n  cas: {},\r\n  userData: null,\r\n}\r\n\r\nif (viyaConfig == null) {\r\n  return appEnv;\r\n}\r\nif (viyaConfig.source == 'none') {\r\n  appEnv.userData = viyaConfig.userData;\r\n  return appEnv;\r\n}\r\n\r\n// setup Viya\r\nlet {source, logonPayload} = viyaConfig;\r\n\r\nappEnv.host= logonPayload.host;\r\n  // get list of sources. First one in list is the default\r\n  let sources = source.split(',');\r\n  let defaultSource = sources[0];\r\n\r\n  // logon to the server\r\n  let store = restaf.initStore({casProxy: true});\r\n  await store.logon(logonPayload);\r\n  appEnv.host = logonPayload.host;\r\n  appEnv.logonPayload = logonPayload;\r\n  appEnv.store = store;\r\n  \r\n  // create session and server objects\r\n  // Allow sessions for both servers and cas\r\n  \r\n  // cas service\r\n  if (source.indexOf('cas') >= 0 ) {\r\n    let {session, servers} = await restaflib.casSetup(store, null);\r\n    let casServerName = session.links('execute', 'link', 'server');\r\n    appEnv.cas = {\r\n      session: session,\r\n      servers: servers,\r\n      casServerName: casServerName\r\n    }\r\n    let ssid = await store.apiCall(session.links('self'));\r\n    appEnv.cas.sessionID = ssid.items('id');\r\n    if (defaultSource === 'cas') {\r\n      appEnv.source = 'cas';\r\n      appEnv.session = session;\r\n      appEnv.servers = servers;\r\n      appEnv.serverName = casServerName;\r\n      appEnv.casServerName = casServerName;\r\n      appEnv.sessionID = appEnv.cas.sessionID;\r\n    }\r\n  } \r\n\r\n  // compute service\r\n  if (source.indexOf('compute') > 0) {\r\n    appEnv.compute = {\r\n      servers: null\r\n    }\r\n    let session = await restaflib.computeSetup(store);\r\n    let ssid = await store.apiCall(appEnv.session.links('self'));\r\n    appEnv.compute.sessionID = ssid.items('id');\r\n    if (defaultSource === 'compute') {\r\n      appEnv.source = 'compute';\r\n      appEnv.session = session;\r\n      appEnv.servers = null;\r\n      appEnv.serverName = null;\r\n      appEnv.sessionID = appEnv.compute.sessionID;\r\n    }\r\n  }\r\n  console.log(appEnv);\r\n  return appEnv;\r\n}\r\nexport default setupViya;","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @function createAssistant\r\n * @description   Create a new assistant\r\n * @param {string} client - client object\r\n * @param {object} gptControl - gptControl object\r\n * @returns {promise} - return assistant object\r\n */\r\n\r\n\r\nasync function createAssistant(client, gptControl) {\r\n  let { assistantName, model, assistantid, instructions, domainSpecs, api } = gptControl;\r\n \r\n  // create args for assistant create\r\n  let createArgs = {\r\n    name: assistantName,\r\n    instructions: instructions,\r\n    model: model, \r\n    tools: domainSpecs.tools,\r\n  };\r\n\r\n  let assistant = null;\r\n  debugger;\r\n  console.log(assistantid);\r\n  let newAssistant = (assistantid === \"0\" || assistantid == null);\r\n  if (newAssistant == false){ \r\n    assistant = await client.beta.assistants.retrieve(assistantid);\r\n    debugger;\r\n  } else if (assistantName != null) {\r\n    // local rules: avoid creating a new assistant if one exists\r\n    // use name to find the assistant\r\n    // wish there was a way to filter on names in the API call\r\n    debugger;\r\n    // const myAssistants = await client.beta.assistants.list({\r\n    const myAssistants = await api.listAssistants({\r\n      order: \"desc\",\r\n      limit: \"100\", \r\n    });\r\n    assistant = myAssistants.data.find((a) => {\r\n      if (a.name === assistantName) {\r\n        return a;\r\n      }\r\n    });\r\n    // if first time using this name, create the assistant\r\n    if (assistant == null) {\r\n     //  assistant = await client.beta.assistants.create(createArgs);\r\n      assistant = await api.createAssistant(createArgs);\r\n    }\r\n  }\r\n  \r\n  debugger;\r\n  gptControl.assistantid = assistant.id;\r\n  gptControl.assistant = assistant;\r\n\r\n  return assistant;\r\n}\r\nexport default createAssistant;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function loadThread\r\n * @description   new thread or open existing thread\r\n * @params {object} client - client object\r\n * @param {threadid} threadid - 0|null|existing threadid\r\n * @returns {promise} - return thread object\r\n */\r\nasync function loadThread(client, threadid) {\r\n  let thread = null;\r\n  // If we are reusing the thread, try to retrieve it\r\n  try {\r\n    thread = (threadid === '0' || threadid == null) \r\n      ? await client.beta.threads.create()\r\n      : await client.beta.threads.retrieve(threadid);\r\n  } catch (error) {\r\n    console.log(error); \r\n    console.log(error.status);\r\n    throw new Error(`Error status ${error.status}. Unable to retrieve the thread ${threadid}. see console for details.`);\r\n  }\r\n  debugger;\r\n  return thread;\r\n}\r\nexport default loadThread;\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description Return the latest message from thread\r\n * @param {object}  gptControl- client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {promise} - messages - array of latest assistant messages[ {id, role, type, content}]\r\n * @notes - This function will return latest assistant messages based on limit\r\n */\r\nasync function getLatestMessage(gptControl, limit) {  \r\n  let {client, thread} = gptControl;\r\n  const messages = await client.beta.threads.messages.list(thread.id, {limit:limit});\r\n \r\n  let output = [];\r\n  let data = messages.data;\r\n  for (let i = 0; i < messages.data.length; i++){\r\n    let content = data[i].content[0];\r\n    if (data[i].role === 'assistant') {\r\n      output.push({id: data[i].id, role: data[i].role, type: content.type, content: content[content.type].value});\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  if (output.length > 1) {\r\n    output = output.reverse();\r\n  }\r\n  return output;\r\n\r\n}\r\nexport default getLatestMessage;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Poll run status since there is no streaming support\r\n * @function pollRun\r\n * @params {object} client - client object\r\n * @params {object} thread - thread object\r\n * @params {object} run - run object    \r\n * @params {object} gptControl - gpt  session control object\r\n * @returns {object} - runStatus from client.beta.threads.runs.retrieve\r\n * @notes - Will wait for completion(!(queued,in_progress, cancelling))\r\n */\r\nasync function pollRun(thread, run, gptControl) {\r\n  let { client} = gptControl;\r\n  let done = null;\r\n  let runStatus = null;\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  // Since there is no streaming support, sleep and poll the status\r\n  do {\r\n    debugger;\r\n    runStatus = await client.beta.threads.runs.retrieve(thread.id, run.id);\r\n    \r\n    console.log(\"-------------------\", runStatus.status);\r\n    if ( !(runStatus.status === \"queued\" ||runStatus.status === \"in_progress\" ||\r\n          runStatus.status === \"cancelling\")) {\r\n      debugger;\r\n      done = runStatus.status;\r\n    } else {\r\n      await sleep(2000);\r\n      console.log(\"waited 2000 ms\");\r\n    }\r\n  } while (done === null);\r\n\r\n  return runStatus;\r\n\r\n}\r\nexport default pollRun;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport getLatestMessage from \"./getLatestMessage.js\";\r\nimport required_action from \"./required_action.js\";\r\nimport pollRun from \"./pollRun.js\";\r\n\r\n/**\r\n * @async\r\n * @description - Run the latest prompt from the user\r\n * @function runAssistant\r\n *\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {string} prompt - user's prompt\r\n * @param {string} instructions - Additional instructions for the run\r\n * @param {object} appEnv - application info - ex: Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n \r\n * @returns {promise} - response from GPT(can be text, string, html etc...)\r\n * @notes - This function will run the assistant with the prompt and return the response from the assistant.\r\n * @example \r\n *  let response = await runAssistant(gptControl, prompt, promptInstructions,appEnv); \r\n*/\r\n\r\nasync function runAssistant(gptControl,prompt, instructions, appEnv) {\r\n  let { client, thread } = gptControl;\r\n\r\n  //add the user request to thread\r\n  try {\r\n    let _newMessage = await client.beta.threads.messages.create(thread.id, {\r\n      role: \"user\",\r\n      content: prompt,\r\n    });\r\n  } catch (error) {\r\n    debugger;\r\n    console.log(error);\r\n    throw new Error('Request failed on adding user message to thread.');\r\n  }\r\n  // now run the thread\r\n  // assume caller will catch any thrown errors\r\n  let r = await runPrompt(gptControl, appEnv, instructions);\r\n  return r;\r\n}\r\nasync function runPrompt(gptControl, appEnv, instructions) {\r\n  let { client, assistant, thread } = gptControl;\r\n  let runArgs = {\r\n    assistant_id: assistant.id,\r\n    instructions: instructions != null ? instructions : \"\",\r\n  };\r\n  // Run the assistant with the prompt and poll for completion\r\n  let run = await client.beta.threads.runs.create(thread.id, runArgs);\r\n  let runStatus = await pollRun(thread, run, gptControl);\r\n\r\n  //check for completion status\r\n  let message;\r\n  if (runStatus.status === \"completed\") {\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else if (runStatus.status === \"requires_action\") {\r\n    // make sure that required_action closes the thread run\r\n    let r = await required_action(runStatus, thread, run, gptControl, appEnv);\r\n    console.log('getting latest message ')\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else {\r\n    message = [{ runStatus: runStatus.status }];\r\n  }\r\n  return message;\r\n}\r\nexport default runAssistant;\r\n\r\n//https://platform.openai.com/docs/guides/text-generation/chat-completions-api\r\n","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Handle required actions for Assistant\r\n * @function required_action\r\n * @param {object} runStatus - run status object\r\n * @param {object} thread - thread object\r\n * @param {object} run - run object\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {promise} - status from submitToolOutputs\r\n */\r\nimport pollRun from \"./pollRun.js\";\r\nasync function required_action(runStatus, thread, run,  gptControl, appEnv) {\r\n  let{client,specs} = gptControl;\r\n  let {functionList} = specs;\r\n  \r\n  // get the required actions from the run status\r\n  let requiredActions = runStatus.required_action.submit_tool_outputs.tool_calls;\r\n  \r\n  let toolsOutput = [];\r\n  for (let action of requiredActions) {\r\n    let functionName = action.function.name;\r\n    console.log('Requested function: ', functionName);\r\n    let params = JSON.parse(action.function.arguments);\r\n    debugger;\r\n    try {\r\n       let response = await functionList[functionName](params, appEnv, gptControl);\r\n        toolsOutput.push({\r\n          tool_call_id: action.id,\r\n          output: JSON.stringify(response),\r\n        });\r\n      }\r\n    catch(err){\r\n      toolsOutput.push({\r\n        tool_call_id: action.id,\r\n        output: JSON.stringify(err),\r\n      })\r\n    }\r\n }\r\n// submit the outputs to the thread\r\n console.log('Adding output to messages');\r\n let newRun = await client.beta.threads.runs.submitToolOutputs(\r\n  thread.id, run.id, { tool_outputs: toolsOutput });\r\n\r\n// wait for output to appear in the thread messages\r\n let outputStatus = await pollRun(thread, newRun, gptControl);\r\n\r\nreturn outputStatus;\r\n}\r\nexport default required_action;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description - Close Viya connections.\r\n * @function closeAssistant\r\n * @param {object} gptControl - gpt session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {boolean} - true\r\n */\r\nasync function closeAssistant(_gptControl, _appEnv) {\r\n  console.log('in closeAssistant');\r\n  return true;\r\n}\r\nexport default closeAssistant;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * \r\n * @description Return sepcified number of messages from thread\r\n * @param {object}  gptControl- client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {*} - messages - array of messages[ {id, role, type, content}]\r\n * @notes - This function will return the specified number of messages from the thread\r\n * Typically the top 2 will be the assistant message and user's prompt\r\n */\r\nasync function getMessages(gptControl, limit) {  \r\n  let {client, thread} = gptControl;\r\n  const messages = await client.beta.threads.messages.list(thread.id, {limit:limit});\r\n  //console.log('body', JSON.stringify(messages.body.data, null, 4));\r\n  let output = messages.data.map((m) => {\r\n    let content = m.content[0];\r\n    return {id: m.id, role: m.role, type: content.type, content: content[content.type].value};\r\n  });\r\n  return output;\r\n\r\n}\r\nexport default getMessages;","\n/*\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nasync function uploadFile(fileHandle,purpose, gptControl) {\n  let { client, assistant } = gptControl;\n\n  // get fileid\n  const fileId = await client.files.create({\n    file: fileHandle,\n    purpose: purpose})\n  console.log('.......................', fileId); \n  \n  debugger;\n  let currentFileIds = [].concat(assistant.file_ids);\n  currentFileIds.push(fileId.id);\n  console.log(currentFileIds);\n  debugger;\n  try {\n    let newAssistant = await client.beta.assistants.update(assistant.id, \n      {\n      file_ids: currentFileIds\n      });\n    gptControl.assistant = newAssistant;\n    debugger;\n    console.log('.......................', newAssistant);\n  } catch (e) {\n    console.log(e);\n  }\n  return currentFileIds;\n}\nexport default uploadFile;"],"names":["string2Table","table","source","iTable","lib","parts","split","length","name","rows2csv","arr","headers","Object","keys","join","rows","map","obj","line","sep","values","value","valueString","replace","trim","toString","value2String","caslRun","computeRun","computeResults","restaflib","getLibraryList","restafedit","async","_listSASObjects","params","appEnv","resource","limit","store","includes","toLowerCase","s","addServices","payload","qs","start","items","apiCall","links","itemsList","toJS","JSON","stringify","_listSASDataLib","r","_listSASTables","library","p","_getTableList","_listColumns","_getTableColumns","_getData","idescribeTable","data","_runSAS","src","session","results","computeSummary","log","logText","push","logAsArray","_keywords","keywords","format","t","forEach","k","i","_describeTable","where","csv","sessionID","console","appControl","casServerName","computeContext","initialFetch","tappEnv","setup","logonPayload","describe","scrollTable","tableSummary","getTableSummary","columns","state","err","error","_idescribeTable","_getDataFunctionSpec","description","parameters","properties","type","required","_listSASObjectsFunctionSpec","_listSASDataLibFunctionSpec","_listSASTablesFunctionSpec","_listColumnsFunctionSpec","_describeTableSpec","_runSASFunctionSpec","file","_keywordsFunctionSpec","enum","apiMapper","client","provider","listAssistants","beta","assistants","list","bind","getAssistant","retrieve","createAssistant","create","listMessages","createThread","threads","getThread","retrieveThread","getRun","submitToolOutputsToRun","submitToolOutputs","setupAssistant","config","credentials","key","OpenAI","apiKey","dangerouslyAllowBrowser","builtinTools","specs","tools","f","function","assign","functionList","instructions","functionSpecs","userTools","domainTools","concat","userFunctions","gptControl","model","assistant","thread","assistantName","assistantid","threadid","domainSpecs","api","viyaConfig","host","currentSource","servers","serverName","compute","cas","userData","defaultSource","restaf","initStore","casProxy","logon","indexOf","casSetup","ssid","computeSetup","setupViya","createArgs","order","find","a","id","status","Error","loadThread","getLatestMessage","messages","output","content","role","reverse","pollRun","run","done","runStatus","sleep","ms","Promise","resolve","setTimeout","runs","runAssistant","prompt","message","runArgs","assistant_id","requiredActions","required_action","submit_tool_outputs","tool_calls","toolsOutput","action","functionName","parse","arguments","response","tool_call_id","newRun","tool_outputs","runPrompt","closeAssistant","_gptControl","_appEnv","getMessages","m","uploadFile","fileHandle","purpose","fileId","files","currentFileIds","file_ids","newAssistant","update","e"],"mappings":"sIAUA,SAASA,EAAaC,EAAOC,GAC3B,IAAIC,EAAS,CAAE,EACXC,EAAkB,QAAXF,EAAoB,SAAW,SACtCG,EAAQJ,EAAMK,MAAM,KACxB,OAAqB,IAAjBD,EAAME,QACRJ,EAAOC,GAAOC,EAAM,GACpBF,EAAOK,KAAOH,EAAM,GACbF,GAEA,IAEX,CCjBA,SAASM,EAASC,GAEhB,GAAmB,IAAfA,EAAIH,OACN,MAAO,GAIT,IAAII,EAAUC,OAAOC,KAAKH,EAAI,IAAII,KAAK,KAAO,KAC1CC,EAAM,GAUV,OATAL,EAAIM,IAAIC,IACN,IAAIC,EAAM,GACNC,EAAM,GACVP,OAAOQ,OAAOH,GAAKD,IAAIK,IACrBH,EAAOA,EAAOC,EAOpB,SAAuBE,GACrB,IAAIC,EASJ,OAPEA,EADW,KAATD,GAAyB,MAATA,EACJ,GACY,iBAAVA,GAChBA,EAAQA,EAAME,QAAQ,KAAM,OACRC,OAENH,EAAMI,WAEfH,CACT,CAlB0BI,CAAaL,GACjCF,EAAM,GACR,GACAJ,EAAOA,EAAOG,EAAO,IACvB,GACOP,EAAUI,CACnB,CCJA,MAAMY,QAAEA,EAAOC,WAAEA,EAAUC,eAAEA,GAAmBC,GAC1CC,eAAEA,GAAkDC,EAiB1DC,eAAeC,EAAgBC,EAAQC,GACrC,IAAIC,SAAEA,EAAQC,MAAEA,GAAUH,EACtBI,EAAQH,EAAOG,MAGnB,GADAD,EAAiB,MAATA,EAAgB,GAAKA,GAE0C,IAArE,CAAC,QAAS,UAAW,WAAWE,SAASH,EAASI,eAElD,MAAQ,qBAAoBJ,oCAE9B,IACIK,SADUH,EAAMI,YAAYN,IACtBA,GACNO,EAAU,CACZC,GAAI,CACFP,MAAOA,EACPQ,MAAO,IAIPC,SADgBR,EAAMS,QAAQN,EAAEO,MAAMZ,GAAWO,IACjCM,YAAYC,OAEhC,OAAOC,KAAKC,UAAUN,EACxB,CACAd,eAAeqB,EAAgBnB,EAAQC,GACrC,IAAImB,QAAUxB,EAAeK,GAC7B,OAAOgB,KAAKC,UAAUE,EACxB,CACAtB,eAAeuB,EAAerB,EAAQC,GACpC,IAAIqB,QAAEA,EAAOnB,MAAEA,GAAUH,EACrBuB,EAAI,CACNb,GAAI,CACFP,MAAgB,MAATA,EAAgB,GAAKA,EAC5BQ,MAAO,IAGPS,QAAUI,cAAcF,EAASrB,EAAQsB,GAC7C,OAAON,KAAKC,UAAUE,EACxB,CACAtB,eAAe2B,EAAazB,EAAQC,GAClC,IAAInC,MAAEA,GAAUkC,GACZjC,OAAEA,GAAWkC,EAEbjC,EAASH,EAAaC,EAAOC,GACjC,GAAe,OAAXC,EACF,MAAO,mEAGT,IAAIoD,QAAUM,iBAAiB3D,EAAQC,EAAQiC,GAE/C,OAAOgB,KAAKC,UAAUE,EACxB,CACAtB,eAAe6B,EAAS3B,EAAQC,GAC9B,IAAImB,QAAUQ,eAAe5B,EAAQC,GACrC,OAAOgB,KAAKC,UAAU,CAACpD,MAAOsD,EAAEtD,MAAO+D,KAAMT,EAAES,MACjD,CACA/B,eAAegC,EAAQ9B,EAAQC,GAC7B,IAAI8B,IAAEA,GAAQ/B,GACVI,MAAEA,EAAK4B,QAAEA,GAAY/B,EAEzB,GAAsB,QAAlBA,EAAOlC,OAAkB,CAC3B,IAAIqD,QAAU5B,EAAQY,EAAO4B,EAASD,EAAK,IAAI,GAC/C,OAAOd,KAAKC,UAAUE,EAAEa,QAC1B,CAAO,CACL,IAAIC,QAAuBzC,EAAWW,EAAO4B,EAASD,GAEtD,OClGJ,SAAoBI,GAClB,IAAIC,EAAU,GAUd,OARAD,EAAItD,IAAKgD,IACP,IAAI9C,EAAO8C,EAAK9C,KAAKK,QAAS,iBAAkB,IAE7CgD,EAAQC,KADU,IAAhBtD,EAAKX,OACM,MAEFW,EACd,GAEKqD,CAET,CDqFWE,OADS5C,EAAeU,EAAO8B,EAAgB,OAExD,CACF,CA0BApC,eAAeyC,EAAUvC,GACvB,IAAIwC,SAAEA,EAAQC,OAAEA,GAAWzC,EAE3B,OAAQyC,GACN,IAAK,OAAQ,CACX,IAAIC,EAAI,OAKR,OAJAF,EAASrE,MAAM,KAAKwE,QAASC,IAC3BF,GAAM,OAAME,QAAE,GAEhBF,GAAK,QACEA,CACT,CACA,IAAK,QACH,OAAOF,EAASrE,MAAM,KACxB,IAAK,SAAU,CACb,IAAIiD,EAAI,CAAA,EAIR,OAHAoB,EAASrE,MAAM,KAAKwE,QAAQ,CAACC,EAAGC,KAC9BzB,EAAG,MAAKyB,KAAOD,CAAAA,GAEVxB,CACT,CACA,QACE,OAAOpB,EAEb,CACAF,eAAegD,EAAe9C,EAAQC,GACrC,IAAImB,QAILtB,eAA+BE,EAAQC,GAErC,IAAInC,MAAEA,EAAKqC,MAAEA,EAAKsC,OAAEA,EAAMM,MAAEA,EAAKC,IAAEA,GAAQhD,GACvCjC,OAAEA,EAAMkF,UAAEA,GAAchD,EAC5B+C,EAAa,MAAPA,GAAsBA,EAC5BE,QAAQf,IAAInC,GACZ,IAAIhC,EAASH,EAAaC,EAAOC,GACjC,GAAe,OAAXC,EACF,MAAO,mEAGT,IAAImF,EAAa,CACfpF,OAAQA,EACRD,MAAOE,EACPoF,cAAenD,EAAOmD,cACtBC,eAAgBpD,EAAOoD,eACvBC,aAAc,CACZ5C,GAAI,CACFC,MAAO,EACPR,MAAgB,MAATA,EAAgB,EAAIA,EAC3BsC,OAAkB,MAAVA,GAAyBA,EACjCM,MAAgB,MAATA,EAAgB,GAAKA,KAK9BQ,QAAgB1D,EAAW2D,MAC7BvD,EAAOwD,aACPN,EACAF,GAGES,EAAS,CAAA,EACb,UACQ7D,EAAW8D,YAAY,QAASJ,GAGtCG,EAAW,CACT5F,MAAOE,EACP4F,mBAJuB/D,EAAWgE,gBAAgBN,GAKlDO,QAASP,EAAQQ,MAAMD,QACvBjC,MAAe,IAARmB,EAAkBO,EAAQQ,MAAMlC,KAAOvD,EAASiF,EAAQQ,MAAMlC,MAEzE,CAAE,MAAOmC,GACPd,QAAQf,IAAI6B,GACZN,EAAW,CAACO,MAAOD,EACrB,CACA,OAAON,CACT,CApDeQ,CAAgBlE,EAAQC,GACtC,OAAOgB,KAAKC,UAAUE,EAEvB,CEhHA,MAAM+C,EAAuB,CAC3B9F,KAAM,WACN+F,YAAc,kVAKdC,WAAY,CACVC,WAAY,CACVxG,MAAO,CACLyG,KAAM,SACNH,YACE,6DAEJjE,MAAO,CACLoE,KAAM,UACNH,YAAa,2CAEf3B,OAAU,CACR8B,KAAM,UACNH,YAAa,qCAEfrB,MAAO,CACLwB,KAAM,SACNH,YAAa,sCAEfpB,IAAK,CACHuB,KAAM,UACNH,YAAa,8CAGjBG,KAAM,SACNC,SAAU,CAAC,WAGTC,EAA8B,CAClCpG,KAAM,kBACN+F,YACE,qHACFC,WAAY,CACVC,WAAY,CACVpE,SAAU,CACRqE,KAAM,SACNH,YACE,mEAEJjE,MAAO,CACLoE,KAAM,UACNH,YAAa,wBAGjBG,KAAM,SACNC,SAAU,CAAC,WAAY,WAGrBE,EAA8B,CAClCrG,KAAM,kBACN+F,YACE,wJACFC,WAAY,CACVC,WAAY,CACVnE,MAAO,CACLoE,KAAM,UACNH,YAAa,uEAGnBG,KAAM,WAGFI,EAA6B,CACjCtG,KAAM,iBACN+F,YACE,gGACFC,WAAY,CACVC,WAAY,CACVhD,QAAS,CACPiD,KAAM,SACNH,YAAa,gDAEfjE,MAAO,CACLoE,KAAM,UACNH,YACE,2EAGNG,KAAM,SACNC,SAAU,CAAC,UAAW,WAGpBI,EAA2B,CAC/BvG,KAAM,eACN+F,YAAa,+EACbC,WAAY,CACVC,WAAY,CACVxG,MAAO,CACLyG,KAAM,SACNH,YAAa,8BAGjBG,KAAM,SACNC,SAAU,CAAC,WAGTK,EAAqB,CACzBxG,KAAM,iBACN+F,YAAa,+HACbC,WAAY,CACVC,WAAY,CACVxG,MAAO,CACLyG,KAAM,SACNH,YAAa,6BAEf3B,OAAQ,CACN8B,KAAM,UACNH,YAAa,iCAGjBG,KAAM,SACNC,SAAU,CAAC,WAGTM,EAAsB,CAC1BzG,KAAM,UACN+F,YACE,gEACFC,WAAY,CACVC,WAAY,CACVS,KAAM,CACJR,KAAM,SACNH,YAAa,4BAGjBG,KAAM,SACNC,SAAU,CAAC,UAuBTQ,EAAwB,CAC5B3G,KAAM,YACN+F,YAAa,wEACbC,WAAY,CAEVC,WAAY,CACV9B,SAAU,CACR+B,KAAM,SACNH,YAAa,iDAEf3B,OAAQ,CACN8B,KAAM,SACNU,KAAM,CAAC,OAAQ,QAAS,UACxBb,YAAa,sBAGjBG,KAAM,SACNC,SAAU,CAAC,WAAY,YC5N3B,SAASU,EAAUC,EAAQC,GACzB,MAAiB,WAAbA,EACO,CACPC,eAAgBF,EAAOG,KAAKC,WAAWC,KAAKC,KAAK,MACjDC,aAAcP,EAAOG,KAAKC,WAAWI,SACrCC,gBAAiBT,EAAOG,KAAKC,WAAWM,OACxCC,aAAcX,EAAOG,KAAKC,WAAWO,aACrCC,aAAcZ,EAAOG,KAAKU,QAAQD,aAClCE,UAAWd,EAAOG,KAAKU,QAAQE,eAC/BC,OAAQ,KACRC,uBAAwBjB,EAAOG,KAAKC,WAAWc,mBAE7B,YAAbjB,EACF,CACLC,eAAgBF,EAAOE,eACvBK,aAAcP,EAAOO,aACrBE,gBAAiBT,EAAOS,gBACxBE,aAAcX,EAAOW,aACrBC,aAAcZ,EAAOY,aACrBE,UAAWd,EAAOc,UAClBE,OAAQhB,EAAOgB,OACfC,uBAAwBjB,EAAOiB,6BAT5B,CAYP,CCLAtG,eAAewG,EAAeC,GAC5B,IAAIC,YAACA,GAAgBD,GACjBE,IAACA,GAAOD,EAIRrB,EAAS,IAAIuB,EAAO,CAAEC,OAAQF,EAAKG,yBAAyB,IAO5DC,EFpBN,SAAuBzB,GACrB,IAAI0B,EAAQ,CACVrC,EACAC,EACAC,EACAC,EACAC,EACAV,EACAW,EACAE,GAME+B,EAAQ,CACV,CAACxC,KAAM,cAgBT,OAbEwC,EAAM1E,KAAK,CAACkC,KAAM,cAGpBuC,EAAMnE,QAASqE,IACb,IAAI5F,EAAI,CACNmD,KAAM,WACN0C,SAAUxI,OAAOyI,OAAO,CAAE,EAAEF,IAE9BD,EAAM1E,KAAKjB,EAAC,GAKP,CAAE0F,MAAOA,EAAOC,MAAOA,EAAOI,aFrBzB,CACVxF,WACA5B,kBACAsB,iBACAI,eACAN,kBACAW,UACAS,YACAO,kBEa+DsE,aGlC1D,8zBHmCT,CEbqBC,GACfC,EAAYf,EAAOgB,YAAYR,MAAMS,OAAOX,EAAaE,OACzDU,EAAgBhJ,OAAOyI,OAAOX,EAAOgB,YAAYJ,aAAcN,EAAaM,cAG5EO,EAAa,CACftC,SAAUmB,EAAOnB,SACjBuC,MAAOpB,EAAOoB,MACdC,UAAW,KACXC,OAAQ,KACR1C,OAAQA,EAER2C,cAAevB,EAAOuB,cACtBC,YAAaxB,EAAOwB,YACpBC,SAAU,IAEVC,YAZU,CAAClB,MAAOO,EAAWH,aAAcM,GAa3CL,aAdsBb,EAAOa,aAAiBb,EAAOa,aAAeP,EAAaO,aAAeP,EAAaO,aAe7GnH,OAAQ,KACRiI,IAAKhD,EAAUC,EAAQoB,EAAOnB,WAahC,OATAsC,EAAWzH,aExCbH,eAAyBqI,GAExB,IAAIlI,EAAS,CACZmI,KAAM,KACN3E,aAAc,KACdrD,MAAO,KACPrC,OAAQ,OACRsK,cAAetK,EACfiE,QAAS,KACTsG,QAAS,KACTC,WAAY,KACZnF,cAAe,KACfH,UAAW,KACXuF,QAAS,CAAE,EACXC,IAAK,CAAA,EACLC,SAAU,MAGZ,GAAkB,MAAdP,EACF,OAAOlI,EAET,GAAyB,QAArBkI,EAAWpK,OAEb,OADAkC,EAAOyI,SAAWP,EAAWO,SACtBzI,EAIT,IAAIlC,OAACA,EAAM0F,aAAEA,GAAgB0E,EAE7BlI,EAAOmI,KAAM3E,EAAa2E,KAExB,IACIO,EADU5K,EAAOI,MAAM,KACC,GAGxBiC,EAAQwI,EAAOC,UAAU,CAACC,UAAU,IAUxC,SATM1I,EAAM2I,MAAMtF,GAClBxD,EAAOmI,KAAO3E,EAAa2E,KAC3BnI,EAAOwD,aAAeA,EACtBxD,EAAOG,MAAQA,EAMXrC,EAAOiL,QAAQ,QAAU,EAAI,CAC/B,IAAIhH,QAACA,EAAOsG,QAAEA,SAAiB3I,EAAUsJ,SAAS7I,EAAO,MACrDgD,EAAgBpB,EAAQlB,MAAM,UAAW,OAAQ,UACrDb,EAAOwI,IAAM,CACXzG,QAASA,EACTsG,QAASA,EACTlF,cAAeA,GAEjB,IAAI8F,QAAa9I,EAAMS,QAAQmB,EAAQlB,MAAM,SAC7Cb,EAAOwI,IAAIxF,UAAYiG,EAAKtI,MAAM,MACZ,QAAlB+H,IACF1I,EAAOlC,OAAS,MAChBkC,EAAO+B,QAAUA,EACjB/B,EAAOqI,QAAUA,EACjBrI,EAAOsI,WAAanF,EACpBnD,EAAOmD,cAAgBA,EACvBnD,EAAOgD,UAAYhD,EAAOwI,IAAIxF,UAElC,CAGA,GAAIlF,EAAOiL,QAAQ,WAAa,EAAG,CACjC/I,EAAOuI,QAAU,CACfF,QAAS,MAEX,IAAItG,QAAgBrC,EAAUwJ,aAAa/I,GACvC8I,QAAa9I,EAAMS,QAAQZ,EAAO+B,QAAQlB,MAAM,SACpDb,EAAOuI,QAAQvF,UAAYiG,EAAKtI,MAAM,MAChB,YAAlB+H,IACF1I,EAAOlC,OAAS,UAChBkC,EAAO+B,QAAUA,EACjB/B,EAAOqI,QAAU,KACjBrI,EAAOsI,WAAa,KACpBtI,EAAOgD,UAAYhD,EAAOuI,QAAQvF,UAEtC,CAEA,OADAC,QAAQf,IAAIlC,GACLA,CACT,CF3C4BmJ,CAAU7C,EAAO4B,YAI3CT,EAAWE,gBG5Cb9H,eAA+BqF,EAAQuC,GACrC,IAAII,cAAEA,EAAaH,MAAEA,EAAKI,YAAEA,EAAWX,aAAEA,EAAYa,YAAEA,EAAWC,IAAEA,GAAQR,EAGxE2B,EAAa,CACfhL,KAAMyJ,EACNV,aAAcA,EACdO,MAAOA,EACPZ,MAAOkB,EAAYlB,OAGjBa,EAAY,KAiChB,OA/BA1E,QAAQf,IAAI4F,GAEQ,IADgB,MAAhBA,GAAsC,MAAfA,GAEzCH,QAAkBzC,EAAOG,KAAKC,WAAWI,SAASoC,GAExB,MAAjBD,IAUTF,SAJ2BM,EAAI7C,eAAe,CAC5CiE,MAAO,OACPnJ,MAAO,SAEgB0B,KAAK0H,KAAMC,IAClC,GAAIA,EAAEnL,OAASyJ,EACb,OAAO0B,CACT,GAGe,MAAb5B,IAEFA,QAAkBM,EAAItC,gBAAgByD,KAK1C3B,EAAWK,YAAcH,EAAU6B,GACnC/B,EAAWE,UAAYA,EAEhBA,CACT,CHD+BhC,CAAgBT,EAAQuC,GAErDA,EAAWG,aIjDb/H,eAA0BqF,EAAQ6C,GAChC,IAAIH,EAAS,KAEb,IACEA,EAAuB,MAAbG,GAAgC,MAAZA,QACpB7C,EAAOG,KAAKU,QAAQH,eACpBV,EAAOG,KAAKU,QAAQL,SAASqC,EACzC,CAAE,MAAO/D,GAGP,MAFAf,QAAQf,IAAI8B,GACZf,QAAQf,IAAI8B,EAAMyF,QACZ,IAAIC,MAAO,gBAAe1F,EAAMyF,yCAAyC1B,8BACjF,CAEA,OAAOH,CACT,CJmC4B+B,CAAWzE,EAAQoB,EAAOyB,UAEpDN,EAAWM,SAAWN,EAAWG,OAAO4B,GACjC/B,CACT,CKrDA5H,eAAe+J,EAAiBnC,EAAYvH,GAC1C,IAAIgF,OAACA,EAAM0C,OAAEA,GAAUH,EACvB,MAAMoC,QAAiB3E,EAAOG,KAAKU,QAAQ8D,SAAStE,KAAKqC,EAAO4B,GAAI,CAACtJ,MAAMA,IAE3E,IAAI4J,EAAS,GACTlI,EAAOiI,EAASjI,KACpB,IAAK,IAAIgB,EAAI,EAAGA,EAAIiH,EAASjI,KAAKzD,OAAQyE,IAAI,CAC5C,IAAImH,EAAUnI,EAAKgB,GAAGmH,QAAQ,GAC9B,GAAqB,cAAjBnI,EAAKgB,GAAGoH,KAGV,MAFAF,EAAO1H,KAAK,CAACoH,GAAI5H,EAAKgB,GAAG4G,GAAIQ,KAAMpI,EAAKgB,GAAGoH,KAAM1F,KAAMyF,EAAQzF,KAAMyF,QAASA,EAAQA,EAAQzF,MAAMrF,OAIxG,CAIA,OAHI6K,EAAO3L,OAAS,IAClB2L,EAASA,EAAOG,WAEXH,CAET,CCdAjK,eAAeqK,EAAQtC,EAAQuC,EAAK1C,GAClC,IAAIvC,OAAEA,GAAUuC,EACZ2C,EAAO,KACPC,EAAY,KAChB,SAASC,EAAMC,GACb,OAAW,IAAAC,QAASC,GAAYC,WAAWD,EAASF,GACtD,CAEA,GAEEF,QAAkBnF,EAAOG,KAAKU,QAAQ4E,KAAKjF,SAASkC,EAAO4B,GAAIW,EAAIX,IAEnEvG,QAAQf,IAAI,sBAAuBmI,EAAUZ,QACjB,WAArBY,EAAUZ,QAA2C,gBAArBY,EAAUZ,QACtB,eAArBY,EAAUZ,OAEdW,EAAOC,EAAUZ,cAEXa,EAAM,KACZrH,QAAQf,IAAI,yBAEE,OAATkI,GAET,OAAOC,CAET,CClBAxK,eAAe+K,EAAanD,EAAWoD,EAAQ1D,EAAcnH,GAC3D,IAAIkF,OAAEA,EAAM0C,OAAEA,GAAWH,EAGzB,UAC0BvC,EAAOG,KAAKU,QAAQ8D,SAASjE,OAAOgC,EAAO4B,GAAI,CACrEQ,KAAM,OACND,QAASc,GAEb,CAAE,MAAO7G,GAGP,MADAf,QAAQf,IAAI8B,GACF,IAAA0F,MAAM,mDAClB,CAGA,IAAIvI,QAGNtB,eAAyB4H,EAAYzH,EAAQmH,GAC3C,IAUI2D,GAVA5F,OAAEA,EAAMyC,UAAEA,EAASC,OAAEA,GAAWH,EAChCsD,EAAU,CACZC,aAAcrD,EAAU6B,GACxBrC,aAA8B,MAAhBA,EAAuBA,EAAe,IAGlDgD,QAAYjF,EAAOG,KAAKU,QAAQ4E,KAAK/E,OAAOgC,EAAO4B,GAAIuB,GACvDV,QAAkBH,EAAQtC,EAAQuC,EAAK1C,GAc3C,MAVyB,cAArB4C,EAAUZ,OACZqB,QAAgBlB,EAAiBnC,EAAY,GACf,oBAArB4C,EAAUZ,cCvCvB5J,eAA+BwK,EAAWzC,EAAQuC,EAAM1C,EAAYzH,GAClE,IAAGkF,OAACA,EAAM2B,MAACA,GAASY,GAChBP,aAACA,GAAgBL,EAGjBoE,EAAkBZ,EAAUa,gBAAgBC,oBAAoBC,WAEhEC,EAAc,GAClB,IAAK,IAAIC,KAAUL,EAAiB,CAClC,IAAIM,EAAeD,EAAOtE,SAAS5I,KACnC6E,QAAQf,IAAI,uBAAwBqJ,GACpC,IAAIxL,EAASiB,KAAKwK,MAAMF,EAAOtE,SAASyE,WAExC,IACG,IAAIC,QAAiBxE,EAAaqE,GAAcxL,EAAQC,EAAQyH,GAC/D4D,EAAYjJ,KAAK,CACfuJ,aAAcL,EAAO9B,GACrBM,OAAQ9I,KAAKC,UAAUyK,IAE3B,CACF,MAAM3H,GACJsH,EAAYjJ,KAAK,CACfuJ,aAAcL,EAAO9B,GACrBM,OAAQ9I,KAAKC,UAAU8C,IAE3B,CACH,CAEAd,QAAQf,IAAI,6BACZ,IAAI0J,QAAe1G,EAAOG,KAAKU,QAAQ4E,KAAKvE,kBAC3CwB,EAAO4B,GAAIW,EAAIX,GAAI,CAAEqC,aAAcR,IAKrC,aAF0BnB,EAAQtC,EAAQgE,EAAQnE,EAGlD,CDKkByD,CAAgBb,EAAWzC,EAAQuC,EAAK1C,EAAYzH,GAClEiD,QAAQf,IAAI,2BACZ4I,QAAgBlB,EAAiBnC,EAAY,IAE7CqD,EAAU,CAAC,CAAET,UAAWA,EAAUZ,SAE7BqB,CACT,CA1BgBgB,CAAUrE,EAAYzH,EAAQmH,GAC5C,OAAOhG,CACT,CE9BAtB,eAAekM,EAAeC,EAAaC,GAEzC,OADAhJ,QAAQf,IAAI,uBAEd,CCFArC,eAAeqM,EAAYzE,EAAYvH,GACrC,IAAIgF,OAACA,EAAM0C,OAAEA,GAAUH,EAOvB,aANuBvC,EAAOG,KAAKU,QAAQ8D,SAAStE,KAAKqC,EAAO4B,GAAI,CAACtJ,MAAMA,KAErD0B,KAAKhD,IAAKuN,IAC9B,IAAIpC,EAAUoC,EAAEpC,QAAQ,GACxB,MAAO,CAACP,GAAI2C,EAAE3C,GAAIQ,KAAMmC,EAAEnC,KAAM1F,KAAMyF,EAAQzF,KAAMyF,QAASA,EAAQA,EAAQzF,MAAMrF,MAAK,EAI5F,CCjBAY,eAAeuM,EAAWC,EAAWC,EAAS7E,GAC5C,IAAIvC,OAAEA,EAAMyC,UAAEA,GAAcF,EAG5B,MAAM8E,QAAerH,EAAOsH,MAAM5G,OAAO,CACvCd,KAAMuH,EACNC,QAASA,IACXrJ,QAAQf,IAAI,0BAA2BqK,GAGvC,IAAIE,EAAiB,GAAGlF,OAAOI,EAAU+E,UACzCD,EAAerK,KAAKmK,EAAO/C,IAC3BvG,QAAQf,IAAIuK,GAEZ,IACE,IAAIE,QAAqBzH,EAAOG,KAAKC,WAAWsH,OAAOjF,EAAU6B,GAC/D,CACAkD,SAAUD,IAEZhF,EAAWE,UAAYgF,EAEvB1J,QAAQf,IAAI,0BAA2ByK,EACzC,CAAE,MAAOE,GACP5J,QAAQf,IAAI2K,EACd,CACA,OAAOJ,CACT"}