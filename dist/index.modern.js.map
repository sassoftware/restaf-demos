{"version":3,"file":"index.modern.js","sources":["../src/builtins/lib/string2Table.js","../src/builtins/lib/rows2csv.js","../src/builtins/functions.js","../src/builtins/lib/logAsArray.js","../src/builtins/functionSpecs.js","../src/apiMapper.js","../src/setupAssistant.js","../src/builtins/instructions.js","../src/builtins/instructionsNode.js","../src/builtins/instructionsWeb.js","../src/builtins/lib/setupViya.js","../src/createAssistant.js","../src/loadThread.js","../src/getLatestMessage.js","../src/pollRun.js","../src/required_action.js","../src/runAssistant.js","../src/deleteAssistant.js","../src/getMessages.js","../src/uploadFile.js","../src/cancelRun.js"],"sourcesContent":["/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\n/**\r\n * \r\n * @param {string} table as a.b\r\n * @param {string} source (cas or compute)\r\n * @returns {object} - {libref: a, name: b} or null\r\n */\r\nfunction string2Table(table, source) {\r\n  let iTable = {};\r\n  let lib = (source === 'cas') ? 'caslib' : 'libref';\r\n  let parts = table.split('.');  \r\n  if (parts.length === 2) {\r\n    iTable[lib] = parts[0];\r\n    iTable.name = parts[1];\r\n    return iTable;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\nexport default string2Table;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction rows2csv(arr) {\r\n  // Check if there's data\r\n  if (arr.length === 0) {\r\n    return '';\r\n  }\r\n\r\n  // Extract headers\r\n  let keys = Object.keys(arr[0]).filter(key => !(key === '_rowIndex'|| key === '_modified'));\r\n  let headers = keys.join(',') + '\\n';\r\n\r\n  let rows ='';\r\n  arr.map(row => {\r\n    let line ='';\r\n    let sep = '';\r\n    for (let key in row) {\r\n      if (key === '_rowIndex'|| key === '_modified') {\r\n        continue;\r\n      }\r\n      line = line + sep + value2String(row[key]);\r\n      sep = ',';\r\n    }\r\n    rows = rows + line + '\\n';\r\n  })\r\n  return headers + rows;\r\n}\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == '.' || value == null) {\r\n    valueString = '';\r\n  } else if (typeof value === 'string') {\r\n    value = value.replace(/\"/g, '\"\"');\r\n    valueString = value.trim()\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\nexport default rows2csv;\r\n\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n//import restafedit from \"@sassoftware/restafedit\";\r\n//import restaflib from \"@sassoftware/restaflib\"\r\n\r\nimport logAsArray from \"./lib/logAsArray.js\";\r\nimport string2Table from \"./lib/string2Table.js\";\r\nimport rows2csv from \"./lib/rows2csv.js\";\r\n\r\n/**\r\n * @description Function for the assistant\r\n * @private\r\n * @function functionSpecs\r\n * @returns {object} - object containing function specs\r\n * @returns {object} - a functions object({f1: function1, f2: function2, ...})\r\n *\r\n */\r\n\r\n//const fss = fs.promises;\r\n// const { caslRun, computeRun, computeResults } = restaflib;\r\n// const { getLibraryList, getTableList, getTableColumns } = restafedit;\r\n\r\nfunction functions() {\r\n  let flist = {\r\n    _getData,\r\n    _listSASObjects,\r\n    _listSASTables,\r\n    _listColumns,\r\n    _listSASDataLib,\r\n    _runSAS,\r\n    _keywords,\r\n    _describeTable,\r\n    _catalogSearch\r\n    // _contextData\r\n  };\r\n  return flist;\r\n}\r\n\r\nasync function _catalogSearch(params, appEnv, gptControl) {\r\n  let { metadata } = params;\r\n  let { store } = appEnv;\r\n  \r\n  console.log('metadata', metadata) \r\n  let q = metadata.replace(/,/g, ' ');\r\n  console.log(metadata) \r\n  //tbd:  need to implement a q collector from the metadata string to allow\r\n  // for free form queries to the catalog en\r\n\r\n  try {\r\n    debugger;\r\n    let {catalog} = await store.addServices(\"catalog\");\r\n    debugger;\r\n    let payload = {\r\n      qs: {q: q}\r\n    };\r\n    console.log(payload);\r\n    let r = await store.apiCall(catalog.links(\"search\"), payload);\r\n    return JSON.stringify(r.items(), null,4);\r\n  } catch (err) {\r\n    console.log(JSON.stringify(err));\r\n    return \"Error searching catalog\";\r\n  }\r\n}\r\n\r\nasync function _listSASObjects(params, appEnv) {\r\n  let { resource, limit } = params;\r\n  let store = appEnv.store;\r\n\r\n  limit = limit == null ? 10 : limit;\r\n  if (\r\n    [\"files\", \"folders\", \"reports\"].includes(resource.toLowerCase()) === false\r\n  ) {\r\n    return `{Error: \"resource ${resource} is not supported at this time\"}`;\r\n  }\r\n  let r = await store.addServices(resource);\r\n  let s = r[resource];\r\n  let payload = {\r\n    qs: {\r\n      limit: limit,\r\n      start: 0,\r\n    },\r\n  };\r\n  let results = await store.apiCall(s.links(resource), payload);\r\n  let items = results.itemsList();\r\n\r\n  return JSON.stringify(items, null,4);\r\n}\r\nasync function _listSASDataLib(params, appEnv) {\r\n  let { limit, source, start } = params;\r\n  let payload = {\r\n    qs: {\r\n      limit: limit == null ? 10 : limit,\r\n      start: start == null ? 0 : start,\r\n    },\r\n  };\r\n  let r = await appEnv.restafedit.getLibraryList(appEnv, payload);\r\n  return JSON.stringify(r, null,4);\r\n}\r\nasync function _listSASTables(params, appEnv) {\r\n  let { library, limit } = params;\r\n  let p = {\r\n    qs: {\r\n      limit: limit == null ? 10 : limit,\r\n      start: 0,\r\n    },\r\n  };\r\n  let r = await appEnv.restafedit.getTableList(library, appEnv, p);\r\n  return JSON.stringify(r, null,4);\r\n}\r\nasync function _listColumns(params, appEnv) {\r\n  let { table } = params;\r\n  let { source } = appEnv;\r\n\r\n  let iTable = string2Table(table, source);\r\n  if (iTable === null) {\r\n    return \"Table must be specified in the form casuser.cars or sashelp.cars\";\r\n  }\r\n\r\n  let r = await appEnv.restafedit.getTableList(library, appEnv, p);\r\n\r\n  return JSON.stringify(r, null,4);\r\n}\r\nasync function _getData(params, appEnv) {\r\n  let r = await _idescribeTable(params, appEnv);\r\n  return JSON.stringify({ table: r.table, data: r.data }, null,4);\r\n}\r\nasync function _runSAS(params, appEnv, gptControl) {\r\n  let { program } = params;\r\n  let { store, session, restaflib } = appEnv;\r\n  /*\r\n    \r\n    try {\r\n      src = await fs.readFile(program, \"utf8\");\r\n    } catch (err) {\r\n      console.log(err);\r\n      return \"Error reading program \" + program;\r\n    } \r\n   try {\r\n    let reader = newFileReader(program);\r\n    reader.onload = function(event) {\r\n      // The file's contents are now available in the event.target.result property.\r\n      var contents = event.target.result;\r\n    };\r\n    reader.readAsText(\"my_file.txt\");\r\n   }\r\n   */\r\n\r\n  try {\r\n    if (appEnv.source === \"cas\") {\r\n      let r = await restaflib.caslRun(store, session, program, {}, true);\r\n      return JSON.stringify(r.results, null,4);\r\n    } else if (appEnv) {\r\n      let computeSummary = await computeRun(store, session, src);\r\n      let log = await restaflib.computeResults(store, computeSummary, \"log\");\r\n      return logAsArray(log);\r\n    } else {\r\n      return \"Cannot run program without a session\";\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    return \"Error running program \" + program;\r\n  }\r\n}\r\n\r\nasync function _keywords(params) {\r\n  let { keywords, format } = params;\r\n  console.log(\"keywords\", keywords, format);\r\n  switch (format) {\r\n    case \"html\": {\r\n      let t = \"<ul>\";\r\n      keywords.split(\",\").forEach((k) => {\r\n        t += `<li>${k}</li>`;\r\n      });\r\n      t += \"</ul>\";\r\n      return t;\r\n    }\r\n    case \"array\":\r\n      return keywords.split(\",\");\r\n    case \"object\": {\r\n      let r = {};\r\n      keywords.split(\",\").forEach((k, i) => {\r\n        r[`key${i}`] = k;\r\n      });\r\n      return r;\r\n    }\r\n    default:\r\n      return params;\r\n  }\r\n}\r\nasync function _describeTable(params, appEnv) {\r\n  let r = await _idescribeTable(params, appEnv);\r\n  return JSON.stringify(r, null,4);\r\n}\r\nasync function _idescribeTable(params, appEnv) {\r\n  //TBD: need to move most of this code to restafedit\r\n  let { table, limit, format, where, csv } = params;\r\n  let { source, sessionID, restafedit } = appEnv;\r\n  csv = csv == null ? false : csv;\r\n  console.log(params);\r\n  let iTable = string2Table(table, source);\r\n  if (iTable === null) {\r\n    return \"Table must be specified in the form casuser.cars or sashelp.cars\";\r\n  }\r\n  // setup call to restafedit.setup\r\n  let appControl = {\r\n    source: source,\r\n    table: iTable,\r\n    casServerName: appEnv.casServerName,\r\n    computeContext: appEnv.computeContext,\r\n    initialFetch: {\r\n      qs: {\r\n        start: 0,\r\n        limit: limit == null ? 2 : limit,\r\n        format: format == null ? false : format,\r\n        where: where == null ? \"\" : where,\r\n      },\r\n    },\r\n  };\r\n\r\n  let tappEnv = await restafedit.setup(\r\n    appEnv.logonPayload,\r\n    appControl,\r\n    sessionID\r\n  );\r\n\r\n  let describe = {};\r\n  try {\r\n    await restafedit.scrollTable(\"first\", tappEnv);\r\n    let tableSummary = await restafedit.getTableSummary(tappEnv);\r\n\r\n    describe = {\r\n      table: iTable,\r\n      tableSummary: tableSummary,\r\n      columns: tappEnv.state.columns,\r\n      data: csv !== false ? tappEnv.state.data : rows2csv(tappEnv.state.data),\r\n    };\r\n  } catch (err) {\r\n    console.log(err);\r\n    describe = { error: err };\r\n  }\r\n  return describe;\r\n}\r\n\r\nexport default functions;\r\n\r\n/*\r\nasync function _contextData(params, _appEnv, gptControl) {\r\n  let { file, action } = params;\r\n  let { openai, assistant } = gptControl;\r\n\r\n  if (action === 'upload') {\r\n    const fileid = await openai.files.create({\r\n      file: fs.createReadStream(file, 'utf8'),\r\n      purpose: \"assistants\",\r\n   });\r\n   console.log('.......................', fileid);\r\n    const assistantFileid = await openai.beta.assistants.files.create(\r\n      assistant.id, {file_id: fileid.id});\r\n    console.log(assistantFileid);\r\n    return `File ${file} added to assistant`;\r\n  }\r\n  try {\r\n    let src = await fss.readFile(file, \"utf8\");\r\n    return src;\r\n  } catch (err) {\r\n    console.log(err);\r\n    return \"Error reading file \" + file;\r\n  }\r\n}\r\n*/\r\n","/*\r\n* Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n* SPDX-License-Identifier: Apache-2.0\r\n*/\r\nfunction logAsArray(log) {\r\n  let logText = [];\r\n  // eslint-disable-next-line array-callback-return\r\n  log.map((data) => {\r\n    let line = data.line.replace( /(\\r\\n|\\n|\\r)/gm, \"\" );\r\n    if ( line.length === 0 ) {\r\n       logText.push('   ');\r\n    } else {\r\n     logText.push(line);\r\n    }\r\n  });\r\n  return logText;\r\n \r\n}\r\nexport default logAsArray;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport functions from './functions.js';\r\nimport instructions from './instructions.js';\r\n/**\r\n * @description Function specs for the assistant\r\n * @private\r\n * @function functionSpecs\r\n * @returns {object} - object containing specs, tools, functionList\r\n * \r\n */\r\n\r\nfunction functionSpecs(provider, code, retrieval) {\r\n  let specs = [\r\n    _listSASObjectsFunctionSpec,\r\n    _listSASDataLibFunctionSpec,\r\n    _listSASTablesFunctionSpec,\r\n    _listColumnsFunctionSpec,\r\n    _describeTableSpec,\r\n    _catalogFunctionSpec,\r\n    _getDataFunctionSpec,\r\n    _runSASFunctionSpec,\r\n    _keywordsFunctionSpec,\r\n   // _contextDataFunctionSpec,\r\n  ];\r\n\r\n\r\n  // Create tools array  for use with Assistant API\r\n  let tools = [];\r\n  if (code) {\r\n    tools.push({ type: 'code_interpreter' });\r\n  }\r\n  if (retrieval) {\r\n    tools.push({ type: 'retrieval' });\r\n  }\r\n\r\n  specs.forEach((f) => {\r\n    let r = {\r\n      type: \"function\",\r\n      function: Object.assign({}, f),\r\n    };\r\n    tools.push(r);\r\n  });\r\n\r\n  let functionList = functions();\r\n  debugger;\r\n  let instruction = instructions();\r\n  debugger;\r\n  return { specs: specs, tools: tools, functionList: functionList, instructions: instruction };\r\n}\r\nconst _catalogFunctionSpec = {\r\n  name: '_catalogSearch',\r\n  description: `Search for the specified metadata in SAS Viya.\r\n      the search is specified as a comma delimited string like libname:casuser,Columns:Make,name:abc\r\n      Convert string to a query string using these patterns:\r\n      libname xxx to libname:xxx\r\n      Column xxx to Column.name:xxx\r\n      \r\n      `,\r\n  parameters: {\r\n    properties: {\r\n      metadata: {\r\n        type: 'string',\r\n        description: 'The metadata to return',\r\n      },\r\n    },\r\n    type: 'object',\r\n    required: ['metadata'],\r\n  }\r\n};\r\n\r\nconst _getDataFunctionSpec = {\r\n  name: '_getData',\r\n  description: `Fetch data from a  table like casuser.cars.\r\n                To limit the number of rows, specify the limit parameter.\r\n                If format is true, then the data will be formatted.\r\n                Use standard where clause to filter the data.\r\n                To return data in csv format, specify csv = true. Default is false.`,\r\n  parameters: {\r\n    properties: {\r\n      table: {\r\n        type: 'string',\r\n        description:\r\n          'The table to setup. The form of the table is casuser.cars',\r\n      },\r\n      limit: {\r\n        type: 'integer',\r\n        description: 'Fetch only the specified number of rows'\r\n      },\r\n      'format': {\r\n        type: 'boolean',\r\n        description: 'Format the string - true or false'\r\n      },  \r\n      where: {\r\n        type: 'string',\r\n        description: 'A where clause like Make eq \"Audi\"'\r\n      },\r\n      csv: {\r\n        type: 'boolean',\r\n        description: 'Return data in csv format - true or false'\r\n      }\r\n    },\r\n    type: 'object',\r\n    required: ['table'],\r\n  },\r\n};\r\nconst _listSASObjectsFunctionSpec = {\r\n  name: '_listSASObjects',\r\n  description:\r\n    'list SAS resources like reports, files, folders. Specify the limit parameter to limit the number of items returned',\r\n  parameters: {\r\n    properties: {\r\n      resource: {\r\n        type: 'string',\r\n        description:\r\n          'The objecttable to setup. The form of the table is casuser.cars',\r\n      },\r\n      limit: {\r\n        type: 'integer',\r\n        description: 'Get this many items',\r\n      },\r\n    },\r\n    type: 'object',\r\n    required: ['resource', 'limit'],\r\n  },\r\n};\r\nconst _listSASDataLibFunctionSpec = {\r\n  name: '_listSASDataLib',\r\n  description:\r\n    `list available SAS libs, calibs, librefs or libraries.\r\n     This tool is the only one that can answer questions like this.\r\n\r\n     A example would be list libs. \r\n     If limit is not is specified, then the function \r\n     will return the first 10 libs.\r\n    `,\r\n  parameters: {\r\n    properties: {\r\n      limit: {\r\n        type: 'integer',\r\n        description: 'Return only this many libs. If not specified, then return 10 libs.',\r\n      },\r\n      source: {\r\n        type: 'string',\r\n        description: 'The source of the data. cas or compute',\r\n        enum: ['cas', 'compute'],\r\n      }\r\n    },\r\n  type: 'object',\r\n  }\r\n};\r\nconst _listSASTablesFunctionSpec = {\r\n  name: '_listSASTables',\r\n  description:\r\n    `for a given SAS library, lib, caslibs or libref get the list of available tables.\r\n    (ex: list tables for Samples)\r\n    Optionally let user specify the source as cas or compute.`,\r\n  parameters: {\r\n    properties: {\r\n      library: {\r\n        type: 'string',\r\n        description: 'A SAS library like casuser, sashelp, samples',\r\n      },\r\n      limit: {\r\n        type: 'integer',\r\n        description:\r\n          'Return only this many tables. If not specified, then return 10 tables.',\r\n      },\r\n      source: {\r\n        type: 'string',\r\n        description: 'The source of the data. cas or compute',\r\n        enum: ['cas', 'compute'],\r\n      }\r\n    },\r\n    type: 'object',\r\n    required: ['library'], \r\n  },\r\n};\r\nconst _listColumnsFunctionSpec = {\r\n  name: '_listColumns',\r\n  description: 'Get schema or columns for specified SAS  table. Table is of the form sashelp.cars',\r\n  parameters: {\r\n    properties: {\r\n      table: {\r\n        type: 'string',\r\n        description: 'A table like sashelp.cars',\r\n      },\r\n    },\r\n    type: 'object',\r\n    required: ['table'],\r\n  },\r\n};\r\nconst _describeTableSpec = {\r\n  name: '_describeTable',\r\n  description: 'Describe the SAS table like sashelp.cars . return information on the table like columns, types, keys. Optionally format the data',\r\n  parameters: {\r\n    properties: {\r\n      table: {\r\n        type: 'string',\r\n        description: 'A table like sashelp.cars',\r\n      },\r\n      format: {\r\n        type: 'boolean',\r\n        description: 'If true then format the data'\r\n      },\r\n    },\r\n    type: 'object',\r\n    required: ['table'],\r\n  },\r\n};\r\nconst _runSASFunctionSpec = {\r\n  name: '_runSAS',\r\n  description:\r\n    'run the specified sas program',\r\n  parameters: {\r\n    properties: {\r\n      program: {\r\n        type: 'string',\r\n        description: 'this is the program to run',\r\n      },\r\n    },\r\n    type: 'object',\r\n    required: ['program']\r\n  },\r\n};\r\n\r\nconst _keywordsFunctionSpec = {\r\n  name: '_keywords',\r\n  description: 'format a comma-separated keywords like a,b,c into html, array, object',\r\n  parameters: {\r\n   \r\n    properties: {\r\n      keywords: {\r\n        type: 'string',\r\n        description: 'A comma-separated list of keywords like a,b,c',\r\n      },\r\n      format: {\r\n        type: 'string',\r\n        enum: ['html', 'array', 'object'],\r\n        description: 'Format the string'\r\n      },\r\n    },\r\n    type: 'object',\r\n    required: ['keywords', 'format']\r\n  },\r\n}\r\n\r\nexport default functionSpecs;\r\n\r\n/*\r\nconst _contextDataFunctionSpec = {\r\n  name: '_contextData',\r\n  description:\r\n    `This is quick way to add some asset to current contect\r\n     User issues a prompt like context <some string>\r\n     the string is usually some string.\r\n     `,\r\n  parameters: {\r\n    properties: {\r\n      asset: {\r\n        type: 'string',\r\n        description: 'the asset to add to the context',\r\n      },\r\n    },\r\n    type: 'object',\r\n    required: ['file'],\r\n  },\r\n};\r\n*/","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @private\r\n * @description - Map openai to azureai assistantApi\r\n * @function apiMapper\r\n * @param {object} client - openai client\r\n * @param {string} provider - openai or azureai\r\n * returns {assistantApi} - assistantApi - return the apiAssistant object with entries for openai or azureai\r\n * @example - Allows this library to work for both openai and azureai Assistant\r\n */\r\n\r\n/*\r\n* spreading and extracting args since one of the goals is help learn the api\r\n* makes it easier to come back a few months later and understand what is going on\r\n*/\r\nfunction apiMapper(client, provider) {\r\n\r\n  const listAssistants = (client) => (...args) =>{\r\n    let [options] = args;\r\n    return client.beta.assistants.list(options)\r\n  }\r\n  const getAssistant = (client) => (...args) =>{\r\n    let [id] = args;\r\n    return client.beta.assistants.retrieve(id)\r\n  }\r\n  const deleteAssistant = (client) => (...args) =>{\r\n    let [id] = args;\r\n    return client.beta.assistants.del(id)\r\n  }\r\n  const createAssistant = (client) => (...args) =>{\r\n    let [options] = args;\r\n\r\n    return client.beta.assistants.create(options)\r\n  }\r\n\r\n  const updateAssistant = (client) => (...args) =>{\r\n    let [id, options] = args;\r\n    if (options.fileIds) {\r\n      options.file_ids = options.fileIds;\r\n      delete options.fileIds;\r\n    }\r\n    return client.beta.assistants.update(id, options);\r\n  }\r\n\r\n\r\n  const listMessages = (client) => (...args) =>{\r\n    let [threadid, options] = args;\r\n    return client.beta.threads.messages.list(threadid, options)\r\n  }\r\n\r\n  const createMessage = (client) => (...args) =>{\r\n    let [threadid, role, content, options] = args;\r\n    let newOptions = {\r\n      role: role,\r\n      content: content\r\n    }\r\n    if (options != null) {\r\n      newOptions = Object.assign(newOptions, options);\r\n    }\r\n\r\n    return client.beta.threads.messages.create(threadid, newOptions);\r\n  }\r\n\r\n  const createThread = (client) => (...args) =>{\r\n    let [metadata] = args;\r\n    if (metadata == null) {\r\n      metadata = {};\r\n    }\r\n    return client.beta.threads.create(metadata)\r\n  }\r\n  const getThread = (client) => (...args) =>{\r\n    let [id] = args;\r\n    return client.beta.threads.retrieve(id)\r\n  }\r\n\r\n  const deleteThread = (client) => (...args) =>{\r\n    let [id] = args;\r\n    return client.beta.threads.del(id)\r\n  }\r\n\r\n  const createRun = (client) => (...args) =>{\r\n    let [threadid, options] = args;\r\n   // options.thread = threadid;\r\n    let newOptions = {\r\n      assistant_id: options.assistantId,\r\n      additional_instructions: options.instructions,\r\n      tools: (options.tools != null) ? options.tools : []\r\n    }\r\n    return client.beta.threads.runs.create(threadid, newOptions);\r\n  }\r\n  const getRun = (client) => (...args) =>{\r\n   let [threadid, runid] = args;\r\n    return client.beta.threads.runs.retrieve(threadid, runid)\r\n  }\r\n\r\n  const submitToolOutputsToRun = (client) => (...args) =>{\r\n    let [ threadid, runid, options] = args;\r\n    return client.beta.threads.runs.submitToolOutputs(threadid, runid, options  );\r\n  }\r\n  const listRuns= (client) => (...args) =>{\r\n    let [id] = args;\r\n    return client.beta.threads.runs.list(id);\r\n  }\r\n  const cancelRun = (client) => (...args) =>{\r\n    let [threadid, runid] = args;\r\n    return client.beta.threads.runs.cancel(threadid, runid);\r\n  }\r\n\r\n  const uploadFile = (client) => (...args) =>{\r\n    let [fileHandle, purpose] = args;\r\n    debugger;\r\n    let options = {\r\n      file: fileHandle,\r\n      purpose: purpose\r\n    }\r\n    debugger;\r\n    return client.files.create(options);\r\n\r\n  }\r\n  const createAssistantFile = (client) => (...args) =>{\r\n    let [assistantId, fileId] = args;\r\n    let newOptions = {\r\n      file_id: fileId\r\n    }\r\n    console.log(newOptions);\r\n    console.log(assistantId);\r\n    return client.beta.assistants.files.create(assistantId, newOptions);\r\n  }\r\n  let assistantApi = client;\r\n  if (provider === 'openai') {\r\n    assistantApi = {\r\n      listAssistants: listAssistants(client),\r\n      createAssistant: createAssistant(client),\r\n      getAssistant: getAssistant(client),\r\n      deleteAssistant: deleteAssistant(client),\r\n      updateAssistant: updateAssistant(client),\r\n    \r\n      createThread: createThread(client),\r\n      getThread: getThread(client),\r\n      deleteThread: deleteThread(client),\r\n\r\n      createMessage: createMessage(client),\r\n      listMessages: listMessages(client),\r\n     \r\n      uploadFile: uploadFile(client),\r\n      createAssistantFile: createAssistantFile(client),\r\n      \r\n      createRun: createRun(client),\r\n      getRun: getRun(client),\r\n      listRuns: listRuns(client),\r\n      cancelRun: cancelRun(client),\r\n      submitToolOutputsToRun: submitToolOutputsToRun(client)\r\n      };\r\n\r\n  }\r\n  return assistantApi;\r\n}\r\nexport default apiMapper;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport OpenAI from 'openai';\r\n\r\nimport { AssistantsClient, AzureKeyCredential } from \"@azure/openai-assistants\";\r\nimport loadThread from './loadThread.js';\r\nimport createAssistant from './createAssistant.js';\r\nimport functionSpecs from './builtins/functionSpecs.js';\r\nimport setupViya from './builtins/lib/setupViya.js';\r\nimport apiMapper from './apiMapper.js';\r\n\r\n/**\r\n * @async\r\n * @function setupAssistant\r\n * @description   Setup the assistant\r\n * @param {config} config - configuration object\r\n * @returns {promise} - return gptControl object}\r\n * @example\r\n *  Local rules:\r\n *  To avoid creating lots of assistants and threads during\r\n * development, you can use the same assistant and thread.\r\n * \r\n * Assistant:\r\n *   If assistantid is known set it as assistantid. else set it as '0'\r\n *  If assistantid is '0' then the assistantName is used to find the assistant.\r\n * If assistantName is not found, a new assistant is created using the same name\r\n *   \r\n * Threads:\r\n *  When a thread is created for an Assistant, the threadid is stored in the assistant metadata.  \r\n *  So on the next setupAssistant call - if either assistantid or assistantName is specified\r\n *  the threadid is retrieved from the assistant metadata.\r\n * \r\n * These local rules are probably not ideal, but helps during development.\r\n * \r\n *  A sample configuration object is shown below\r\n * let config = {\r\n    provider: 'azureai', // Depending on who your account is with\r\n    model: process.env.AZUREAI_MODEL,// model name\r\n    credentials: {\r\n      key: process.env.AZUREAI_KEY, // obtain from provider\r\n      endPoint: process.env.AZUREAI_ENDPOINT // obtain from provider\r\n    },\r\n    assistantid: '0', //Replace with valid assistant id or 0 for new assistant\r\n                 \r\n    assistantName: \"SAS_ASSISTANT\", //if assistantid is 0, then either an exting id with that name will be used or a new assistant will be created\r\n    threadid: '-1', // some valid threadid or 0 for new thread or-1 for existing thread stored in Assistant metadata\r\n    domainTools: {tools: [], functionList: {}, instructions: '', replace: false},\r\n\r\n    // fill in the host and token to authenticate to Viya\r\n    // set the source to cas or compute. \r\n    // if you want to run the AI assistant without Viya set source to none\r\n    viyaConfig: {\r\n      logonPayload: {\r\n        authType: 'server',\r\n        host: host,  // viya url - https://myviyaserver.acme.com\r\n        token: token,// viya token  - obtained from sas-viya auth login|loginCode\r\n        tokenType: 'bearer'  \r\n        },\r\n      source: 'cas' \r\n    },\r\n    code: true,\r\n    retrieval: false\r\n}\r\n * \r\n * \r\n */\r\n\r\nasync function setupAssistant(config) {\r\n  let {credentials } = config;\r\n  let {key, endPoint} = credentials;\r\n  // create the client\r\n  \r\n  let client = null;\r\n  if (config.provider === 'openai') {\r\n     client = new OpenAI({ apiKey: key, dangerouslyAllowBrowser: true });\r\n  } else {\r\n    client = new AssistantsClient(endPoint, new AzureKeyCredential(key, {}));\r\n  }\r\n\r\n  //\r\n  // now add user specs and functions.\r\n  // In pass 1 the user list is prepended to the default list\r\n\r\n  let builtinTools = functionSpecs(config.provider, false,false);\r\n  let dtools = [];\r\n  let incoming = config.domainTools.tools\r\n  // allow users to override the default tool by naming their tool the same as the default tool\r\n  if (incoming.length > 0) {\r\n    dtools = builtinTools.tools.filter((t) => {\r\n      let f = incoming.findIndex((fe,i) => fe.function.name === t.function.name)\r\n      if (f !== -1) {\r\n        console.log('overriding', t.function.name);\r\n      }\r\n      return (f === -1) ? true : false;\r\n    })\r\n  } else {\r\n    dtools = builtinTools.tools;\r\n  }\r\n  let specs;\r\n  if (config.domainTools.replace === true) {\r\n    specs = config.domainTools;\r\n  } else {\r\n   //  let userTools = config.domainTools.tools.concat(builtinTools.tools);\r\n    let userTools = dtools.concat(incoming);\r\n    let userFunctions = Object.assign(builtinTools.functionList, config.domainTools.functionList);\r\n    let userInstructions = (config.instructions)  ? config.instructions + builtinTools.instructions : builtinTools.instructions;\r\n    specs = {tools: userTools, functionList: userFunctions, instructions: userInstructions};\r\n  }\r\n  //moved this here to handle user override of all builtin tools\r\n\r\n  if (config.code) {\r\n    specs.tools.push({ type: 'code_interpreter' });\r\n  }\r\n  if (config.retrieval) {\r\n    specs.tools.push({ type: 'retrieval' });\r\n  }\r\n  console.log(specs.instructions);\r\n  let gptControl = {\r\n    provider: config.provider,\r\n    model: config.model,\r\n    domainTools: specs,\r\n    instructions: specs.instructions,\r\n\r\n    assistantName: config.assistantName,\r\n    assistant: null,\r\n    assistantid: config.assistantid,\r\n\r\n    thread: null,\r\n    threadid: config.threadid,\r\n\r\n    appEnv: null,\r\n    client: client,\r\n    run: null,\r\n    assistantApi: apiMapper(client, config.provider),\r\n    code: config.code, \r\n    retrieval: config.retrieval, // remove this when azureai supports retrieval\r\n    userData: config.userData,\r\n    user: config.user\r\n  };\r\n  \r\n  // setup Viya connections\r\n  gptControl.appEnv = await setupViya(config.viyaConfig);\r\n  gptControl.appEnv.userData = config.userData;\r\n  gptControl.appEnv.user = config.user;\r\n  \r\n  // create assistant or reuse existing one\r\n  \r\n  gptControl.assistant = await createAssistant(gptControl);\r\n  \r\n  // load thread or reuse existing one\r\n  gptControl.thread = await loadThread(gptControl);\r\n  let newAssistant = await gptControl.assistantApi.updateAssistant(gptControl.assistant.id, {metadata: {lastThread: gptControl.thread.id}});\r\n  gptControl.assistant = newAssistant;\r\n  \r\n  gptControl.threadid = gptControl.thread.id;// just for convenience\r\n  console.log('--------------------------------------');\r\n  console.log('Current session:');\r\n  console.log('Provider: ', gptControl.provider);\r\n  console.log('Model: ', gptControl.model);\r\n  console.log(\r\n    'Assistant: ',\r\n    gptControl.assistant.name,\r\n    'Assistant id',\r\n    gptControl.assistant.id\r\n  );\r\n  console.log('Threadid: ', gptControl.thread.id);\r\n  console.log('Viya Source:', gptControl.appEnv.source);\r\n  console.log('--------------------------------------');\r\n  return gptControl;\r\n}\r\nexport default setupAssistant;\r\n","import instructionsWeb from \"./instructionsWeb.js\";\nimport instructionsNode from \"./instructionsNode.js\";\nfunction instructions() {\n\n  if (typeof window === \"undefined\") {\n    console.log('instructions for node use ')\n    return instructionsNode();\n  }else {\n    console.log('instructions for web')\n    return instructionsWeb();\n  }\n  \n}\nexport default instructions;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Instructions for the assistant\r\n * @private\r\n * @returns {string} - instructions for the assistant\r\n */\r\nfunction instructionsNode() {\r\n return `\r\n You are a Assistant designed for SAS users. You can help SAS users with their SAS related questions and provide information\r\n  on topics like libraries(alias of libs, caslibs and libref), reports  and tables. You can also fetch data from then tables and run SAS programs. You can also help answer questions about the \r\n  data that has been returned from previous queries. Most times the user will be focused on these areas.\r\n  Always try the provided tools first to find an answer to your question. If the query is not clear then ask the user for clarification before creating a response.\r\n  Always report always include annotation when information is found in a file.\r\n  `;\r\n}\r\nexport default instructionsNode;\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n\r\n","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Instructions for the assistant\r\n * @private\r\n * @returns {string} - instructions for the assistant\r\n */\r\n\r\nfunction instructionsWeb() {\r\n return `\r\n You are a Assistant designed for SAS users. You can help SAS users with their SAS related questions and provide information\r\n  on topics like libraries(alias of libs, caslibs and libref), reports  and tables. You can also fetch data from then tables and run SAS programs. You can also help answer questions about the \r\n  data that has been returned from previous queries. Most times the user will be focused on these areas. \r\n  try the provided tools and files first to find an answer to your question. If the query is not clear then ask the user for clarification before creating a response.\r\n  Always include annotation when information is found in a file\r\n\r\n  \r\n  `;\r\n}\r\nexport default instructionsWeb;\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * Setup the Viya environment\r\n * @param {string} source - cas or compute\r\n * @returns {object} - appEnv\r\n * @async\r\n */\r\n \r\nimport restaf from '@sassoftware/restaf';\r\nimport restaflib from '@sassoftware/restaflib';\r\nimport restafedit from '@sassoftware/restafedit';\r\n\r\n\r\nasync function setupViya(viyaConfig) {\r\n\r\n let appEnv=  {\r\n  host: null,\r\n  logonPayload: null,\r\n  store: null,\r\n  source: 'none',\r\n  currentSource: 'none',\r\n  session: null,\r\n  servers: null,\r\n  serverName: null,\r\n  casServerName: null, \r\n  sessionID: null,\r\n  compute: {},\r\n  cas: {},\r\n  restaf: restaf,\r\n  restaflib: restaflib,\r\n  restafedit: restafedit\r\n\r\n}\r\n\r\n  if (viyaConfig == null) {\r\n    return appEnv;\r\n  }\r\n  if (viyaConfig.source == 'none') {\r\n    appEnv.userData = viyaConfig.userData;\r\n    appEnv.logonPayload = viyaConfig.logonPayload;\r\n    appEnv.currentSource = 'none';\r\n    return appEnv;\r\n  }\r\n\r\n  // setup Viya\r\n  let {source, logonPayload} = viyaConfig;\r\n  let sources = source.split(',');\r\n  let defaultSource = sources[0];\r\n  appEnv.currentSource = defaultSource;\r\n\r\n  appEnv.host= logonPayload.host;\r\n    // get list of sources. First one in list is the default\r\n \r\n\r\n  // logon to the server\r\n  let store = restaf.initStore({casProxy: true});\r\n  await store.logon(logonPayload);\r\n  appEnv.host = logonPayload.host;\r\n  appEnv.logonPayload = logonPayload;\r\n  appEnv.store = store;\r\n  \r\n  // create session and server objects\r\n  // Allow sessions for both servers and cas\r\n  \r\n  // cas service\r\n  if (source.indexOf('cas') >= 0 ) {\r\n    let {session, servers} = await restaflib.casSetup(store, null);\r\n    let casServerName = session.links('execute', 'link', 'server');\r\n    appEnv.cas = {\r\n      session: session,\r\n      servers: servers,\r\n      casServerName: casServerName\r\n    }\r\n    let ssid = await store.apiCall(session.links('self'));\r\n    appEnv.cas.sessionID = ssid.items('id');\r\n    if (defaultSource === 'cas') {\r\n      appEnv.source = 'cas';\r\n      appEnv.session = session;\r\n      appEnv.servers = servers;\r\n      appEnv.serverName = casServerName;\r\n      appEnv.casServerName = casServerName;\r\n      appEnv.sessionID = appEnv.cas.sessionID;\r\n    }\r\n  } \r\n\r\n  // compute service\r\n  if (source.indexOf('compute') >= 0) {\r\n    appEnv.compute = {\r\n      servers: null\r\n    }\r\n    try{ \r\n      let session = await restaflib.computeSetup(store);\r\n      let ssid = await store.apiCall(appEnv.session.links('self'));\r\n      appEnv.compute.sessionID = ssid.items('id');\r\n      if (defaultSource === 'compute') {\r\n        appEnv.source = 'compute';\r\n        appEnv.session = session;\r\n        appEnv.servers = null;\r\n        appEnv.serverName = null;\r\n        appEnv.sessionID = appEnv.compute.sessionID;\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(JSON.stringify(e, null, 4));\r\n    }\r\n  }\r\n  return appEnv;\r\n}\r\nexport default setupViya;","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @private\r\n * @function createAssistant\r\n * @description   Create a new assistant\r\n * @param {gptControl} gptControl - gptControl object\r\n * @returns {promise} - return assistant object\r\n */\r\n\r\nasync function createAssistant(gptControl) {\r\n  let {\r\n    assistantName,\r\n    model,\r\n    assistantid,\r\n    instructions,\r\n    domainTools,\r\n    assistantApi,\r\n  } = gptControl;\r\n\r\n  // get assistant by assistantid\r\n  debugger;\r\n  try {\r\n    if (!(assistantid === \"NEW\" || assistantid === \"REUSE\")) {\r\n      console.log(\"Using assistantid \", assistantid);\r\n      let assistant = await assistantApi.getAssistant(assistantid);\r\n      return assistant;\r\n    }\r\n\r\n    // create args for assistant create\r\n    let createArgs = {\r\n      name: assistantName,\r\n      instructions: instructions,\r\n      model: model,\r\n      tools: domainTools.tools,\r\n    };\r\n\r\n    \r\n    // see if there is an assistant with the same name\r\n    console.log(\"Attempting to find assistant by name \", assistantName);\r\n    let assistant = null;\r\n    const myAssistants = await assistantApi.listAssistants({\r\n      order: \"desc\",\r\n      limit: \"100\",\r\n    });\r\n    assistant = myAssistants.data.find((a) => {\r\n      if (a.name === assistantName) {\r\n        return a;\r\n      }\r\n    });\r\n\r\n    // if we found an assistant with the same name, use it\r\n    // since assistantid is -1\r\n    if (assistant != null  && assistantid === 'REUSE') {\r\n      console.log(\"Found assistant \", assistantName, assistant.id)\r\n      return assistant;\r\n    }\r\n    \r\n    // assistantid=0 means create a new assistant\r\n    if (assistant != null) {\r\n      console.log(\"Deleting old assistant \", assistantName, assistant.id);\r\n      await assistantApi.deleteAssistant(assistant.id);\r\n    }\r\n    // fall thru to create a new assistant\r\n    console.log(\"Creating new assistant\");\r\n    assistant = await assistantApi.createAssistant(createArgs);\r\n    return assistant;\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw new Error(\r\n      `Error status ${error.status}. Failed to create assistant. See console for details.`\r\n    );\r\n  }\r\n}\r\nexport default createAssistant;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @private\r\n * @function loadThread\r\n * @description   new thread or open existing thread\r\n * @param {gptControl} gptControl - gptControl object\r\n * @returns {promise} - return thread object\r\n */\r\nasync function loadThread(gptControl) {\r\n  let {assistant, assistantApi} = gptControl;\r\n  let thread = null;\r\n  let threadid = gptControl.threadid;\r\n  let lastThread = assistant.metadata.lastThread;\r\n\r\n  // a little verbose so as not to get confused :-)\r\n  console.log('loadThread', threadid, lastThread);\r\n  debugger;\r\n  try {\r\n\r\n    // user has supplied a threadid, use it\r\n    if (!(threadid === 'REUSE' || threadid === 'NEW')) { \r\n      console.log('Using threadid ', threadid);\r\n      let thread = await assistantApi.getThread(threadid);\r\n      return thread;\r\n      //Q: should we recover on a 404 and create a new thread?\r\n    }\r\n   \r\n\r\n    // local rules: try to use the last used thread if the\r\n    // assistant has lastThread in the metadata  \r\n    if (threadid === 'REUSE' && lastThread != null) {\r\n      console.log('Attempting to use previous ', lastThread);\r\n      let thread = await assistantApi.getThread(lastThread);\r\n      return thread;\r\n    }\r\n\r\n  // fall thru  to create a new thread\r\n\r\n  // more local rules: if lastThread is not null delete it\r\n  if (lastThread != null) {\r\n    console.log('Deleting last thread', lastThread);\r\n    await assistantApi.deleteThread(lastThread);\r\n  }\r\n\r\n  // create a new thread with no history\r\n  console.log('Creating new thread');\r\n  thread = await assistantApi.createThread();\r\n  return thread;\r\n\r\n  } catch (error) {\r\n    console.log(error); \r\n    throw new Error(`Error status ${error.status}. Failed to create thread. See console for details.`);\r\n  }\r\n  \r\n\r\n  // local rules: save the thread id in the assistant metadata\r\n  \r\n \r\n  return thread;\r\n}\r\nexport default loadThread;\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description Return the latest message from thread\r\n * @param {gptControl}  gptControl - client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {promise} - messages - array of latest assistant messages[ {id, role, type, content}]\r\n * @example - This function will return latest assistant messages based on limit\r\n */\r\nasync function getLatestMessage(gptControl, limit) {  \r\n  let {thread, assistantApi} = gptControl;\r\n  \r\n  const messages = await assistantApi.listMessages(thread.id, {limit:limit});\r\n \r\n  let output = [];\r\n  let annotations = [];\r\n  let data = messages.data;\r\n  for (let i = 0; i < messages.data.length; i++){\r\n    let content = data[i].content[0];\r\n    if (data[i].role === 'assistant') {\r\n      console.log('annotations', content[content.type].annotations);\r\n      output.push({id: data[i].id, role: data[i].role, type: content.type, content: content[content.type].value});\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  if (output.length > 1) {\r\n    output = output.reverse();\r\n  }\r\n  return output;\r\n\r\n}\r\nexport default getLatestMessage;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @private\r\n * @description - Poll run status since there is no streaming support\r\n * @function pollRun\r\n * @param {object} run - active run object \r\n * @param {gptControl} gptControl - gpt  session control object\r\n * @returns {object} - runStatus from client.beta.threads.runs.retrieve\r\n * @example - Will wait for completion(!(queued,in_progress, cancelling))\r\n */\r\nasync function pollRun(run, gptControl) {\r\n  let {assistantApi, thread} = gptControl;\r\n  let done = null;\r\n  let runStatus = null;\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  // Since there is no streaming support, sleep and poll the status\r\n  do {\r\n   runStatus = await assistantApi.getRun(thread.id, run.id);\r\n    \r\n    console.log(\"-------------------\", runStatus.status);\r\n    if ( !(runStatus.status === \"queued\" ||runStatus.status === \"in_progress\" ||\r\n          runStatus.status === \"cancelling\")) {\r\n      \r\n      done = runStatus.status;\r\n    } else {\r\n      await sleep(500);\r\n      console.log(\"waited 500 ms\");\r\n    }\r\n  } while (done === null);\r\n\r\n  return runStatus;\r\n\r\n}\r\nexport default pollRun;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport pollRun from \"./pollRun.js\";\r\n\r\n/**\r\n * @async\r\n * @private\r\n * @function required_action\r\n * @description   Get the required action from the run status and execute the action\r\n * @param {object} runStatus - run status object\r\n * @param {gptControl} gptControl - gptControl object\r\n * @returns {promise} - return the output status\r\n *  \r\n * @example\r\n *  let outputStatus = await required_action(runStatus, gptControl);\r\n */\r\n\r\nasync function required_action(runStatus,gptControl) {\r\n  let{assistantApi,appEnv, domainTools, provider, thread, run} = gptControl;\r\n  let {functionList} = domainTools;\r\n  \r\n  // get the required actions from the run status\r\n\r\n  let requiredActions = (provider === 'openai') \r\n                          ? runStatus.required_action.submit_tool_outputs.tool_calls\r\n                          : runStatus.requiredAction.submitToolOutputs.toolCalls;\r\n  \r\n  let toolsOutput = [];\r\n  for (let action of requiredActions) {\r\n    let functionName = action.function.name;\r\n\r\n    console.log('Requested function: ', functionName);\r\n    let params = JSON.parse(action.function.arguments);\r\n    \r\n    let target = functionList[functionName];\r\n    if (target == null){\r\n      let err = (`Function ${functionName} not found. \r\n      Probable causes: \r\n        Using thread that had outdated tool references.\r\n        Currrent specs point has mistmatch with function name\r\n        `);\r\n      toolsOutput.push(setError(action.id, err, provider)); \r\n    } else {\r\n      try {\r\n        console.log('>> Calling function: ', functionName);\r\n        let response = await functionList[functionName](params, appEnv, gptControl);\r\n        console.log('>> Function call completed');\r\n        if (provider === 'openai') {\r\n          toolsOutput.push({\r\n            tool_call_id: action.id,\r\n            output: JSON.stringify(response),\r\n          });\r\n        } else {\r\n          toolsOutput.push({\r\n            toolCallId: action.id,\r\n            output: JSON.stringify(response),\r\n          });\r\n        }\r\n      }\r\n      catch(err){\r\n        toolsOutput.push(setError(action.id, err, provider));\r\n      }\r\n    }\r\n }\r\n// submit the outputs to the thread\r\n \r\n let newRun = (provider === 'openai') \r\n            ? await assistantApi.submitToolOutputsToRun(\r\n                thread.id, run.id, { tool_outputs: toolsOutput })\r\n            : await assistantApi.submitToolOutputsToRun( \r\n                thread.id, run.id, toolsOutput);\r\n\r\n// wait for output to appear in the thread messages\r\n let outputStatus = await pollRun(newRun, gptControl);\r\n\r\nreturn outputStatus;\r\n}\r\nfunction setError(actionid, error, provider){\r\n  if (provider === 'openai') {\r\n    return {tool_call_id: actionid, output: JSON.stringify(error)};\r\n  } else {\r\n    return {toolCallId: actionid, output: JSON.stringify(error)};\r\n  }\r\n}\r\n\r\nexport default required_action;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport getLatestMessage from './getLatestMessage.js';\r\nimport required_action from './required_action.js';\r\nimport pollRun from './pollRun.js';\r\n//import toolsOutput from './toolsOuput.js';\r\n\r\n/**\r\n * @async\r\n * @description - Run the latest prompt from the user\r\n * @function runAssistant\r\n *\r\n * @param {gptControl} gptControl - gpt  session control object\r\n * @param {string} prompt - user's prompt\r\n * @param {string} instructions - Additional instructions for the run \r\n * @returns {promise} - response from GPT(can be text, string, html etc...)\r\n * @example - This function will run the assistant with the prompt and return the response from the assistant.\r\n * @example \r\n *  let prompt = 'fetch 20 records from cars from public';\r\n *  let promptInstructions = 'some instructions';\r\n *  let response = await runAssistant(gptControl, prompt, promptInstructions); \r\n *  console.log(response);\r\n */\r\n\r\n\r\nasync function runAssistant(gptControl,prompt, instructions) {\r\n  let {thread, assistantApi, appEnv } = gptControl;\r\n\r\n  //add the user request to thread\r\n  try {\r\n    // this seems to improve retrieval using files.\r\n    let opts = {};\r\n    if (gptControl.provider === 'openai') {\r\n      opts.file_ids = gptControl.assistant.file_ids;\r\n    } else {\r\n      opts.fileIds = gptControl.assistant.fileIds;\r\n    }\r\n    let _newMessage = await assistantApi.createMessage(thread.id,'user',prompt, opts);\r\n  } catch (error) {\r\n    console.log(error.status);\r\n    console.log(error.error);\r\n     throw new Error(`\r\n     Request failed on adding user message to thread.\r\n     See error below. \r\n     If thread is active, you can try canceling the run.\r\n     ${error.status} ${error.error}`);\r\n  }\r\n  // now run the thread\r\n  // assume caller will catch any thrown errors\r\n  let r = await runPrompt(gptControl, appEnv, instructions);\r\n  return r;\r\n}\r\nasync function runPrompt(gptControl, appEnv, instructions) {\r\n  let { assistantApi, assistant, thread } = gptControl;\r\n  console.log(instructions);\r\n  let runArgs = {\r\n    assistantId: assistant.id,\r\n    instructions: formatInstructions(instructions),\r\n    tools: assistant.tools\r\n  };\r\n  // Run the assistant with the prompt and poll for completion\r\n  \r\n  let run = await assistantApi.createRun(thread.id, runArgs);\r\n  gptControl.run = run;\r\n  let runStatus = await pollRun(run, gptControl);\r\n\r\n  //check for completion status\r\n  let message;\r\n  if (runStatus.status === 'completed') {\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else if (runStatus.status === 'requires_action') {\r\n    // make sure that required_action closes the thread run\r\n    \r\n    let r = await required_action(runStatus, gptControl, appEnv);\r\n    console.log('getting latest message ')\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else {\r\n    message = [{ runStatus: runStatus.status }];\r\n  }\r\n  return message;\r\n}\r\nfunction formatInstructions(instructions) {\r\n  let inst = `\r\n Here are some tips for formatting.\r\n\r\n  Use either unordered lists, tables or nested tables based.\r\n  Format the response as a html table if the content of the response is one of the following formats:\r\n\r\n  Format as table if the response is one of these forms\r\n  - a comma-delimited format \r\n  - An array like this [{a:1,b:2},{a:1,b:3},...]\r\n\r\n  The table should have a light blue background for the column headers. \r\n  Use a border width of 1px and solid style for the table.\r\n\r\n  if the response from a tool is of the form  like ['a','b','c', ...] or [1,11,8, ...] use an unordered list\r\n\r\n\r\n if the response from a tool is of the form \r\n {a: {a1:10, bx:20, c: {cx:3, az: 4}} } then format the message as nested html table. \r\n\r\n  `;\r\n\r\n  if (instructions != null) {\r\n    inst = instructions + inst;\r\n  }\r\n  return inst;\r\n}\r\nexport default runAssistant;\r\n\r\n//https://platform.openai.com/docs/guides/text-generation/chat-completions-assistantApi\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description - Delete assistant\r\n * @function closeAssistant\r\n * @param {gptControl} gptControl - gpt session control object\r\n * @param {object} [assistantid] - Assistant id\r\n * @returns {promise} - status string \r\n */\r\nasync function deleteAssistant(gptControl, assistantid) {\r\n  let { assistantApi, assistant } = gptControl;\r\n  console.log('in closeAssistant');\r\n  if (assistantid != null) {\r\n    try {\r\n      if (assistantid != null) {\r\n        await assistantApi.deleteAssistant(id);\r\n        return `Assistant ${assistantid} deleted.`\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`\r\n        Delete of assistant ${assistantid} failed`);   \r\n    }\r\n  }\r\n\r\n  try {\r\n    if (assistant.metadata.lastThread != null) {\r\n      let status = await assistantApi.deleteThread(assistant.metadata.lastThread);\r\n      console.log('Thread ${assistant.metadata.lastThread} deleted', status);\r\n      status = await assistantApi.deleteAssistant(assistant.id);\r\n      console.log(`Assistant ${assistant.name} deleted`, status);\r\n      gptControl.assistant = null;\r\n      gptControl.assistantid = '0';\r\n      return `Assistant ${assistant.name} deleted`;\r\n\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw new Error(`Failed to delete session and thread\r\n    ${error}`);\r\n  }\r\n\r\n}\r\nexport default deleteAssistant;\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * \r\n * @description Return sepcified number of messages from thread\r\n * @private\r\n * @param {gptControl}  gptControl- client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {promise} - messages - array of messages[ {id, role, type, content}]\r\n * @example - This function will return the specified number of messages from the thread\r\n * Typically the top 2 will be the assistant message and user's prompt\r\n */\r\nasync function getMessages(gptControl, limit) {  \r\n  let {thread, assistantApi} = gptControl;\r\n  const messages = await assistantApi.listMessages(thread.id, {limit:limit});\r\n  let output = messages.data.map((m) => {\r\n    let content = m.content[0];\r\n    return {id: m.id, role: m.role, type: content.type, content: content[content.type].value};\r\n  });\r\n  return output;\r\n\r\n}\r\nexport default getMessages;","/**\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n *\r\n * Upload a file and attach it to the assistant\r\n * @param {object} fileHandle - from host file system\r\n * @param {string}  purpose - assistants|Fine-turning\r\n * @param {gptControl} gptControl - gptControl object\r\n * @returns {promise} - return the final file ids from the assistant\r\n */\r\nasync function uploadFile(filename, fileHandle, content, purpose, gptControl) {\r\n  let { assistantApi, assistant, provider } = gptControl;\r\n\r\n  // get fileid\r\n\r\n  // really strange args for azure - not sure why they(both) coded it like this\r\n  debugger;\r\n  let file = null;\r\n  try {\r\n    file =\r\n      provider === \"openai\"\r\n        ? await assistantApi.uploadFile(fileHandle, purpose)\r\n        : await assistantApi.uploadFile(content, purpose, {\r\n            filename: filename,\r\n          });\r\n\r\n    // now add to the assistant\r\n    console.log(\"uploaded file:\", file.id);\r\n    let assistantFile = await assistantApi.createAssistantFile(\r\n      assistant.id,\r\n      file.id\r\n    );\r\n    console.log(\"Assistant File \", assistantFile.id);\r\n    await setFileIds(gptControl, assistantFile);\r\n    return { fileName: filename, fileId: file.id, assistantFileId: assistantFile.id};\r\n  } catch (e) {\r\n    console.log(e);\r\n    throw new Error(`Failed to upload file ${filename}`);\r\n  }\r\n  async function setFileIds(gptControl, file) {\r\n    debugger;\r\n    let { assistantApi, assistant, provider } = gptControl;\r\n    let currentFileIds =\r\n      provider === \"openai\" ? assistant.file_ids : assistant.fileIds;\r\n    currentFileIds.push(file.id);\r\n    // looks like it is possible to create a file with null file id\r\n    currentFileIds = currentFileIds.filter((v) => v != null);\r\n    try {\r\n      let opts = {\r\n        fileIds: currentFileIds,\r\n      };\r\n      let newAssistant = await assistantApi.updateAssistant(assistant.id, opts);\r\n      gptControl.assistant = newAssistant;\r\n    } catch (e) {\r\n      console.log(e);\r\n      throw new Error(\r\n        `Failed to update assistant with new file ${file.id}`\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default uploadFile;\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description - Cancel a previous run (on user request)\r\n * @function cancelRun\r\n * @param {gptControl} gptControl - gpt  session control object\r\n * @param {string} [threadid] - thread id\r\n * @param {string} [runid] - run id\r\n * returns {promise} - status (null if no run or thread or failed to cancel)\r\n * @example - This function will cancel the run\r\n */\r\n\r\nasync function cancelRun(gptControl, threadid, runid) {\r\n  let {assistantApi, assistant, thread, run} = gptControl;  \r\n\r\n  if (threadid != null && runid != null) {\r\n    try {\r\n      console.log('Cancelling run', threadid, runid);\r\n      let status = await assistantApi.cancelRun(threadid, runid);\r\n      return status;\r\n    } catch (error) {\r\n      throw \"Error cancelling the run \", error, threadid, runid;\r\n    }\r\n  }\r\n  if (run == null || thread == null) {\r\n    return 'No run or thread to cancel';\r\n  }\r\n\r\n  try {\r\n    let runStatus = await assistantApi.getRun(thread.id, run.id);\r\n\r\n    if (runStatus.completed !== null || runStatus.status === \"cancelling\") {\r\n      return `Run ${run.id} status: ${runStatus.status} , completed: ${runStatus.completed}` \r\n    }\r\n    let status = await assistantApi.cancelRun(thread.id, run.id);\r\n    return status;\r\n  } catch (error) {\r\n    throw new Error(`\r\n    Cancel run failed.  \r\n    Best action is to simply wait for a while for it to timeout \r\n    The last alternative is to delete the Assistant ${assistant.name} and restart your session`);\r\n  }\r\n}\r\nexport default cancelRun;"],"names":["string2Table","table","source","iTable","lib","parts","split","length","name","rows2csv","arr","headers","Object","keys","filter","key","join","rows","map","row","line","sep","value2String","value","valueString","replace","trim","toString","async","_catalogSearch","params","appEnv","gptControl","metadata","store","console","log","q","catalog","addServices","payload","qs","r","apiCall","links","JSON","stringify","items","err","_listSASObjects","resource","limit","includes","toLowerCase","s","start","itemsList","_listSASDataLib","restafedit","getLibraryList","_listSASTables","library","p","getTableList","_listColumns","_getData","_idescribeTable","data","_runSAS","program","session","restaflib","caslRun","results","computeSummary","computeRun","src","logText","push","logAsArray","computeResults","_keywords","keywords","format","t","forEach","k","i","_describeTable","where","csv","sessionID","appControl","casServerName","computeContext","initialFetch","tappEnv","setup","logonPayload","describe","scrollTable","tableSummary","getTableSummary","columns","state","error","_catalogFunctionSpec","description","parameters","properties","type","required","_getDataFunctionSpec","_listSASObjectsFunctionSpec","_listSASDataLibFunctionSpec","enum","_listSASTablesFunctionSpec","_listColumnsFunctionSpec","_describeTableSpec","_runSASFunctionSpec","_keywordsFunctionSpec","apiMapper","client","provider","assistantApi","listAssistants","args","options","beta","assistants","list","createAssistant","create","getAssistant","id","retrieve","deleteAssistant","del","updateAssistant","fileIds","file_ids","update","createThread","threads","getThread","deleteThread","createMessage","threadid","role","content","newOptions","assign","messages","listMessages","uploadFile","fileHandle","purpose","files","file","createAssistantFile","assistantId","fileId","file_id","createRun","runs","assistant_id","additional_instructions","instructions","tools","getRun","runid","listRuns","cancelRun","cancel","submitToolOutputsToRun","submitToolOutputs","setupAssistant","config","credentials","endPoint","OpenAI","apiKey","dangerouslyAllowBrowser","AssistantsClient","AzureKeyCredential","specs","builtinTools","code","retrieval","f","function","functionList","instruction","window","functionSpecs","dtools","incoming","domainTools","findIndex","fe","concat","model","assistantName","assistant","assistantid","thread","run","userData","user","viyaConfig","host","currentSource","servers","serverName","compute","cas","restaf","defaultSource","initStore","casProxy","logon","indexOf","casSetup","ssid","computeSetup","e","setupViya","createArgs","order","find","a","Error","status","lastThread","loadThread","newAssistant","getLatestMessage","output","annotations","reverse","pollRun","done","runStatus","sleep","ms","Promise","resolve","setTimeout","setError","actionid","tool_call_id","toolCallId","runAssistant","prompt","opts","runArgs","formatInstructions","message","requiredActions","required_action","submit_tool_outputs","tool_calls","requiredAction","toolCalls","toolsOutput","action","functionName","parse","arguments","response","newRun","tool_outputs","runPrompt","inst","getMessages","m","filename","assistantFile","currentFileIds","v","setFileIds","fileName","assistantFileId","completed"],"mappings":"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"}