{"version":3,"file":"index.modern.js","sources":["../src/setupAssistant.js","../src/createAssistant.js","../src/loadThread.js","../src/getLatestMessage.js","../src/pollRun.js","../src/runAssistant.js","../src/required_action.js","../src/closeAssistant.js","../src/getMessages.js"],"sourcesContent":["/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function setupAssistant\r\n * @description   Setup the GPT Assistant\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return gptControl object}\r\n */\r\nimport OpenAI from 'openai';\r\nimport { OpenAIClient, OpenAIKeyCredential } from '@azure/openai';\r\nimport loadThread from './loadThread.js';\r\nimport createAssistant from './createAssistant.js';\r\n\r\nasync function setupAssistant(config) {\r\n  let { provider, credentials } = config;\r\n  let {openaiKey, azureaiKey, azureaiEndpoint} = credentials;\r\n  // let apiKey = (provider === 'openai') ? process.env.OPENAI_KEY : process.env.OPENAI_AZ_KEY;\r\n\r\n  //\r\n  debugger;\r\n  let client = null;\r\n  if (provider === 'openai') {\r\n    if (openaiKey == null) {\r\n      throw new Error('Missing OpenAI API Key');\r\n    }\r\n    client = new OpenAI({ apiKey: openaiKey, dangerouslyAllowBrowser: true });\r\n\r\n  } else if (provider === 'azureai') {\r\n    if (azureaiKey == null) {\r\n      throw new Error('Missing Azure API Key');\r\n    }\r\n    if (azureaiEndpoint == null) {\r\n      throw new Error('Missing Azure Endpoint');\r\n    }\r\n    client = new OpenAIClient(endpoint, new OpenAIKeyCredential(azureaiKey));\r\n  } else {\r\n    throw new Error('Invalid provider. Must be openai or azureai.');\r\n  }\r\n\r\n  debugger;\r\n  let gptControl = {\r\n    client: client,\r\n    assistant: null,\r\n    thread: null,\r\n    threadid: null,\r\n    specs: config.domainTools,\r\n    appEnv: null,\r\n    config: config, // save the config for runtime changes\r\n  };\r\n  // create assistant and thread\r\n  debugger;\r\n  gptControl.assistant = await createAssistant(client, config);\r\n  debugger;\r\n  gptControl.thread = await loadThread(client, config);\r\n  debugger;\r\n  gptControl.threadid = gptControl.thread.id;// just for convenience\r\n  return gptControl;\r\n}\r\nexport default setupAssistant;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @function createAssistant\r\n * @description   Create a new assistant\r\n * @param {string} client - client object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return assistant object\r\n */\r\nasync function createAssistant(client, config) {\r\n  let { assistantName, assistantid, instructions, model, domainTools } = config;\r\n\r\n  // create args for assistant create\r\n  let createArgs = {\r\n    name: assistantName,\r\n    instructions: instructions,\r\n    model: model,\r\n  };\r\n  if (domainTools.tools != null) {\r\n    createArgs.tools = domainTools.tools;\r\n  }\r\n\r\n  let assistant = null;\r\n  debugger;\r\n  console.log(assistantid);\r\n  if (assistantid !== \"0\") {\r\n    debugger;\r\n    assistant = await client.beta.assistants.retrieve(assistantid);\r\n    debugger;\r\n  } else {\r\n    // local rules: avoid creating a new assistant if one exists\r\n    // use name to find the assistant\r\n    // wish there was a way to filter on names in the API call\r\n    debugger;\r\n    const myAssistants = await client.beta.assistants.list({\r\n      order: \"desc\",\r\n      limit: \"100\", //ugh!\r\n    });\r\n    assistant = myAssistants.data.find((a) => {\r\n      if (a.name === assistantName) {\r\n        return a;\r\n      }\r\n    });\r\n    // if first time using this name, create the assistant\r\n    if (assistant == null) {\r\n      assistant = await client.beta.assistants.create(createArgs);\r\n    }\r\n  }\r\n  \r\n  debugger;\r\n  return assistant;\r\n}\r\nexport default createAssistant;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @function loadThread\r\n * @description   new thread or open existing thread\r\n * @params {object} client - client object\r\n * @param {object} config - configuration object\r\n * @returns {promise} - return thread object\r\n */\r\nasync function loadThread(client, config) {\r\n  let {threadid} = config; \r\n  let thread = null;\r\n  // If we are reusing the thread, try to retrieve it\r\n  try {\r\n    thread = (threadid === '0') \r\n      ? await client.beta.threads.create({ metadata: { assistantName: assistant.name }})\r\n      : await client.beta.threads.retrieve(threadid);\r\n  } catch (error) {\r\n    console.log(error); \r\n    console.log(error.status);\r\n    throw new Error(`Error status ${error.status}. Unable to retrieve the thread ${threadid}. see console for details.`);\r\n  }\r\n  debugger;\r\n  return thread;\r\n}\r\nexport default loadThread;\r\n","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description Return the latest message from thread\r\n * @param {object}  gptControl- client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {promise} - messages - array of latest assistant messages[ {id, role, type, content}]\r\n * @notes - This function will return latest assistant messages based on limit\r\n */\r\nasync function getLatestMessage(gptControl, limit) {  \r\n  let {client, thread} = gptControl;\r\n  const messages = await client.beta.threads.messages.list(thread.id, {limit:limit});\r\n  //console.log('body', JSON.stringify(messages.body.data, null, 4));\r\n  let output = [];\r\n  let data = messages.data;\r\n  for (let i = 0; i < messages.data.length; i++){\r\n    let content = data[i].content[0];\r\n    if (data[i].role === 'assistant') {\r\n      output.push({id: data[i].id, role: data[i].role, type: content.type, content: content[content.type].value});\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  if (output.length > 1) {\r\n    output = output.reverse();\r\n  }\r\n  return output;\r\n\r\n}\r\nexport default getLatestMessage;","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Poll run status since there is no streaming support\r\n * @function pollRun\r\n * @params {object} client - client object\r\n * @params {object} thread - thread object\r\n * @params {object} run - run object    \r\n * @params {object} gptControl - gpt  session control object\r\n * @returns {object} - runStatus from client.beta.threads.runs.retrieve\r\n * @notes - Will wait for completion(!(queued,in_progress, cancelling))\r\n */\r\nasync function pollRun(thread, run, gptControl) {\r\n  let { client} = gptControl;\r\n  let done = null;\r\n  let runStatus = null;\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  // Since there is no streaming support, sleep and poll the status\r\n  do {\r\n    debugger;\r\n    runStatus = await client.beta.threads.runs.retrieve(thread.id, run.id);\r\n    \r\n    console.log(\"-------------------\", runStatus.status);\r\n    if (\r\n      !(\r\n        runStatus.status === \"queued\" ||\r\n        runStatus.status === \"in_progress\" ||\r\n        runStatus.status === \"cancelling\"\r\n      )\r\n    ) {\r\n      debugger;\r\n      done = runStatus.status;\r\n    } else {\r\n      await sleep(2000);\r\n      console.log(\"waited 2000 ms\");\r\n    }\r\n  } while (done === null);\r\n\r\n  /*\r\n  let newAssistant = await client.beta.assistants.update(assistant.id, {\r\n    metadata: { thread_id: thread.id, lastRunId: run.id} \r\n  });\r\n  */\r\n  debugger;\r\n //  gptControl.assistant = newAssistant;\r\n  return runStatus;\r\n\r\n}\r\nexport default pollRun;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport getLatestMessage from \"./getLatestMessage.js\";\r\nimport required_action from \"./required_action.js\";\r\nimport pollRun from \"./pollRun.js\";\r\n\r\n/**\r\n * @async\r\n * @description - Run the latest prompt from the user\r\n * @function runAssistant\r\n *\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {string} prompt - user's prompt\r\n * @param {string} instructions - Additional instructions for the run\r\n * @param {object} appEnv - application info - ex: Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n \r\n * @returns {promise} - response from GPT(can be text, string, html etc...)\r\n * @notes - This function will run the assistant with the prompt and return the response from the assistant.\r\n * @example \r\n *  let response = await runAssistant(gptControl, prompt, promptInstructions,appEnv); \r\n*/\r\n\r\nasync function runAssistant(gptControl,prompt, instructions, appEnv) {\r\n  let { client, assistant, thread, specs } = gptControl;\r\n  //add the user request to thread\r\n  try {\r\n    let _newMessage = await client.beta.threads.messages.create(thread.id, {\r\n      role: \"user\",\r\n      content: prompt,\r\n    });\r\n    let r = await runPrompt(gptControl, appEnv, instructions);\r\n    return r;\r\n  } catch (error) {\r\n    //tbd: recovery?\r\n    debugger;\r\n    console.log(\r\n      `status = ${error.status}. Unable to add the prompt to the thread`\r\n    );\r\n    console.log(error);\r\n    throw new Error('Unable to add the prompt to the thread. See console for more details');\r\n  }\r\n}\r\nasync function runPrompt(gptControl, appEnv, instructions) {\r\n  let { client, assistant, thread } = gptControl;\r\n  let runArgs = {\r\n    assistant_id: assistant.id,\r\n    instructions: instructions != null ? instructions : \"\",\r\n  };\r\n  // Run the assistant with the prompt and poll for completion\r\n  let run = await client.beta.threads.runs.create(thread.id, runArgs);\r\n  debugger;\r\n  let runStatus = await pollRun(thread, run, gptControl);\r\n\r\n  //check for completion status\r\n  let message;\r\n  if (runStatus.status === \"completed\") {\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else if (runStatus.status === \"requires_action\") {\r\n    let r = await required_action(runStatus, thread, run, gptControl, appEnv);\r\n    message = await getLatestMessage(gptControl, 5);\r\n  } else {\r\n    message = [{ runStatus: runStatus.status }];\r\n  }\r\n  return message;\r\n}\r\nexport default runAssistant;\r\n\r\n//https://platform.openai.com/docs/guides/text-generation/chat-completions-api\r\n","\r\n/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @async\r\n * @description - Handle required actions for Assistant\r\n * @function required_action\r\n * @param {object} runStatus - run status object\r\n * @param {object} thread - thread object\r\n * @param {object} run - run object\r\n * @param {object} gptControl - gpt  session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {promise} - status from submitToolOutputs\r\n */\r\nimport pollRun from \"./pollRun.js\";\r\nasync function required_action(runStatus, thread, run,  gptControl, appEnv) {\r\n  let{client,specs} = gptControl;\r\n  let {functionList} = specs;\r\n  \r\n  // get the required actions from the run status\r\n  let requiredActions = runStatus.required_action.submit_tool_outputs.tool_calls;\r\n  \r\n  let toolsOutput = [];\r\n  for (let action of requiredActions) {\r\n    let functionName = action.function.name;\r\n    console.log('Requested function: ', functionName);\r\n    let params = JSON.parse(action.function.arguments);\r\n    debugger;\r\n    let response = await functionList[functionName](params, appEnv, gptControl);\r\n    debugger;\r\n    toolsOutput.push({\r\n      tool_call_id: action.id,\r\n      output: JSON.stringify(response),\r\n    });\r\n }\r\n// submit the outputs to the thread\r\n let newRun = await client.beta.threads.runs.submitToolOutputs(\r\n  thread.id, run.id, { tool_outputs: toolsOutput });\r\n\r\n// wait for output to appear in the thread messages\r\n let outputStatus = await pollRun(thread, newRun, gptControl);\r\n\r\nreturn outputStatus;\r\n}\r\nexport default required_action;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @async\r\n * @description - Close Viya connections.\r\n * @function closeAssistant\r\n * @param {object} gptControl - gpt session control object\r\n * @param {object} appEnv - Viya session control object(has store, sessionID, etc. to talk to Viya server)\r\n * @returns {boolean} - true\r\n */\r\nasync function closeAssistant(_gptControl, _appEnv) {\r\n  console.log('in closeAssistant');\r\n  return true;\r\n}\r\nexport default closeAssistant;","/*\r\n * Copyright © 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * \r\n * @description Return sepcified number of messages from thread\r\n * @param {object}  gptControl- client control object\r\n * @param {number} limit - limit the number of messages to return\r\n * @returns {*} - messages - array of messages[ {id, role, type, content}]\r\n * @notes - This function will return the specified number of messages from the thread\r\n * Typically the top 2 will be the assistant message and user's prompt\r\n */\r\nasync function getMessages(gptControl, limit) {  \r\n  let {client, thread} = gptControl;\r\n  const messages = await client.beta.threads.messages.list(thread.id, {limit:limit});\r\n  //console.log('body', JSON.stringify(messages.body.data, null, 4));\r\n  let output = messages.data.map((m) => {\r\n    let content = m.content[0];\r\n    return {id: m.id, role: m.role, type: content.type, content: content[content.type].value};\r\n  });\r\n  return output;\r\n\r\n}\r\nexport default getMessages;"],"names":["async","setupAssistant","config","provider","credentials","openaiKey","azureaiKey","azureaiEndpoint","client","Error","OpenAI","apiKey","dangerouslyAllowBrowser","OpenAIClient","endpoint","OpenAIKeyCredential","gptControl","assistant","thread","threadid","specs","domainTools","appEnv","assistantName","assistantid","instructions","model","createArgs","name","tools","console","log","beta","assistants","retrieve","list","order","limit","data","find","a","create","createAssistant","threads","metadata","error","status","loadThread","id","getLatestMessage","messages","output","i","length","content","role","push","type","value","reverse","pollRun","run","done","runStatus","sleep","ms","Promise","resolve","setTimeout","runs","runAssistant","prompt","r","message","runArgs","assistant_id","functionList","requiredActions","required_action","submit_tool_outputs","tool_calls","toolsOutput","action","functionName","function","params","JSON","parse","arguments","response","tool_call_id","stringify","newRun","submitToolOutputs","tool_outputs","runPrompt","closeAssistant","_gptControl","_appEnv","getMessages","map","m"],"mappings":"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"}